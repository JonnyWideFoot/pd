# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
PD - Molecular Mechanics Library for Python ver beta0.01 
 (c) 2003-2006 M.Tyka, J.Rea
"""

import _pd
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _pd.PySwigIterator_value(*args)
    def incr(*args): return _pd.PySwigIterator_incr(*args)
    def decr(*args): return _pd.PySwigIterator_decr(*args)
    def distance(*args): return _pd.PySwigIterator_distance(*args)
    def equal(*args): return _pd.PySwigIterator_equal(*args)
    def copy(*args): return _pd.PySwigIterator_copy(*args)
    def next(*args): return _pd.PySwigIterator_next(*args)
    def previous(*args): return _pd.PySwigIterator_previous(*args)
    def advance(*args): return _pd.PySwigIterator_advance(*args)
    def __eq__(*args): return _pd.PySwigIterator___eq__(*args)
    def __ne__(*args): return _pd.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _pd.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _pd.PySwigIterator___isub__(*args)
    def __add__(*args): return _pd.PySwigIterator___add__(*args)
    def __sub__(*args): return _pd.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _pd.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pd.IntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pd.IntVector___nonzero__(*args)
    def __len__(*args): return _pd.IntVector___len__(*args)
    def pop(*args): return _pd.IntVector_pop(*args)
    def __getslice__(*args): return _pd.IntVector___getslice__(*args)
    def __setslice__(*args): return _pd.IntVector___setslice__(*args)
    def __delslice__(*args): return _pd.IntVector___delslice__(*args)
    def __delitem__(*args): return _pd.IntVector___delitem__(*args)
    def __getitem__(*args): return _pd.IntVector___getitem__(*args)
    def __setitem__(*args): return _pd.IntVector___setitem__(*args)
    def append(*args): return _pd.IntVector_append(*args)
    def empty(*args): return _pd.IntVector_empty(*args)
    def size(*args): return _pd.IntVector_size(*args)
    def clear(*args): return _pd.IntVector_clear(*args)
    def swap(*args): return _pd.IntVector_swap(*args)
    def get_allocator(*args): return _pd.IntVector_get_allocator(*args)
    def begin(*args): return _pd.IntVector_begin(*args)
    def end(*args): return _pd.IntVector_end(*args)
    def rbegin(*args): return _pd.IntVector_rbegin(*args)
    def rend(*args): return _pd.IntVector_rend(*args)
    def pop_back(*args): return _pd.IntVector_pop_back(*args)
    def erase(*args): return _pd.IntVector_erase(*args)
    def __init__(self, *args): 
        this = _pd.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pd.IntVector_push_back(*args)
    def front(*args): return _pd.IntVector_front(*args)
    def back(*args): return _pd.IntVector_back(*args)
    def assign(*args): return _pd.IntVector_assign(*args)
    def resize(*args): return _pd.IntVector_resize(*args)
    def insert(*args): return _pd.IntVector_insert(*args)
    def reserve(*args): return _pd.IntVector_reserve(*args)
    def capacity(*args): return _pd.IntVector_capacity(*args)
    __swig_destroy__ = _pd.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _pd.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pd.FloatVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pd.FloatVector___nonzero__(*args)
    def __len__(*args): return _pd.FloatVector___len__(*args)
    def pop(*args): return _pd.FloatVector_pop(*args)
    def __getslice__(*args): return _pd.FloatVector___getslice__(*args)
    def __setslice__(*args): return _pd.FloatVector___setslice__(*args)
    def __delslice__(*args): return _pd.FloatVector___delslice__(*args)
    def __delitem__(*args): return _pd.FloatVector___delitem__(*args)
    def __getitem__(*args): return _pd.FloatVector___getitem__(*args)
    def __setitem__(*args): return _pd.FloatVector___setitem__(*args)
    def append(*args): return _pd.FloatVector_append(*args)
    def empty(*args): return _pd.FloatVector_empty(*args)
    def size(*args): return _pd.FloatVector_size(*args)
    def clear(*args): return _pd.FloatVector_clear(*args)
    def swap(*args): return _pd.FloatVector_swap(*args)
    def get_allocator(*args): return _pd.FloatVector_get_allocator(*args)
    def begin(*args): return _pd.FloatVector_begin(*args)
    def end(*args): return _pd.FloatVector_end(*args)
    def rbegin(*args): return _pd.FloatVector_rbegin(*args)
    def rend(*args): return _pd.FloatVector_rend(*args)
    def pop_back(*args): return _pd.FloatVector_pop_back(*args)
    def erase(*args): return _pd.FloatVector_erase(*args)
    def __init__(self, *args): 
        this = _pd.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pd.FloatVector_push_back(*args)
    def front(*args): return _pd.FloatVector_front(*args)
    def back(*args): return _pd.FloatVector_back(*args)
    def assign(*args): return _pd.FloatVector_assign(*args)
    def resize(*args): return _pd.FloatVector_resize(*args)
    def insert(*args): return _pd.FloatVector_insert(*args)
    def reserve(*args): return _pd.FloatVector_reserve(*args)
    def capacity(*args): return _pd.FloatVector_capacity(*args)
    __swig_destroy__ = _pd.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _pd.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _pd.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _pd.DoubleVector___nonzero__(*args)
    def __len__(*args): return _pd.DoubleVector___len__(*args)
    def pop(*args): return _pd.DoubleVector_pop(*args)
    def __getslice__(*args): return _pd.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _pd.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _pd.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _pd.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _pd.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _pd.DoubleVector___setitem__(*args)
    def append(*args): return _pd.DoubleVector_append(*args)
    def empty(*args): return _pd.DoubleVector_empty(*args)
    def size(*args): return _pd.DoubleVector_size(*args)
    def clear(*args): return _pd.DoubleVector_clear(*args)
    def swap(*args): return _pd.DoubleVector_swap(*args)
    def get_allocator(*args): return _pd.DoubleVector_get_allocator(*args)
    def begin(*args): return _pd.DoubleVector_begin(*args)
    def end(*args): return _pd.DoubleVector_end(*args)
    def rbegin(*args): return _pd.DoubleVector_rbegin(*args)
    def rend(*args): return _pd.DoubleVector_rend(*args)
    def pop_back(*args): return _pd.DoubleVector_pop_back(*args)
    def erase(*args): return _pd.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _pd.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _pd.DoubleVector_push_back(*args)
    def front(*args): return _pd.DoubleVector_front(*args)
    def back(*args): return _pd.DoubleVector_back(*args)
    def assign(*args): return _pd.DoubleVector_assign(*args)
    def resize(*args): return _pd.DoubleVector_resize(*args)
    def insert(*args): return _pd.DoubleVector_insert(*args)
    def reserve(*args): return _pd.DoubleVector_reserve(*args)
    def capacity(*args): return _pd.DoubleVector_capacity(*args)
    __swig_destroy__ = _pd.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pd.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class Verbosity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Verbosity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Verbosity, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Silent = _pd.Verbosity_Silent
    Quiet = _pd.Verbosity_Quiet
    Normal = _pd.Verbosity_Normal
    Loud = _pd.Verbosity_Loud
    Scream = _pd.Verbosity_Scream
    Eleven = _pd.Verbosity_Eleven
    __swig_destroy__ = _pd.delete_Verbosity
    __del__ = lambda self : None;
Verbosity_swigregister = _pd.Verbosity_swigregister
Verbosity_swigregister(Verbosity)

class IDrawProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IDrawProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IDrawProvider, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def request(*args): return _pd.IDrawProvider_request(*args)
    __swig_destroy__ = _pd.delete_IDrawProvider
    __del__ = lambda self : None;
IDrawProvider_swigregister = _pd.IDrawProvider_swigregister
IDrawProvider_swigregister(IDrawProvider)

class ICloneable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ICloneable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICloneable, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.ICloneable_clone(*args)
    __swig_destroy__ = _pd.delete_ICloneable
    __del__ = lambda self : None;
ICloneable_swigregister = _pd.ICloneable_swigregister
ICloneable_swigregister(ICloneable)

class Object(ICloneable):
    __swig_setmethods__ = {}
    for _s in [ICloneable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [ICloneable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_Object
    __del__ = lambda self : None;
    __swig_setmethods__["name"] = _pd.Object_name_set
    __swig_getmethods__["name"] = _pd.Object_name_get
    if _newclass:name = _swig_property(_pd.Object_name_get, _pd.Object_name_set)
    def getid(*args): return _pd.Object_getid(*args)
Object_swigregister = _pd.Object_swigregister
Object_swigregister(Object)

class IndexPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IndexPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_IndexPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["i"] = _pd.IndexPair_i_set
    __swig_getmethods__["i"] = _pd.IndexPair_i_get
    if _newclass:i = _swig_property(_pd.IndexPair_i_get, _pd.IndexPair_i_set)
    __swig_setmethods__["j"] = _pd.IndexPair_j_set
    __swig_getmethods__["j"] = _pd.IndexPair_j_get
    if _newclass:j = _swig_property(_pd.IndexPair_j_get, _pd.IndexPair_j_set)
    __swig_destroy__ = _pd.delete_IndexPair
    __del__ = lambda self : None;
IndexPair_swigregister = _pd.IndexPair_swigregister
IndexPair_swigregister(IndexPair)

class IndexTriplet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IndexTriplet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexTriplet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_IndexTriplet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["i"] = _pd.IndexTriplet_i_set
    __swig_getmethods__["i"] = _pd.IndexTriplet_i_get
    if _newclass:i = _swig_property(_pd.IndexTriplet_i_get, _pd.IndexTriplet_i_set)
    __swig_setmethods__["a"] = _pd.IndexTriplet_a_set
    __swig_getmethods__["a"] = _pd.IndexTriplet_a_get
    if _newclass:a = _swig_property(_pd.IndexTriplet_a_get, _pd.IndexTriplet_a_set)
    __swig_setmethods__["j"] = _pd.IndexTriplet_j_set
    __swig_getmethods__["j"] = _pd.IndexTriplet_j_get
    if _newclass:j = _swig_property(_pd.IndexTriplet_j_get, _pd.IndexTriplet_j_set)
    __swig_destroy__ = _pd.delete_IndexTriplet
    __del__ = lambda self : None;
IndexTriplet_swigregister = _pd.IndexTriplet_swigregister
IndexTriplet_swigregister(IndexTriplet)

class IndexQuartet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IndexQuartet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexQuartet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_IndexQuartet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["i"] = _pd.IndexQuartet_i_set
    __swig_getmethods__["i"] = _pd.IndexQuartet_i_get
    if _newclass:i = _swig_property(_pd.IndexQuartet_i_get, _pd.IndexQuartet_i_set)
    __swig_setmethods__["a"] = _pd.IndexQuartet_a_set
    __swig_getmethods__["a"] = _pd.IndexQuartet_a_get
    if _newclass:a = _swig_property(_pd.IndexQuartet_a_get, _pd.IndexQuartet_a_set)
    __swig_setmethods__["b"] = _pd.IndexQuartet_b_set
    __swig_getmethods__["b"] = _pd.IndexQuartet_b_get
    if _newclass:b = _swig_property(_pd.IndexQuartet_b_get, _pd.IndexQuartet_b_set)
    __swig_setmethods__["j"] = _pd.IndexQuartet_j_set
    __swig_getmethods__["j"] = _pd.IndexQuartet_j_get
    if _newclass:j = _swig_property(_pd.IndexQuartet_j_get, _pd.IndexQuartet_j_set)
    __swig_destroy__ = _pd.delete_IndexQuartet
    __del__ = lambda self : None;
IndexQuartet_swigregister = _pd.IndexQuartet_swigregister
IndexQuartet_swigregister(IndexQuartet)

class IndexHexet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IndexHexet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexHexet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_IndexHexet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["a"] = _pd.IndexHexet_a_set
    __swig_getmethods__["a"] = _pd.IndexHexet_a_get
    if _newclass:a = _swig_property(_pd.IndexHexet_a_get, _pd.IndexHexet_a_set)
    __swig_setmethods__["b"] = _pd.IndexHexet_b_set
    __swig_getmethods__["b"] = _pd.IndexHexet_b_get
    if _newclass:b = _swig_property(_pd.IndexHexet_b_get, _pd.IndexHexet_b_set)
    __swig_setmethods__["c"] = _pd.IndexHexet_c_set
    __swig_getmethods__["c"] = _pd.IndexHexet_c_get
    if _newclass:c = _swig_property(_pd.IndexHexet_c_get, _pd.IndexHexet_c_set)
    __swig_setmethods__["d"] = _pd.IndexHexet_d_set
    __swig_getmethods__["d"] = _pd.IndexHexet_d_get
    if _newclass:d = _swig_property(_pd.IndexHexet_d_get, _pd.IndexHexet_d_set)
    __swig_setmethods__["i"] = _pd.IndexHexet_i_set
    __swig_getmethods__["i"] = _pd.IndexHexet_i_get
    if _newclass:i = _swig_property(_pd.IndexHexet_i_get, _pd.IndexHexet_i_set)
    __swig_setmethods__["j"] = _pd.IndexHexet_j_set
    __swig_getmethods__["j"] = _pd.IndexHexet_j_get
    if _newclass:j = _swig_property(_pd.IndexHexet_j_get, _pd.IndexHexet_j_set)
    __swig_destroy__ = _pd.delete_IndexHexet
    __del__ = lambda self : None;
IndexHexet_swigregister = _pd.IndexHexet_swigregister
IndexHexet_swigregister(IndexHexet)

class DrawingVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DrawingVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DrawingVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v1"] = _pd.DrawingVector_v1_set
    __swig_getmethods__["v1"] = _pd.DrawingVector_v1_get
    if _newclass:v1 = _swig_property(_pd.DrawingVector_v1_get, _pd.DrawingVector_v1_set)
    __swig_setmethods__["v2"] = _pd.DrawingVector_v2_set
    __swig_getmethods__["v2"] = _pd.DrawingVector_v2_get
    if _newclass:v2 = _swig_property(_pd.DrawingVector_v2_get, _pd.DrawingVector_v2_set)
    __swig_setmethods__["colourCode"] = _pd.DrawingVector_colourCode_set
    __swig_getmethods__["colourCode"] = _pd.DrawingVector_colourCode_get
    if _newclass:colourCode = _swig_property(_pd.DrawingVector_colourCode_get, _pd.DrawingVector_colourCode_set)
    def __init__(self, *args): 
        this = _pd.new_DrawingVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _pd.DrawingVector_clear(*args)
    __swig_destroy__ = _pd.delete_DrawingVector
    __del__ = lambda self : None;
DrawingVector_swigregister = _pd.DrawingVector_swigregister
DrawingVector_swigregister(DrawingVector)

class StringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_StringPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["p"] = _pd.StringPair_p_set
    __swig_getmethods__["p"] = _pd.StringPair_p_get
    if _newclass:p = _swig_property(_pd.StringPair_p_get, _pd.StringPair_p_set)
    __swig_setmethods__["q"] = _pd.StringPair_q_set
    __swig_getmethods__["q"] = _pd.StringPair_q_get
    if _newclass:q = _swig_property(_pd.StringPair_q_get, _pd.StringPair_q_set)
    __swig_destroy__ = _pd.delete_StringPair
    __del__ = lambda self : None;
StringPair_swigregister = _pd.StringPair_swigregister
StringPair_swigregister(StringPair)

class StringQuartet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, StringQuartet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringQuartet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_StringQuartet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["p"] = _pd.StringQuartet_p_set
    __swig_getmethods__["p"] = _pd.StringQuartet_p_get
    if _newclass:p = _swig_property(_pd.StringQuartet_p_get, _pd.StringQuartet_p_set)
    __swig_setmethods__["q"] = _pd.StringQuartet_q_set
    __swig_getmethods__["q"] = _pd.StringQuartet_q_get
    if _newclass:q = _swig_property(_pd.StringQuartet_q_get, _pd.StringQuartet_q_set)
    __swig_setmethods__["r"] = _pd.StringQuartet_r_set
    __swig_getmethods__["r"] = _pd.StringQuartet_r_get
    if _newclass:r = _swig_property(_pd.StringQuartet_r_get, _pd.StringQuartet_r_set)
    __swig_setmethods__["s"] = _pd.StringQuartet_s_set
    __swig_getmethods__["s"] = _pd.StringQuartet_s_get
    if _newclass:s = _swig_property(_pd.StringQuartet_s_get, _pd.StringQuartet_s_set)
    __swig_destroy__ = _pd.delete_StringQuartet
    __del__ = lambda self : None;
StringQuartet_swigregister = _pd.StringQuartet_swigregister
StringQuartet_swigregister(StringQuartet)

torsionalRangeRadians = _pd.torsionalRangeRadians
torsionalRangeDegrees = _pd.torsionalRangeDegrees
class TorsionalTolleranceRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TorsionalTolleranceRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TorsionalTolleranceRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_TorsionalTolleranceRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def isInRange(*args): return _pd.TorsionalTolleranceRange_isInRange(*args)
    def setValue(*args): return _pd.TorsionalTolleranceRange_setValue(*args)
    def setPlus(*args): return _pd.TorsionalTolleranceRange_setPlus(*args)
    def setMinus(*args): return _pd.TorsionalTolleranceRange_setMinus(*args)
    def getValue(*args): return _pd.TorsionalTolleranceRange_getValue(*args)
    def getPlus(*args): return _pd.TorsionalTolleranceRange_getPlus(*args)
    def getMinus(*args): return _pd.TorsionalTolleranceRange_getMinus(*args)
    __swig_destroy__ = _pd.delete_TorsionalTolleranceRange
    __del__ = lambda self : None;
TorsionalTolleranceRange_swigregister = _pd.TorsionalTolleranceRange_swigregister
TorsionalTolleranceRange_swigregister(TorsionalTolleranceRange)

class MathConst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MathConst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathConst, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_MathConst
    __del__ = lambda self : None;
MathConst_swigregister = _pd.MathConst_swigregister
MathConst_swigregister(MathConst)
cvar = _pd.cvar
MathConst.PI = _pd.cvar.MathConst_PI
MathConst.TwoPI = _pd.cvar.MathConst_TwoPI
MathConst.FourPI = _pd.cvar.MathConst_FourPI
MathConst.PIOver180 = _pd.cvar.MathConst_PIOver180
MathConst.OneEightyOverPI = _pd.cvar.MathConst_OneEightyOverPI

RadToDeg = _pd.RadToDeg
DegToRad = _pd.DegToRad
fNAN = _pd.fNAN
dNAN = _pd.dNAN
brand = _pd.brand
frand = _pd.frand
frand01 = _pd.frand01
factorial = _pd.factorial
log_factorial = _pd.log_factorial
log_factorial_sterling = _pd.log_factorial_sterling
sphereSurfaceArea = _pd.sphereSurfaceArea
sphereSurfaceOverlap = _pd.sphereSurfaceOverlap
sphereSurfaceOverlapDeriv = _pd.sphereSurfaceOverlapDeriv
calcQuadraticPolynomial = _pd.calcQuadraticPolynomial
solveQuadraticPolynomial = _pd.solveQuadraticPolynomial
calcCubicPolynomial = _pd.calcCubicPolynomial
solveCubicPolynomial = _pd.solveCubicPolynomial
leastSquaresFit = _pd.leastSquaresFit
class PolygonGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PolygonGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PolygonGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PolygonGraph
    __del__ = lambda self : None;
    def InterpolateFromX(*args): return _pd.PolygonGraph_InterpolateFromX(*args)
PolygonGraph_swigregister = _pd.PolygonGraph_swigregister
PolygonGraph_swigregister(PolygonGraph)
isNumber = _pd.isNumber

class matrix3x3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, matrix3x3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix3x3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _pd.matrix3x3_r_set
    __swig_getmethods__["r"] = _pd.matrix3x3_r_get
    if _newclass:r = _swig_property(_pd.matrix3x3_r_get, _pd.matrix3x3_r_set)
    def __init__(self, *args): 
        this = _pd.new_matrix3x3(*args)
        try: self.this.append(this)
        except: self.this = this
    def setToTranspose(*args): return _pd.matrix3x3_setToTranspose(*args)
    def setToijk(*args): return _pd.matrix3x3_setToijk(*args)
    def setToStarVector(*args): return _pd.matrix3x3_setToStarVector(*args)
    def setTo(*args): return _pd.matrix3x3_setTo(*args)
    def setToIdentity(*args): return _pd.matrix3x3_setToIdentity(*args)
    def setToNull(*args): return _pd.matrix3x3_setToNull(*args)
    def setToXrot(*args): return _pd.matrix3x3_setToXrot(*args)
    def setToYrot(*args): return _pd.matrix3x3_setToYrot(*args)
    def setToZrot(*args): return _pd.matrix3x3_setToZrot(*args)
    def setToXYZrot(*args): return _pd.matrix3x3_setToXYZrot(*args)
    def setToAxisRot(*args): return _pd.matrix3x3_setToAxisRot(*args)
    def setToRandomRot(*args): return _pd.matrix3x3_setToRandomRot(*args)
    def add(*args): return _pd.matrix3x3_add(*args)
    def sub(*args): return _pd.matrix3x3_sub(*args)
    def postmul(*args): return _pd.matrix3x3_postmul(*args)
    def premul(*args): return _pd.matrix3x3_premul(*args)
    def mul(*args): return _pd.matrix3x3_mul(*args)
    def div(*args): return _pd.matrix3x3_div(*args)
    def orthonormalize(*args): return _pd.matrix3x3_orthonormalize(*args)
    def normalise(*args): return _pd.matrix3x3_normalise(*args)
    def transpose(*args): return _pd.matrix3x3_transpose(*args)
    def invert(*args): return _pd.matrix3x3_invert(*args)
    def determinant(*args): return _pd.matrix3x3_determinant(*args)
    def diagonaliseSymetric(*args): return _pd.matrix3x3_diagonaliseSymetric(*args)
    def info(*args): return _pd.matrix3x3_info(*args)
    def printMathematicaFormat(*args): return _pd.matrix3x3_printMathematicaFormat(*args)
    __swig_destroy__ = _pd.delete_matrix3x3
    __del__ = lambda self : None;
matrix3x3_swigregister = _pd.matrix3x3_swigregister
matrix3x3_swigregister(matrix3x3)

class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["serial"] = _pd.Vertex_serial_set
    __swig_getmethods__["serial"] = _pd.Vertex_serial_get
    if _newclass:serial = _swig_property(_pd.Vertex_serial_get, _pd.Vertex_serial_set)
    __swig_setmethods__["articulationOrder"] = _pd.Vertex_articulationOrder_set
    __swig_getmethods__["articulationOrder"] = _pd.Vertex_articulationOrder_get
    if _newclass:articulationOrder = _swig_property(_pd.Vertex_articulationOrder_get, _pd.Vertex_articulationOrder_set)
    __swig_setmethods__["number"] = _pd.Vertex_number_set
    __swig_getmethods__["number"] = _pd.Vertex_number_get
    if _newclass:number = _swig_property(_pd.Vertex_number_get, _pd.Vertex_number_set)
    __swig_setmethods__["lowpt"] = _pd.Vertex_lowpt_set
    __swig_getmethods__["lowpt"] = _pd.Vertex_lowpt_get
    if _newclass:lowpt = _swig_property(_pd.Vertex_lowpt_get, _pd.Vertex_lowpt_set)
    __swig_setmethods__["adjacency"] = _pd.Vertex_adjacency_set
    __swig_getmethods__["adjacency"] = _pd.Vertex_adjacency_get
    if _newclass:adjacency = _swig_property(_pd.Vertex_adjacency_get, _pd.Vertex_adjacency_set)
    def info(*args): return _pd.Vertex_info(*args)
    def __init__(self, *args): 
        this = _pd.new_Vertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Vertex
    __del__ = lambda self : None;
Vertex_swigregister = _pd.Vertex_swigregister
Vertex_swigregister(Vertex)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Edge(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _pd.Edge___eq__(*args)
    __swig_setmethods__["serial"] = _pd.Edge_serial_set
    __swig_getmethods__["serial"] = _pd.Edge_serial_get
    if _newclass:serial = _swig_property(_pd.Edge_serial_get, _pd.Edge_serial_set)
    __swig_setmethods__["fromVertex"] = _pd.Edge_fromVertex_set
    __swig_getmethods__["fromVertex"] = _pd.Edge_fromVertex_get
    if _newclass:fromVertex = _swig_property(_pd.Edge_fromVertex_get, _pd.Edge_fromVertex_set)
    __swig_setmethods__["toVertex"] = _pd.Edge_toVertex_set
    __swig_getmethods__["toVertex"] = _pd.Edge_toVertex_get
    if _newclass:toVertex = _swig_property(_pd.Edge_toVertex_get, _pd.Edge_toVertex_set)
    def info(*args): return _pd.Edge_info(*args)
    __swig_destroy__ = _pd.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _pd.Edge_swigregister
Edge_swigregister(Edge)

class BiconnectedComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BiconnectedComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BiconnectedComponent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["serial"] = _pd.BiconnectedComponent_serial_set
    __swig_getmethods__["serial"] = _pd.BiconnectedComponent_serial_get
    if _newclass:serial = _swig_property(_pd.BiconnectedComponent_serial_get, _pd.BiconnectedComponent_serial_set)
    __swig_setmethods__["edges"] = _pd.BiconnectedComponent_edges_set
    __swig_getmethods__["edges"] = _pd.BiconnectedComponent_edges_get
    if _newclass:edges = _swig_property(_pd.BiconnectedComponent_edges_get, _pd.BiconnectedComponent_edges_set)
    def info(*args): return _pd.BiconnectedComponent_info(*args)
    def __init__(self, *args): 
        this = _pd.new_BiconnectedComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BiconnectedComponent
    __del__ = lambda self : None;
BiconnectedComponent_swigregister = _pd.BiconnectedComponent_swigregister
BiconnectedComponent_swigregister(BiconnectedComponent)

class GraphBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, GraphBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_GraphBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def addEdge(*args): return _pd.GraphBase_addEdge(*args)
    def setVertexCount(*args): return _pd.GraphBase_setVertexCount(*args)
    def clear(*args): return _pd.GraphBase_clear(*args)
    def getEdges(*args): return _pd.GraphBase_getEdges(*args)
    def getVertices(*args): return _pd.GraphBase_getVertices(*args)
    __swig_destroy__ = _pd.delete_GraphBase
    __del__ = lambda self : None;
GraphBase_swigregister = _pd.GraphBase_swigregister
GraphBase_swigregister(GraphBase)

class UndirectedGraph(GraphBase):
    __swig_setmethods__ = {}
    for _s in [GraphBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, UndirectedGraph, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndirectedGraph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_UndirectedGraph(*args)
        try: self.this.append(this)
        except: self.this = this
    def hasEdge(*args): return _pd.UndirectedGraph_hasEdge(*args)
    def calcArticulationPoints(*args): return _pd.UndirectedGraph_calcArticulationPoints(*args)
    def info(*args): return _pd.UndirectedGraph_info(*args)
    def getBiComponents(*args): return _pd.UndirectedGraph_getBiComponents(*args)
    __swig_destroy__ = _pd.delete_UndirectedGraph
    __del__ = lambda self : None;
UndirectedGraph_swigregister = _pd.UndirectedGraph_swigregister
UndirectedGraph_swigregister(UndirectedGraph)

class FastRandom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FastRandom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FastRandom, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _pd.FastRandom_getInstance
    if _newclass:getInstance = staticmethod(_pd.FastRandom_getInstance)
    __swig_destroy__ = _pd.delete_FastRandom
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pd.new_FastRandom(*args)
        try: self.this.append(this)
        except: self.this = this
    def reinitialise(*args): return _pd.FastRandom_reinitialise(*args)
    def nextUInt(*args): return _pd.FastRandom_nextUInt(*args)
    def next(*args): return _pd.FastRandom_next(*args)
    def nextDouble(*args): return _pd.FastRandom_nextDouble(*args)
    def nextBool(*args): return _pd.FastRandom_nextBool(*args)
FastRandom_swigregister = _pd.FastRandom_swigregister
FastRandom_swigregister(FastRandom)
FastRandom_getInstance = _pd.FastRandom_getInstance

class dvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, dvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dvector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pd.dvector_x_set
    __swig_getmethods__["x"] = _pd.dvector_x_get
    if _newclass:x = _swig_property(_pd.dvector_x_get, _pd.dvector_x_set)
    __swig_setmethods__["y"] = _pd.dvector_y_set
    __swig_getmethods__["y"] = _pd.dvector_y_get
    if _newclass:y = _swig_property(_pd.dvector_y_get, _pd.dvector_y_set)
    __swig_setmethods__["z"] = _pd.dvector_z_set
    __swig_getmethods__["z"] = _pd.dvector_z_get
    if _newclass:z = _swig_property(_pd.dvector_z_get, _pd.dvector_z_set)
    def __init__(self, *args): 
        this = _pd.new_dvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def info(*args): return _pd.dvector_info(*args)
    def setTo(*args): return _pd.dvector_setTo(*args)
    def setToCentrePointBetween(*args): return _pd.dvector_setToCentrePointBetween(*args)
    def setToRandomUnit(*args): return _pd.dvector_setToRandomUnit(*args)
    def isReal(*args): return _pd.dvector_isReal(*args)
    def zero(*args): return _pd.dvector_zero(*args)
    def inv(*args): return _pd.dvector_inv(*args)
    def innerdot(*args): return _pd.dvector_innerdot(*args)
    def mag(*args): return _pd.dvector_mag(*args)
    def add(*args): return _pd.dvector_add(*args)
    def sub(*args): return _pd.dvector_sub(*args)
    def mul(*args): return _pd.dvector_mul(*args)
    def div(*args): return _pd.dvector_div(*args)
    def scalarProduct(*args): return _pd.dvector_scalarProduct(*args)
    def angleWith(*args): return _pd.dvector_angleWith(*args)
    def vectorProduct(*args): return _pd.dvector_vectorProduct(*args)
    def diff(*args): return _pd.dvector_diff(*args)
    def sum(*args): return _pd.dvector_sum(*args)
    def crossProduct(*args): return _pd.dvector_crossProduct(*args)
    def mulmat(*args): return _pd.dvector_mulmat(*args)
    def dist(*args): return _pd.dvector_dist(*args)
    def sqrdist(*args): return _pd.dvector_sqrdist(*args)
    def unify(*args): return _pd.dvector_unify(*args)
    def rotateX(*args): return _pd.dvector_rotateX(*args)
    def rotateY(*args): return _pd.dvector_rotateY(*args)
    def rotateZ(*args): return _pd.dvector_rotateZ(*args)
    def rotateAxis(*args): return _pd.dvector_rotateAxis(*args)
    def rotateYat(*args): return _pd.dvector_rotateYat(*args)
    def interpolate_2(*args): return _pd.dvector_interpolate_2(*args)
    def interpolate_3(*args): return _pd.dvector_interpolate_3(*args)
    def interpolate_4(*args): return _pd.dvector_interpolate_4(*args)
    __swig_destroy__ = _pd.delete_dvector
    __del__ = lambda self : None;
dvector_swigregister = _pd.dvector_swigregister
dvector_swigregister(dvector)

class fvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, fvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fvector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pd.fvector_x_set
    __swig_getmethods__["x"] = _pd.fvector_x_get
    if _newclass:x = _swig_property(_pd.fvector_x_get, _pd.fvector_x_set)
    __swig_setmethods__["y"] = _pd.fvector_y_set
    __swig_getmethods__["y"] = _pd.fvector_y_get
    if _newclass:y = _swig_property(_pd.fvector_y_get, _pd.fvector_y_set)
    __swig_setmethods__["z"] = _pd.fvector_z_set
    __swig_getmethods__["z"] = _pd.fvector_z_get
    if _newclass:z = _swig_property(_pd.fvector_z_get, _pd.fvector_z_set)
    def __init__(self, *args): 
        this = _pd.new_fvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def info(*args): return _pd.fvector_info(*args)
    def setTo(*args): return _pd.fvector_setTo(*args)
    def setToCentrePointBetween(*args): return _pd.fvector_setToCentrePointBetween(*args)
    def setToRandomUnit(*args): return _pd.fvector_setToRandomUnit(*args)
    def isReal(*args): return _pd.fvector_isReal(*args)
    def zero(*args): return _pd.fvector_zero(*args)
    def inv(*args): return _pd.fvector_inv(*args)
    def innerdot(*args): return _pd.fvector_innerdot(*args)
    def mag(*args): return _pd.fvector_mag(*args)
    def add(*args): return _pd.fvector_add(*args)
    def sub(*args): return _pd.fvector_sub(*args)
    def mul(*args): return _pd.fvector_mul(*args)
    def div(*args): return _pd.fvector_div(*args)
    def scalarProduct(*args): return _pd.fvector_scalarProduct(*args)
    def angleWith(*args): return _pd.fvector_angleWith(*args)
    def vectorProduct(*args): return _pd.fvector_vectorProduct(*args)
    def diff(*args): return _pd.fvector_diff(*args)
    def sum(*args): return _pd.fvector_sum(*args)
    def crossProduct(*args): return _pd.fvector_crossProduct(*args)
    def mulmat(*args): return _pd.fvector_mulmat(*args)
    def dist(*args): return _pd.fvector_dist(*args)
    def sqrdist(*args): return _pd.fvector_sqrdist(*args)
    def unify(*args): return _pd.fvector_unify(*args)
    def rotateX(*args): return _pd.fvector_rotateX(*args)
    def rotateY(*args): return _pd.fvector_rotateY(*args)
    def rotateZ(*args): return _pd.fvector_rotateZ(*args)
    def rotateAxis(*args): return _pd.fvector_rotateAxis(*args)
    def rotateYat(*args): return _pd.fvector_rotateYat(*args)
    def interpolate_2(*args): return _pd.fvector_interpolate_2(*args)
    def interpolate_3(*args): return _pd.fvector_interpolate_3(*args)
    def interpolate_4(*args): return _pd.fvector_interpolate_4(*args)
    __swig_destroy__ = _pd.delete_fvector
    __del__ = lambda self : None;
fvector_swigregister = _pd.fvector_swigregister
fvector_swigregister(fvector)

class Statistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Statistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Statistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Statistics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Statistics
    __del__ = lambda self : None;
    def clear(*args): return _pd.Statistics_clear(*args)
    def addPoint(*args): return _pd.Statistics_addPoint(*args)
    def getAv(*args): return _pd.Statistics_getAv(*args)
    def getVar(*args): return _pd.Statistics_getVar(*args)
    def getStdDev(*args): return _pd.Statistics_getStdDev(*args)
    def getHighest(*args): return _pd.Statistics_getHighest(*args)
    def getLowest(*args): return _pd.Statistics_getLowest(*args)
    def n(*args): return _pd.Statistics_n(*args)
    def getSum(*args): return _pd.Statistics_getSum(*args)
    def getSumSquared(*args): return _pd.Statistics_getSumSquared(*args)
Statistics_swigregister = _pd.Statistics_swigregister
Statistics_swigregister(Statistics)

class Histogram1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Histogram1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Histogram1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Histogram1D
    __del__ = lambda self : None;
    def init(*args): return _pd.Histogram1D_init(*args)
    def clear(*args): return _pd.Histogram1D_clear(*args)
    def print_row(*args): return _pd.Histogram1D_print_row(*args)
    def print_prob(*args): return _pd.Histogram1D_print_prob(*args)
    def print_prob_cumul(*args): return _pd.Histogram1D_print_prob_cumul(*args)
    def print_count(*args): return _pd.Histogram1D_print_count(*args)
    def print_count_double(*args): return _pd.Histogram1D_print_count_double(*args)
    def print_rdf(*args): return _pd.Histogram1D_print_rdf(*args)
    def print_gibbs(*args): return _pd.Histogram1D_print_gibbs(*args)
    def print_gibbs_all(*args): return _pd.Histogram1D_print_gibbs_all(*args)
    def add_point(*args): return _pd.Histogram1D_add_point(*args)
    def addWidePoint(*args): return _pd.Histogram1D_addWidePoint(*args)
    def addPoint(*args): return _pd.Histogram1D_addPoint(*args)
    def getAv(*args): return _pd.Histogram1D_getAv(*args)
    def getVar(*args): return _pd.Histogram1D_getVar(*args)
    def getStdDev(*args): return _pd.Histogram1D_getStdDev(*args)
    def getHighest(*args): return _pd.Histogram1D_getHighest(*args)
    def getLowest(*args): return _pd.Histogram1D_getLowest(*args)
    def getProb(*args): return _pd.Histogram1D_getProb(*args)
    __swig_setmethods__["name"] = _pd.Histogram1D_name_set
    __swig_getmethods__["name"] = _pd.Histogram1D_name_get
    if _newclass:name = _swig_property(_pd.Histogram1D_name_get, _pd.Histogram1D_name_set)
    def data(*args): return _pd.Histogram1D_data(*args)
    def data_size(*args): return _pd.Histogram1D_data_size(*args)
    def n(*args): return _pd.Histogram1D_n(*args)
    def x1(*args): return _pd.Histogram1D_x1(*args)
    def x2(*args): return _pd.Histogram1D_x2(*args)
    def xgridsize(*args): return _pd.Histogram1D_xgridsize(*args)
    def xlowest(*args): return _pd.Histogram1D_xlowest(*args)
    def xhighest(*args): return _pd.Histogram1D_xhighest(*args)
    def xsum(*args): return _pd.Histogram1D_xsum(*args)
    def xsumsquared(*args): return _pd.Histogram1D_xsumsquared(*args)
Histogram1D_swigregister = _pd.Histogram1D_swigregister
Histogram1D_swigregister(Histogram1D)

class Histogram1D_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Histogram1D_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram1D_double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Histogram1D_double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Histogram1D_double
    __del__ = lambda self : None;
    def init(*args): return _pd.Histogram1D_double_init(*args)
    def clear(*args): return _pd.Histogram1D_double_clear(*args)
    def print_row(*args): return _pd.Histogram1D_double_print_row(*args)
    def print_prob(*args): return _pd.Histogram1D_double_print_prob(*args)
    def print_prob_cumul(*args): return _pd.Histogram1D_double_print_prob_cumul(*args)
    def print_count(*args): return _pd.Histogram1D_double_print_count(*args)
    def print_count_double(*args): return _pd.Histogram1D_double_print_count_double(*args)
    def print_rdf(*args): return _pd.Histogram1D_double_print_rdf(*args)
    def print_gibbs(*args): return _pd.Histogram1D_double_print_gibbs(*args)
    def print_gibbs_all(*args): return _pd.Histogram1D_double_print_gibbs_all(*args)
    def add_point(*args): return _pd.Histogram1D_double_add_point(*args)
    def addWidePoint(*args): return _pd.Histogram1D_double_addWidePoint(*args)
    def addPoint(*args): return _pd.Histogram1D_double_addPoint(*args)
    def getAv(*args): return _pd.Histogram1D_double_getAv(*args)
    def getVar(*args): return _pd.Histogram1D_double_getVar(*args)
    def getStdDev(*args): return _pd.Histogram1D_double_getStdDev(*args)
    def getHighest(*args): return _pd.Histogram1D_double_getHighest(*args)
    def getLowest(*args): return _pd.Histogram1D_double_getLowest(*args)
    def getProb(*args): return _pd.Histogram1D_double_getProb(*args)
    __swig_setmethods__["name"] = _pd.Histogram1D_double_name_set
    __swig_getmethods__["name"] = _pd.Histogram1D_double_name_get
    if _newclass:name = _swig_property(_pd.Histogram1D_double_name_get, _pd.Histogram1D_double_name_set)
    def data(*args): return _pd.Histogram1D_double_data(*args)
    def data_size(*args): return _pd.Histogram1D_double_data_size(*args)
    def n(*args): return _pd.Histogram1D_double_n(*args)
    def x1(*args): return _pd.Histogram1D_double_x1(*args)
    def x2(*args): return _pd.Histogram1D_double_x2(*args)
    def xgridsize(*args): return _pd.Histogram1D_double_xgridsize(*args)
    def xlowest(*args): return _pd.Histogram1D_double_xlowest(*args)
    def xhighest(*args): return _pd.Histogram1D_double_xhighest(*args)
    def xsum(*args): return _pd.Histogram1D_double_xsum(*args)
    def xsumsquared(*args): return _pd.Histogram1D_double_xsumsquared(*args)
Histogram1D_double_swigregister = _pd.Histogram1D_double_swigregister
Histogram1D_double_swigregister(Histogram1D_double)

class Histogram2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Histogram2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_data"] = _pd.Histogram2D_m_data_set
    __swig_getmethods__["m_data"] = _pd.Histogram2D_m_data_get
    if _newclass:m_data = _swig_property(_pd.Histogram2D_m_data_get, _pd.Histogram2D_m_data_set)
    __swig_setmethods__["m_n"] = _pd.Histogram2D_m_n_set
    __swig_getmethods__["m_n"] = _pd.Histogram2D_m_n_get
    if _newclass:m_n = _swig_property(_pd.Histogram2D_m_n_get, _pd.Histogram2D_m_n_set)
    __swig_setmethods__["m_n_outside"] = _pd.Histogram2D_m_n_outside_set
    __swig_getmethods__["m_n_outside"] = _pd.Histogram2D_m_n_outside_get
    if _newclass:m_n_outside = _swig_property(_pd.Histogram2D_m_n_outside_get, _pd.Histogram2D_m_n_outside_set)
    __swig_setmethods__["m_x1"] = _pd.Histogram2D_m_x1_set
    __swig_getmethods__["m_x1"] = _pd.Histogram2D_m_x1_get
    if _newclass:m_x1 = _swig_property(_pd.Histogram2D_m_x1_get, _pd.Histogram2D_m_x1_set)
    __swig_setmethods__["m_x2"] = _pd.Histogram2D_m_x2_set
    __swig_getmethods__["m_x2"] = _pd.Histogram2D_m_x2_get
    if _newclass:m_x2 = _swig_property(_pd.Histogram2D_m_x2_get, _pd.Histogram2D_m_x2_set)
    __swig_setmethods__["m_xgridsize"] = _pd.Histogram2D_m_xgridsize_set
    __swig_getmethods__["m_xgridsize"] = _pd.Histogram2D_m_xgridsize_get
    if _newclass:m_xgridsize = _swig_property(_pd.Histogram2D_m_xgridsize_get, _pd.Histogram2D_m_xgridsize_set)
    __swig_setmethods__["m_xlowest"] = _pd.Histogram2D_m_xlowest_set
    __swig_getmethods__["m_xlowest"] = _pd.Histogram2D_m_xlowest_get
    if _newclass:m_xlowest = _swig_property(_pd.Histogram2D_m_xlowest_get, _pd.Histogram2D_m_xlowest_set)
    __swig_setmethods__["m_xhighest"] = _pd.Histogram2D_m_xhighest_set
    __swig_getmethods__["m_xhighest"] = _pd.Histogram2D_m_xhighest_get
    if _newclass:m_xhighest = _swig_property(_pd.Histogram2D_m_xhighest_get, _pd.Histogram2D_m_xhighest_set)
    __swig_setmethods__["m_xsum"] = _pd.Histogram2D_m_xsum_set
    __swig_getmethods__["m_xsum"] = _pd.Histogram2D_m_xsum_get
    if _newclass:m_xsum = _swig_property(_pd.Histogram2D_m_xsum_get, _pd.Histogram2D_m_xsum_set)
    __swig_setmethods__["m_xsumsquared"] = _pd.Histogram2D_m_xsumsquared_set
    __swig_getmethods__["m_xsumsquared"] = _pd.Histogram2D_m_xsumsquared_get
    if _newclass:m_xsumsquared = _swig_property(_pd.Histogram2D_m_xsumsquared_get, _pd.Histogram2D_m_xsumsquared_set)
    __swig_setmethods__["y1"] = _pd.Histogram2D_y1_set
    __swig_getmethods__["y1"] = _pd.Histogram2D_y1_get
    if _newclass:y1 = _swig_property(_pd.Histogram2D_y1_get, _pd.Histogram2D_y1_set)
    __swig_setmethods__["y2"] = _pd.Histogram2D_y2_set
    __swig_getmethods__["y2"] = _pd.Histogram2D_y2_get
    if _newclass:y2 = _swig_property(_pd.Histogram2D_y2_get, _pd.Histogram2D_y2_set)
    __swig_setmethods__["ygridsize"] = _pd.Histogram2D_ygridsize_set
    __swig_getmethods__["ygridsize"] = _pd.Histogram2D_ygridsize_get
    if _newclass:ygridsize = _swig_property(_pd.Histogram2D_ygridsize_get, _pd.Histogram2D_ygridsize_set)
    __swig_setmethods__["ylowest"] = _pd.Histogram2D_ylowest_set
    __swig_getmethods__["ylowest"] = _pd.Histogram2D_ylowest_get
    if _newclass:ylowest = _swig_property(_pd.Histogram2D_ylowest_get, _pd.Histogram2D_ylowest_set)
    __swig_setmethods__["yhighest"] = _pd.Histogram2D_yhighest_set
    __swig_getmethods__["yhighest"] = _pd.Histogram2D_yhighest_get
    if _newclass:yhighest = _swig_property(_pd.Histogram2D_yhighest_get, _pd.Histogram2D_yhighest_set)
    __swig_setmethods__["ysum"] = _pd.Histogram2D_ysum_set
    __swig_getmethods__["ysum"] = _pd.Histogram2D_ysum_get
    if _newclass:ysum = _swig_property(_pd.Histogram2D_ysum_get, _pd.Histogram2D_ysum_set)
    __swig_setmethods__["ysumsquared"] = _pd.Histogram2D_ysumsquared_set
    __swig_getmethods__["ysumsquared"] = _pd.Histogram2D_ysumsquared_get
    if _newclass:ysumsquared = _swig_property(_pd.Histogram2D_ysumsquared_get, _pd.Histogram2D_ysumsquared_set)
    __swig_setmethods__["m_staticsize"] = _pd.Histogram2D_m_staticsize_set
    __swig_getmethods__["m_staticsize"] = _pd.Histogram2D_m_staticsize_get
    if _newclass:m_staticsize = _swig_property(_pd.Histogram2D_m_staticsize_get, _pd.Histogram2D_m_staticsize_set)
    def __init__(self, *args): 
        this = _pd.new_Histogram2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Histogram2D
    __del__ = lambda self : None;
    def init(*args): return _pd.Histogram2D_init(*args)
    def clear(*args): return _pd.Histogram2D_clear(*args)
    def print_map_prob(*args): return _pd.Histogram2D_print_map_prob(*args)
    def print_map_gibbs(*args): return _pd.Histogram2D_print_map_gibbs(*args)
    def print_vertical(*args): return _pd.Histogram2D_print_vertical(*args)
    def add_point(*args): return _pd.Histogram2D_add_point(*args)
    def getAverageSubdata(*args): return _pd.Histogram2D_getAverageSubdata(*args)
    def variance(*args): return _pd.Histogram2D_variance(*args)
    def standarddev(*args): return _pd.Histogram2D_standarddev(*args)
    def highest(*args): return _pd.Histogram2D_highest(*args)
    def lowest(*args): return _pd.Histogram2D_lowest(*args)
Histogram2D_swigregister = _pd.Histogram2D_swigregister
Histogram2D_swigregister(Histogram2D)

class StatClock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, StatClock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatClock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_StatClock(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reset(*args): return _pd.StatClock_Reset(*args)
    def Begin(*args): return _pd.StatClock_Begin(*args)
    def Stamp(*args): return _pd.StatClock_Stamp(*args)
    def End(*args): return _pd.StatClock_End(*args)
    def getAverage(*args): return _pd.StatClock_getAverage(*args)
    def getStdDev(*args): return _pd.StatClock_getStdDev(*args)
    def getStdErr(*args): return _pd.StatClock_getStdErr(*args)
    def getMax(*args): return _pd.StatClock_getMax(*args)
    def getMin(*args): return _pd.StatClock_getMin(*args)
    def HasData(*args): return _pd.StatClock_HasData(*args)
    def getName(*args): return _pd.StatClock_getName(*args)
    def ReportSeconds(*args): return _pd.StatClock_ReportSeconds(*args)
    def ReportMilliSeconds(*args): return _pd.StatClock_ReportMilliSeconds(*args)
    def setName(*args): return _pd.StatClock_setName(*args)
    __swig_destroy__ = _pd.delete_StatClock
    __del__ = lambda self : None;
StatClock_swigregister = _pd.StatClock_swigregister
StatClock_swigregister(StatClock)

class TextProgressBar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TextProgressBar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextProgressBar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_TextProgressBar(*args)
        try: self.this.append(this)
        except: self.this = this
    def Begin(*args): return _pd.TextProgressBar_Begin(*args)
    def End(*args): return _pd.TextProgressBar_End(*args)
    def next(*args): return _pd.TextProgressBar_next(*args)
    def Reset(*args): return _pd.TextProgressBar_Reset(*args)
    __swig_destroy__ = _pd.delete_TextProgressBar
    __del__ = lambda self : None;
TextProgressBar_swigregister = _pd.TextProgressBar_swigregister
TextProgressBar_swigregister(TextProgressBar)

class StreamWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, StreamWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StreamWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_StreamWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def streamToScreen(*args): return _pd.StreamWriter_streamToScreen(*args)
    def streamTo(*args): return _pd.StreamWriter_streamTo(*args)
    def assertStream(*args): return _pd.StreamWriter_assertStream(*args)
    def isStreaming(*args): return _pd.StreamWriter_isStreaming(*args)
    __swig_destroy__ = _pd.delete_StreamWriter
    __del__ = lambda self : None;
StreamWriter_swigregister = _pd.StreamWriter_swigregister
StreamWriter_swigregister(StreamWriter)

class StringBuilder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, StringBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringBuilder, name)
    __repr__ = _swig_repr
    SB_DEFAULT_CAPACITY = _pd.StringBuilder_SB_DEFAULT_CAPACITY
    def __init__(self, *args): 
        this = _pd.new_StringBuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_StringBuilder
    __del__ = lambda self : None;
    def clear(*args): return _pd.StringBuilder_clear(*args)
    def growCapacity(*args): return _pd.StringBuilder_growCapacity(*args)
    def replace(*args): return _pd.StringBuilder_replace(*args)
    def setTo(*args): return _pd.StringBuilder_setTo(*args)
    def setFormat(*args): return _pd.StringBuilder_setFormat(*args)
    def appendFormat(*args): return _pd.StringBuilder_appendFormat(*args)
    def append(*args): return _pd.StringBuilder_append(*args)
    def endl(*args): return _pd.StringBuilder_endl(*args)
    def appendingReplace(*args): return _pd.StringBuilder_appendingReplace(*args)
    def insert(*args): return _pd.StringBuilder_insert(*args)
    def erase(*args): return _pd.StringBuilder_erase(*args)
    def FirstOf(*args): return _pd.StringBuilder_FirstOf(*args)
    def FirstNotOf(*args): return _pd.StringBuilder_FirstNotOf(*args)
    def LastOf(*args): return _pd.StringBuilder_LastOf(*args)
    def LastNotOf(*args): return _pd.StringBuilder_LastNotOf(*args)
    def XthOf(*args): return _pd.StringBuilder_XthOf(*args)
    def XthNotOf(*args): return _pd.StringBuilder_XthNotOf(*args)
    def Trim(*args): return _pd.StringBuilder_Trim(*args)
    def TrimLeft(*args): return _pd.StringBuilder_TrimLeft(*args)
    def TrimRight(*args): return _pd.StringBuilder_TrimRight(*args)
    def PadRight(*args): return _pd.StringBuilder_PadRight(*args)
    def PadLeft(*args): return _pd.StringBuilder_PadLeft(*args)
    def TruncateRightTo(*args): return _pd.StringBuilder_TruncateRightTo(*args)
    def TruncateLeftTo(*args): return _pd.StringBuilder_TruncateLeftTo(*args)
    def TruncateRightBy(*args): return _pd.StringBuilder_TruncateRightBy(*args)
    def TruncateLeftBy(*args): return _pd.StringBuilder_TruncateLeftBy(*args)
    def removeAll(*args): return _pd.StringBuilder_removeAll(*args)
    def compare(*args): return _pd.StringBuilder_compare(*args)
    def compareValue(*args): return _pd.StringBuilder_compareValue(*args)
    def toScreen(*args): return _pd.StringBuilder_toScreen(*args)
    def toString(*args): return _pd.StringBuilder_toString(*args)
    def tokenise(*args): return _pd.StringBuilder_tokenise(*args)
    def parseInt(*args): return _pd.StringBuilder_parseInt(*args)
    def parseDouble(*args): return _pd.StringBuilder_parseDouble(*args)
    def capacity(*args): return _pd.StringBuilder_capacity(*args)
    def size(*args): return _pd.StringBuilder_size(*args)
StringBuilder_swigregister = _pd.StringBuilder_swigregister
StringBuilder_swigregister(StringBuilder)

class IndexPairDistance(IndexPair):
    __swig_setmethods__ = {}
    for _s in [IndexPair]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IndexPairDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexPair]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexPairDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_IndexPairDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["l"] = _pd.IndexPairDistance_l_set
    __swig_getmethods__["l"] = _pd.IndexPairDistance_l_get
    if _newclass:l = _swig_property(_pd.IndexPairDistance_l_get, _pd.IndexPairDistance_l_set)
    __swig_destroy__ = _pd.delete_IndexPairDistance
    __del__ = lambda self : None;
IndexPairDistance_swigregister = _pd.IndexPairDistance_swigregister
IndexPairDistance_swigregister(IndexPairDistance)

class CovalentAtom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CovalentAtom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CovalentAtom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_CovalentAtom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["i"] = _pd.CovalentAtom_i_set
    __swig_getmethods__["i"] = _pd.CovalentAtom_i_get
    if _newclass:i = _swig_property(_pd.CovalentAtom_i_get, _pd.CovalentAtom_i_set)
    __swig_setmethods__["i2"] = _pd.CovalentAtom_i2_set
    __swig_getmethods__["i2"] = _pd.CovalentAtom_i2_get
    if _newclass:i2 = _swig_property(_pd.CovalentAtom_i2_get, _pd.CovalentAtom_i2_set)
    __swig_setmethods__["i3"] = _pd.CovalentAtom_i3_set
    __swig_getmethods__["i3"] = _pd.CovalentAtom_i3_get
    if _newclass:i3 = _swig_property(_pd.CovalentAtom_i3_get, _pd.CovalentAtom_i3_set)
    __swig_setmethods__["d"] = _pd.CovalentAtom_d_set
    __swig_getmethods__["d"] = _pd.CovalentAtom_d_get
    if _newclass:d = _swig_property(_pd.CovalentAtom_d_get, _pd.CovalentAtom_d_set)
    __swig_destroy__ = _pd.delete_CovalentAtom
    __del__ = lambda self : None;
CovalentAtom_swigregister = _pd.CovalentAtom_swigregister
CovalentAtom_swigregister(CovalentAtom)

class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Particle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["parent"] = _pd.Particle_parent_set
    __swig_getmethods__["parent"] = _pd.Particle_parent_get
    if _newclass:parent = _swig_property(_pd.Particle_parent_get, _pd.Particle_parent_set)
    __swig_setmethods__["i"] = _pd.Particle_i_set
    __swig_getmethods__["i"] = _pd.Particle_i_get
    if _newclass:i = _swig_property(_pd.Particle_i_get, _pd.Particle_i_set)
    __swig_setmethods__["ir"] = _pd.Particle_ir_set
    __swig_getmethods__["ir"] = _pd.Particle_ir_get
    if _newclass:ir = _swig_property(_pd.Particle_ir_get, _pd.Particle_ir_set)
    __swig_setmethods__["imol"] = _pd.Particle_imol_set
    __swig_getmethods__["imol"] = _pd.Particle_imol_get
    if _newclass:imol = _swig_property(_pd.Particle_imol_get, _pd.Particle_imol_set)
    __swig_setmethods__["igroup"] = _pd.Particle_igroup_set
    __swig_getmethods__["igroup"] = _pd.Particle_igroup_get
    if _newclass:igroup = _swig_property(_pd.Particle_igroup_get, _pd.Particle_igroup_set)
    def pos(*args): return _pd.Particle_pos(*args)
    def posRef(*args): return _pd.Particle_posRef(*args)
    def posGeom(*args): return _pd.Particle_posGeom(*args)
    __swig_setmethods__["cov12atom"] = _pd.Particle_cov12atom_set
    __swig_getmethods__["cov12atom"] = _pd.Particle_cov12atom_get
    if _newclass:cov12atom = _swig_property(_pd.Particle_cov12atom_get, _pd.Particle_cov12atom_set)
    __swig_setmethods__["cov13atom"] = _pd.Particle_cov13atom_set
    __swig_getmethods__["cov13atom"] = _pd.Particle_cov13atom_get
    if _newclass:cov13atom = _swig_property(_pd.Particle_cov13atom_get, _pd.Particle_cov13atom_set)
    __swig_setmethods__["cov14atom"] = _pd.Particle_cov14atom_set
    __swig_getmethods__["cov14atom"] = _pd.Particle_cov14atom_get
    if _newclass:cov14atom = _swig_property(_pd.Particle_cov14atom_get, _pd.Particle_cov14atom_set)
    __swig_setmethods__["rawname"] = _pd.Particle_rawname_set
    __swig_getmethods__["rawname"] = _pd.Particle_rawname_get
    if _newclass:rawname = _swig_property(_pd.Particle_rawname_get, _pd.Particle_rawname_set)
    __swig_setmethods__["pdbname"] = _pd.Particle_pdbname_set
    __swig_getmethods__["pdbname"] = _pd.Particle_pdbname_get
    if _newclass:pdbname = _swig_property(_pd.Particle_pdbname_get, _pd.Particle_pdbname_set)
    __swig_setmethods__["type_name"] = _pd.Particle_type_name_set
    __swig_getmethods__["type_name"] = _pd.Particle_type_name_get
    if _newclass:type_name = _swig_property(_pd.Particle_type_name_get, _pd.Particle_type_name_set)
    __swig_setmethods__["parentname"] = _pd.Particle_parentname_set
    __swig_getmethods__["parentname"] = _pd.Particle_parentname_get
    if _newclass:parentname = _swig_property(_pd.Particle_parentname_get, _pd.Particle_parentname_set)
    __swig_setmethods__["parentl3name"] = _pd.Particle_parentl3name_set
    __swig_getmethods__["parentl3name"] = _pd.Particle_parentl3name_get
    if _newclass:parentl3name = _swig_property(_pd.Particle_parentl3name_get, _pd.Particle_parentl3name_set)
    __swig_setmethods__["parentletter"] = _pd.Particle_parentletter_set
    __swig_getmethods__["parentletter"] = _pd.Particle_parentletter_get
    if _newclass:parentletter = _swig_property(_pd.Particle_parentletter_get, _pd.Particle_parentletter_set)
    __swig_setmethods__["Z"] = _pd.Particle_Z_set
    __swig_getmethods__["Z"] = _pd.Particle_Z_get
    if _newclass:Z = _swig_property(_pd.Particle_Z_get, _pd.Particle_Z_set)
    __swig_setmethods__["mass"] = _pd.Particle_mass_set
    __swig_getmethods__["mass"] = _pd.Particle_mass_get
    if _newclass:mass = _swig_property(_pd.Particle_mass_get, _pd.Particle_mass_set)
    __swig_setmethods__["radius"] = _pd.Particle_radius_set
    __swig_getmethods__["radius"] = _pd.Particle_radius_get
    if _newclass:radius = _swig_property(_pd.Particle_radius_get, _pd.Particle_radius_set)
    __swig_setmethods__["epsilon"] = _pd.Particle_epsilon_set
    __swig_getmethods__["epsilon"] = _pd.Particle_epsilon_get
    if _newclass:epsilon = _swig_property(_pd.Particle_epsilon_get, _pd.Particle_epsilon_set)
    __swig_setmethods__["charge"] = _pd.Particle_charge_set
    __swig_getmethods__["charge"] = _pd.Particle_charge_get
    if _newclass:charge = _swig_property(_pd.Particle_charge_get, _pd.Particle_charge_set)
    __swig_setmethods__["epot"] = _pd.Particle_epot_set
    __swig_getmethods__["epot"] = _pd.Particle_epot_get
    if _newclass:epot = _swig_property(_pd.Particle_epot_get, _pd.Particle_epot_set)
    __swig_setmethods__["FFType"] = _pd.Particle_FFType_set
    __swig_getmethods__["FFType"] = _pd.Particle_FFType_get
    if _newclass:FFType = _swig_property(_pd.Particle_FFType_get, _pd.Particle_FFType_set)
    def addProperty(*args): return _pd.Particle_addProperty(*args)
    def getCustomProperty_String(*args): return _pd.Particle_getCustomProperty_String(*args)
    def getCustomProperty_Int(*args): return _pd.Particle_getCustomProperty_Int(*args)
    def getCustomProperty_Double(*args): return _pd.Particle_getCustomProperty_Double(*args)
    def detail(*args): return _pd.Particle_detail(*args)
    def info(*args): return _pd.Particle_info(*args)
    def memuse(*args): return _pd.Particle_memuse(*args)
    def isValid(*args): return _pd.Particle_isValid(*args)
    def isUsed(*args): return _pd.Particle_isUsed(*args)
    def isDummy(*args): return _pd.Particle_isDummy(*args)
    def isStatic(*args): return _pd.Particle_isStatic(*args)
    def isRebuildRequired(*args): return _pd.Particle_isRebuildRequired(*args)
    def isKnownStructure(*args): return _pd.Particle_isKnownStructure(*args)
    def isHydrogen(*args): return _pd.Particle_isHydrogen(*args)
    def isBackbone(*args): return _pd.Particle_isBackbone(*args)
    def isCoreBackbone(*args): return _pd.Particle_isCoreBackbone(*args)
    def isCAlpha(*args): return _pd.Particle_isCAlpha(*args)
    def isSideChain(*args): return _pd.Particle_isSideChain(*args)
    def isMoved(*args): return _pd.Particle_isMoved(*args)
    def setValid(*args): return _pd.Particle_setValid(*args)
    def setUsed(*args): return _pd.Particle_setUsed(*args)
    def setDummy(*args): return _pd.Particle_setDummy(*args)
    def setKnownStructure(*args): return _pd.Particle_setKnownStructure(*args)
    def setHydrogen(*args): return _pd.Particle_setHydrogen(*args)
    def setBackbone(*args): return _pd.Particle_setBackbone(*args)
    def setCoreBackbone(*args): return _pd.Particle_setCoreBackbone(*args)
    def setCAlpha(*args): return _pd.Particle_setCAlpha(*args)
    def setStatic(*args): return _pd.Particle_setStatic(*args)
    def setMoved(*args): return _pd.Particle_setMoved(*args)
    def setRebuildRequired(*args): return _pd.Particle_setRebuildRequired(*args)
    __swig_destroy__ = _pd.delete_Particle
    __del__ = lambda self : None;
Particle_swigregister = _pd.Particle_swigregister
Particle_swigregister(Particle)

class ParticleGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ParticleGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ParticleGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ParticleGroup
    __del__ = lambda self : None;
ParticleGroup_swigregister = _pd.ParticleGroup_swigregister
ParticleGroup_swigregister(ParticleGroup)

class Residue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Residue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Residue, name)
    __repr__ = _swig_repr
    def memuse(*args): return _pd.Residue_memuse(*args)
    def info(*args): return _pd.Residue_info(*args)
    __swig_setmethods__["letter"] = _pd.Residue_letter_set
    __swig_getmethods__["letter"] = _pd.Residue_letter_get
    if _newclass:letter = _swig_property(_pd.Residue_letter_get, _pd.Residue_letter_set)
    __swig_setmethods__["ir"] = _pd.Residue_ir_set
    __swig_getmethods__["ir"] = _pd.Residue_ir_get
    if _newclass:ir = _swig_property(_pd.Residue_ir_get, _pd.Residue_ir_set)
    __swig_setmethods__["ifirst"] = _pd.Residue_ifirst_set
    __swig_getmethods__["ifirst"] = _pd.Residue_ifirst_get
    if _newclass:ifirst = _swig_property(_pd.Residue_ifirst_get, _pd.Residue_ifirst_set)
    __swig_setmethods__["ilast"] = _pd.Residue_ilast_set
    __swig_getmethods__["ilast"] = _pd.Residue_ilast_get
    if _newclass:ilast = _swig_property(_pd.Residue_ilast_get, _pd.Residue_ilast_set)
    __swig_setmethods__["iCA"] = _pd.Residue_iCA_set
    __swig_getmethods__["iCA"] = _pd.Residue_iCA_get
    if _newclass:iCA = _swig_property(_pd.Residue_iCA_get, _pd.Residue_iCA_set)
    __swig_setmethods__["iHA"] = _pd.Residue_iHA_set
    __swig_getmethods__["iHA"] = _pd.Residue_iHA_get
    if _newclass:iHA = _swig_property(_pd.Residue_iHA_get, _pd.Residue_iHA_set)
    __swig_setmethods__["iN"] = _pd.Residue_iN_set
    __swig_getmethods__["iN"] = _pd.Residue_iN_get
    if _newclass:iN = _swig_property(_pd.Residue_iN_get, _pd.Residue_iN_set)
    __swig_setmethods__["iC"] = _pd.Residue_iC_set
    __swig_getmethods__["iC"] = _pd.Residue_iC_get
    if _newclass:iC = _swig_property(_pd.Residue_iC_get, _pd.Residue_iC_set)
    __swig_setmethods__["iO"] = _pd.Residue_iO_set
    __swig_getmethods__["iO"] = _pd.Residue_iO_get
    if _newclass:iO = _swig_property(_pd.Residue_iO_get, _pd.Residue_iO_set)
    __swig_setmethods__["iH"] = _pd.Residue_iH_set
    __swig_getmethods__["iH"] = _pd.Residue_iH_get
    if _newclass:iH = _swig_property(_pd.Residue_iH_get, _pd.Residue_iH_set)
    __swig_setmethods__["iCB"] = _pd.Residue_iCB_set
    __swig_getmethods__["iCB"] = _pd.Residue_iCB_get
    if _newclass:iCB = _swig_property(_pd.Residue_iCB_get, _pd.Residue_iCB_set)
    __swig_setmethods__["param"] = _pd.Residue_param_set
    __swig_getmethods__["param"] = _pd.Residue_param_get
    if _newclass:param = _swig_property(_pd.Residue_param_get, _pd.Residue_param_set)
    def size(*args): return _pd.Residue_size(*args)
    def __init__(self, *args): 
        this = _pd.new_Residue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Residue
    __del__ = lambda self : None;
Residue_swigregister = _pd.Residue_swigregister
Residue_swigregister(Residue)

class MoleculeRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MoleculeRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoleculeRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MoleculeRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def natoms(*args): return _pd.MoleculeRange_natoms(*args)
    def nResidues(*args): return _pd.MoleculeRange_nResidues(*args)
    def memuse(*args): return _pd.MoleculeRange_memuse(*args)
    __swig_setmethods__["name"] = _pd.MoleculeRange_name_set
    __swig_getmethods__["name"] = _pd.MoleculeRange_name_get
    if _newclass:name = _swig_property(_pd.MoleculeRange_name_get, _pd.MoleculeRange_name_set)
    __swig_setmethods__["ifirst"] = _pd.MoleculeRange_ifirst_set
    __swig_getmethods__["ifirst"] = _pd.MoleculeRange_ifirst_get
    if _newclass:ifirst = _swig_property(_pd.MoleculeRange_ifirst_get, _pd.MoleculeRange_ifirst_set)
    __swig_setmethods__["ilast"] = _pd.MoleculeRange_ilast_set
    __swig_getmethods__["ilast"] = _pd.MoleculeRange_ilast_get
    if _newclass:ilast = _swig_property(_pd.MoleculeRange_ilast_get, _pd.MoleculeRange_ilast_set)
    __swig_setmethods__["irfirst"] = _pd.MoleculeRange_irfirst_set
    __swig_getmethods__["irfirst"] = _pd.MoleculeRange_irfirst_get
    if _newclass:irfirst = _swig_property(_pd.MoleculeRange_irfirst_get, _pd.MoleculeRange_irfirst_set)
    __swig_setmethods__["irlast"] = _pd.MoleculeRange_irlast_set
    __swig_getmethods__["irlast"] = _pd.MoleculeRange_irlast_get
    if _newclass:irlast = _swig_property(_pd.MoleculeRange_irlast_get, _pd.MoleculeRange_irlast_set)
    __swig_setmethods__["chainID"] = _pd.MoleculeRange_chainID_set
    __swig_getmethods__["chainID"] = _pd.MoleculeRange_chainID_get
    if _newclass:chainID = _swig_property(_pd.MoleculeRange_chainID_get, _pd.MoleculeRange_chainID_set)
    __swig_destroy__ = _pd.delete_MoleculeRange
    __del__ = lambda self : None;
MoleculeRange_swigregister = _pd.MoleculeRange_swigregister
MoleculeRange_swigregister(MoleculeRange)

class MoleculeBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MoleculeBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoleculeBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_MoleculeBase
    __del__ = lambda self : None;
    def memuse(*args): return _pd.MoleculeBase_memuse(*args)
    def info(*args): return _pd.MoleculeBase_info(*args)
    def detail(*args): return _pd.MoleculeBase_detail(*args)
    def printBondConnectivity(*args): return _pd.MoleculeBase_printBondConnectivity(*args)
    def printPDB(*args): return _pd.MoleculeBase_printPDB(*args)
    def ffps(*args): return _pd.MoleculeBase_ffps(*args)
    def getChainID(*args): return _pd.MoleculeBase_getChainID(*args)
    def getSequence(*args): return _pd.MoleculeBase_getSequence(*args)
    def getResName(*args): return _pd.MoleculeBase_getResName(*args)
    def getFullResName(*args): return _pd.MoleculeBase_getFullResName(*args)
    def nAtoms(*args): return _pd.MoleculeBase_nAtoms(*args)
    def nResidues(*args): return _pd.MoleculeBase_nResidues(*args)
    def nMolecules(*args): return _pd.MoleculeBase_nMolecules(*args)
    def atomxyz(*args): return _pd.MoleculeBase_atomxyz(*args)
    def getAtom(*args): return _pd.MoleculeBase_getAtom(*args)
    def getRes(*args): return _pd.MoleculeBase_getRes(*args)
    def getMol(*args): return _pd.MoleculeBase_getMol(*args)
    def getTotalMass(*args): return _pd.MoleculeBase_getTotalMass(*args)
    def getTotalCharge(*args): return _pd.MoleculeBase_getTotalCharge(*args)
    def resetAllAtomMovedFlags(*args): return _pd.MoleculeBase_resetAllAtomMovedFlags(*args)
    def calcInertiaTensor(*args): return _pd.MoleculeBase_calcInertiaTensor(*args)
    def printInertiaInfo(*args): return _pd.MoleculeBase_printInertiaInfo(*args)
    def calcRotationalPartition(*args): return _pd.MoleculeBase_calcRotationalPartition(*args)
    def findParticleBy_ffname(*args): return _pd.MoleculeBase_findParticleBy_ffname(*args)
    def findParticle(*args): return _pd.MoleculeBase_findParticle(*args)
    def calcAtomDistance(*args): return _pd.MoleculeBase_calcAtomDistance(*args)
    def calcAtomSqrDistance(*args): return _pd.MoleculeBase_calcAtomSqrDistance(*args)
    def calcAtomAngle(*args): return _pd.MoleculeBase_calcAtomAngle(*args)
    def isMolStartResIndex(*args): return _pd.MoleculeBase_isMolStartResIndex(*args)
    def isMolEndResIndex(*args): return _pd.MoleculeBase_isMolEndResIndex(*args)
    def getEncompassingVector(*args): return _pd.MoleculeBase_getEncompassingVector(*args)
    def getMaximumVector(*args): return _pd.MoleculeBase_getMaximumVector(*args)
    def getMinimumVector(*args): return _pd.MoleculeBase_getMinimumVector(*args)
    def getCentreOfMass(*args): return _pd.MoleculeBase_getCentreOfMass(*args)
    def getCentreOfAvailableGeometry(*args): return _pd.MoleculeBase_getCentreOfAvailableGeometry(*args)
    def getCentreOfGeometry(*args): return _pd.MoleculeBase_getCentreOfGeometry(*args)
    def setToGeometry(*args): return _pd.MoleculeBase_setToGeometry(*args)
    def setToReference(*args): return _pd.MoleculeBase_setToReference(*args)
    def setAsReference(*args): return _pd.MoleculeBase_setAsReference(*args)
    def calcCRMS_AllAtom(*args): return _pd.MoleculeBase_calcCRMS_AllAtom(*args)
    def calcCRMS_HeavyAtom(*args): return _pd.MoleculeBase_calcCRMS_HeavyAtom(*args)
    def calcCRMS_CA(*args): return _pd.MoleculeBase_calcCRMS_CA(*args)
    def move(*args): return _pd.MoleculeBase_move(*args)
    def moveParticles(*args): return _pd.MoleculeBase_moveParticles(*args)
    def moveMolecule(*args): return _pd.MoleculeBase_moveMolecule(*args)
    def zeroCentreOfAvailableGeometry(*args): return _pd.MoleculeBase_zeroCentreOfAvailableGeometry(*args)
    def zeroCentreOfGeometry(*args): return _pd.MoleculeBase_zeroCentreOfGeometry(*args)
    def zeroCentreOfMass(*args): return _pd.MoleculeBase_zeroCentreOfMass(*args)
    def alignAlongPrincipalAxes(*args): return _pd.MoleculeBase_alignAlongPrincipalAxes(*args)
    def rotate(*args): return _pd.MoleculeBase_rotate(*args)
    def rotateParticles(*args): return _pd.MoleculeBase_rotateParticles(*args)
    def rotateMolecule(*args): return _pd.MoleculeBase_rotateMolecule(*args)
    def rotateBond(*args): return _pd.MoleculeBase_rotateBond(*args)
    def calcResiduePhiPsi(*args): return _pd.MoleculeBase_calcResiduePhiPsi(*args)
    def calcResidueOmega(*args): return _pd.MoleculeBase_calcResidueOmega(*args)
    def setAllResiduePhiPsi(*args): return _pd.MoleculeBase_setAllResiduePhiPsi(*args)
    def setAllResidueOmega(*args): return _pd.MoleculeBase_setAllResidueOmega(*args)
    def setProteinAlphaHelix(*args): return _pd.MoleculeBase_setProteinAlphaHelix(*args)
    def setProteinReverseHelix(*args): return _pd.MoleculeBase_setProteinReverseHelix(*args)
    def setResiduePhiPsi(*args): return _pd.MoleculeBase_setResiduePhiPsi(*args)
    def setResidueOmega(*args): return _pd.MoleculeBase_setResidueOmega(*args)
    __swig_setmethods__["name"] = _pd.MoleculeBase_name_set
    __swig_getmethods__["name"] = _pd.MoleculeBase_name_get
    if _newclass:name = _swig_property(_pd.MoleculeBase_name_get, _pd.MoleculeBase_name_set)
    def setBioSequence(*args): return _pd.MoleculeBase_setBioSequence(*args)
MoleculeBase_swigregister = _pd.MoleculeBase_swigregister
MoleculeBase_swigregister(MoleculeBase)

class Molecule(MoleculeBase):
    __swig_setmethods__ = {}
    for _s in [MoleculeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Molecule, name, value)
    __swig_getmethods__ = {}
    for _s in [MoleculeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Molecule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    def append(*args): return _pd.Molecule_append(*args)
    def beginBonding(*args): return _pd.Molecule_beginBonding(*args)
    def endBonding(*args): return _pd.Molecule_endBonding(*args)
    def addBond(*args): return _pd.Molecule_addBond(*args)
    def addDisulphide(*args): return _pd.Molecule_addDisulphide(*args)
    def addParticle(*args): return _pd.Molecule_addParticle(*args)
    def save(*args): return _pd.Molecule_save(*args)
    def getChainID(*args): return _pd.Molecule_getChainID(*args)
    __swig_destroy__ = _pd.delete_Molecule
    __del__ = lambda self : None;
Molecule_swigregister = _pd.Molecule_swigregister
Molecule_swigregister(Molecule)
GeneratorCore = _pd.GeneratorCore
loadMolecule = _pd.loadMolecule

class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_System(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_System
    __del__ = lambda self : None;
    def getMolecule(*args): return _pd.System_getMolecule(*args)
    def nMolecules(*args): return _pd.System_nMolecules(*args)
    def nAtoms(*args): return _pd.System_nAtoms(*args)
    def remove(*args): return _pd.System_remove(*args)
    def add(*args): return _pd.System_add(*args)
    def solvate_N(*args): return _pd.System_solvate_N(*args)
    def solvate(*args): return _pd.System_solvate(*args)
    def ffps(*args): return _pd.System_ffps(*args)
    def getEncompassingVector(*args): return _pd.System_getEncompassingVector(*args)
    def getTotalMass(*args): return _pd.System_getTotalMass(*args)
    def getTotalCharge(*args): return _pd.System_getTotalCharge(*args)
    def getCentreOfMass(*args): return _pd.System_getCentreOfMass(*args)
    def getCentreOfGeometry(*args): return _pd.System_getCentreOfGeometry(*args)
    def calcInertiaTensor(*args): return _pd.System_calcInertiaTensor(*args)
    def alignAlongPrincipalAxes(*args): return _pd.System_alignAlongPrincipalAxes(*args)
    def printInertiaInfo(*args): return _pd.System_printInertiaInfo(*args)
    def calcRotationalPartition(*args): return _pd.System_calcRotationalPartition(*args)
    def rotate(*args): return _pd.System_rotate(*args)
    def zeroCentreOfGeometry(*args): return _pd.System_zeroCentreOfGeometry(*args)
    def zeroCentreOfMass(*args): return _pd.System_zeroCentreOfMass(*args)
    def info(*args): return _pd.System_info(*args)
    def detail(*args): return _pd.System_detail(*args)
    def save(*args): return _pd.System_save(*args)
    def printPDB(*args): return _pd.System_printPDB(*args)
System_swigregister = _pd.System_swigregister
System_swigregister(System)

NewProtein = _pd.NewProtein
NewProteinHelix = _pd.NewProteinHelix
NewMolecule = _pd.NewMolecule
class PickBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PickBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_PickBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.PickBase_clone(*args)
    def matches(*args): return _pd.PickBase_matches(*args)
    def test(*args): return _pd.PickBase_test(*args)
    def countPickedAtoms(*args): return _pd.PickBase_countPickedAtoms(*args)
PickBase_swigregister = _pd.PickBase_swigregister
PickBase_swigregister(PickBase)

class PickResidueBase(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickResidueBase, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickResidueBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def matches(*args): return _pd.PickResidueBase_matches(*args)
    def countPickedResidues(*args): return _pd.PickResidueBase_countPickedResidues(*args)
    __swig_destroy__ = _pd.delete_PickResidueBase
    __del__ = lambda self : None;
PickResidueBase_swigregister = _pd.PickResidueBase_swigregister
PickResidueBase_swigregister(PickResidueBase)

class PickLogical_UNARY(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickLogical_UNARY, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickLogical_UNARY, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_PickLogical_UNARY
    __del__ = lambda self : None;
    def clone(*args): return _pd.PickLogical_UNARY_clone(*args)
    def matches(*args): return _pd.PickLogical_UNARY_matches(*args)
PickLogical_UNARY_swigregister = _pd.PickLogical_UNARY_swigregister
PickLogical_UNARY_swigregister(PickLogical_UNARY)

class Pick_NOT(PickLogical_UNARY):
    __swig_setmethods__ = {}
    for _s in [PickLogical_UNARY]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Pick_NOT, name, value)
    __swig_getmethods__ = {}
    for _s in [PickLogical_UNARY]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick_NOT, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Pick_NOT(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Pick_NOT_clone(*args)
    def matches(*args): return _pd.Pick_NOT_matches(*args)
    __swig_destroy__ = _pd.delete_Pick_NOT
    __del__ = lambda self : None;
Pick_NOT_swigregister = _pd.Pick_NOT_swigregister
Pick_NOT_swigregister(Pick_NOT)

class PickLogical_BINARY(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickLogical_BINARY, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickLogical_BINARY, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_PickLogical_BINARY
    __del__ = lambda self : None;
    def clone(*args): return _pd.PickLogical_BINARY_clone(*args)
    def matches(*args): return _pd.PickLogical_BINARY_matches(*args)
PickLogical_BINARY_swigregister = _pd.PickLogical_BINARY_swigregister
PickLogical_BINARY_swigregister(PickLogical_BINARY)

class Pick_AND(PickLogical_BINARY):
    __swig_setmethods__ = {}
    for _s in [PickLogical_BINARY]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Pick_AND, name, value)
    __swig_getmethods__ = {}
    for _s in [PickLogical_BINARY]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick_AND, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Pick_AND(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Pick_AND_clone(*args)
    def matches(*args): return _pd.Pick_AND_matches(*args)
    __swig_destroy__ = _pd.delete_Pick_AND
    __del__ = lambda self : None;
Pick_AND_swigregister = _pd.Pick_AND_swigregister
Pick_AND_swigregister(Pick_AND)

class Pick_OR(PickLogical_BINARY):
    __swig_setmethods__ = {}
    for _s in [PickLogical_BINARY]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Pick_OR, name, value)
    __swig_getmethods__ = {}
    for _s in [PickLogical_BINARY]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick_OR, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Pick_OR(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Pick_OR_clone(*args)
    def matches(*args): return _pd.Pick_OR_matches(*args)
    __swig_destroy__ = _pd.delete_Pick_OR
    __del__ = lambda self : None;
Pick_OR_swigregister = _pd.Pick_OR_swigregister
Pick_OR_swigregister(Pick_OR)

class ObjectContainer_PickBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_PickBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_PickBase, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_PickBase_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_PickBase
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_PickBase_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_PickBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_PickBase_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_PickBase_add(*args)

    def erase(*args): return _pd.ObjectContainer_PickBase_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_PickBase_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_PickBase_element(*args)
ObjectContainer_PickBase_swigregister = _pd.ObjectContainer_PickBase_swigregister
ObjectContainer_PickBase_swigregister(ObjectContainer_PickBase)

class Pick_AND_Group(PickBase,ObjectContainer_PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase,ObjectContainer_PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Pick_AND_Group, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase,ObjectContainer_PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick_AND_Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Pick_AND_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Pick_AND_Group_clone(*args)
    def matches(*args): return _pd.Pick_AND_Group_matches(*args)
    __swig_destroy__ = _pd.delete_Pick_AND_Group
    __del__ = lambda self : None;
Pick_AND_Group_swigregister = _pd.Pick_AND_Group_swigregister
Pick_AND_Group_swigregister(Pick_AND_Group)

class Pick_OR_Group(PickBase,ObjectContainer_PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase,ObjectContainer_PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Pick_OR_Group, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase,ObjectContainer_PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pick_OR_Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Pick_OR_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Pick_OR_Group_clone(*args)
    def matches(*args): return _pd.Pick_OR_Group_matches(*args)
    __swig_destroy__ = _pd.delete_Pick_OR_Group
    __del__ = lambda self : None;
Pick_OR_Group_swigregister = _pd.Pick_OR_Group_swigregister
Pick_OR_Group_swigregister(Pick_OR_Group)

class PickNothing(PickResidueBase):
    __swig_setmethods__ = {}
    for _s in [PickResidueBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickNothing, name, value)
    __swig_getmethods__ = {}
    for _s in [PickResidueBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickNothing, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.PickNothing_clone(*args)
    def matches(*args): return _pd.PickNothing_matches(*args)
    def __init__(self, *args): 
        this = _pd.new_PickNothing(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PickNothing
    __del__ = lambda self : None;
PickNothing_swigregister = _pd.PickNothing_swigregister
PickNothing_swigregister(PickNothing)

class PickEverything(PickResidueBase):
    __swig_setmethods__ = {}
    for _s in [PickResidueBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickEverything, name, value)
    __swig_getmethods__ = {}
    for _s in [PickResidueBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickEverything, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.PickEverything_clone(*args)
    def matches(*args): return _pd.PickEverything_matches(*args)
    def __init__(self, *args): 
        this = _pd.new_PickEverything(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PickEverything
    __del__ = lambda self : None;
PickEverything_swigregister = _pd.PickEverything_swigregister
PickEverything_swigregister(PickEverything)

class PickAllParticles(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickAllParticles, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickAllParticles, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.PickAllParticles_clone(*args)
    def matches(*args): return _pd.PickAllParticles_matches(*args)
    def __init__(self, *args): 
        this = _pd.new_PickAllParticles(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PickAllParticles
    __del__ = lambda self : None;
PickAllParticles_swigregister = _pd.PickAllParticles_swigregister
PickAllParticles_swigregister(PickAllParticles)

class PickAllAtoms(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickAllAtoms, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickAllAtoms, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.PickAllAtoms_clone(*args)
    def matches(*args): return _pd.PickAllAtoms_matches(*args)
    def __init__(self, *args): 
        this = _pd.new_PickAllAtoms(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PickAllAtoms
    __del__ = lambda self : None;
PickAllAtoms_swigregister = _pd.PickAllAtoms_swigregister
PickAllAtoms_swigregister(PickAllAtoms)

class PickHeavyAtoms(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickHeavyAtoms, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickHeavyAtoms, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.PickHeavyAtoms_clone(*args)
    def matches(*args): return _pd.PickHeavyAtoms_matches(*args)
    def __init__(self, *args): 
        this = _pd.new_PickHeavyAtoms(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PickHeavyAtoms
    __del__ = lambda self : None;
PickHeavyAtoms_swigregister = _pd.PickHeavyAtoms_swigregister
PickHeavyAtoms_swigregister(PickHeavyAtoms)

class PickResidue(PickResidueBase):
    __swig_setmethods__ = {}
    for _s in [PickResidueBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickResidue, name, value)
    __swig_getmethods__ = {}
    for _s in [PickResidueBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickResidue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickResidue(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickResidue_clone(*args)
    def matches(*args): return _pd.PickResidue_matches(*args)
    __swig_destroy__ = _pd.delete_PickResidue
    __del__ = lambda self : None;
PickResidue_swigregister = _pd.PickResidue_swigregister
PickResidue_swigregister(PickResidue)

class PickMolecule(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickMolecule, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickMolecule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickMolecule(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickMolecule_clone(*args)
    def matches(*args): return _pd.PickMolecule_matches(*args)
    __swig_destroy__ = _pd.delete_PickMolecule
    __del__ = lambda self : None;
PickMolecule_swigregister = _pd.PickMolecule_swigregister
PickMolecule_swigregister(PickMolecule)

class PickMoleculeRange(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickMoleculeRange, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickMoleculeRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickMoleculeRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickMoleculeRange_clone(*args)
    def matches(*args): return _pd.PickMoleculeRange_matches(*args)
    __swig_destroy__ = _pd.delete_PickMoleculeRange
    __del__ = lambda self : None;
PickMoleculeRange_swigregister = _pd.PickMoleculeRange_swigregister
PickMoleculeRange_swigregister(PickMoleculeRange)

class PickCAAtoms(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickCAAtoms, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickCAAtoms, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickCAAtoms(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickCAAtoms_clone(*args)
    def matches(*args): return _pd.PickCAAtoms_matches(*args)
    __swig_destroy__ = _pd.delete_PickCAAtoms
    __del__ = lambda self : None;
PickCAAtoms_swigregister = _pd.PickCAAtoms_swigregister
PickCAAtoms_swigregister(PickCAAtoms)

class PickBackbone(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickBackbone, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickBackbone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickBackbone(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickBackbone_clone(*args)
    def matches(*args): return _pd.PickBackbone_matches(*args)
    __swig_destroy__ = _pd.delete_PickBackbone
    __del__ = lambda self : None;
PickBackbone_swigregister = _pd.PickBackbone_swigregister
PickBackbone_swigregister(PickBackbone)

class PickCoreBackbone(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickCoreBackbone, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickCoreBackbone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickCoreBackbone(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickCoreBackbone_clone(*args)
    def matches(*args): return _pd.PickCoreBackbone_matches(*args)
    __swig_destroy__ = _pd.delete_PickCoreBackbone
    __del__ = lambda self : None;
PickCoreBackbone_swigregister = _pd.PickCoreBackbone_swigregister
PickCoreBackbone_swigregister(PickCoreBackbone)

class PickHydrogens(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickHydrogens, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickHydrogens, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickHydrogens(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickHydrogens_clone(*args)
    def matches(*args): return _pd.PickHydrogens_matches(*args)
    __swig_destroy__ = _pd.delete_PickHydrogens
    __del__ = lambda self : None;
PickHydrogens_swigregister = _pd.PickHydrogens_swigregister
PickHydrogens_swigregister(PickHydrogens)

class PickRebuildRequired(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickRebuildRequired, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickRebuildRequired, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickRebuildRequired(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickRebuildRequired_clone(*args)
    def matches(*args): return _pd.PickRebuildRequired_matches(*args)
    __swig_destroy__ = _pd.delete_PickRebuildRequired
    __del__ = lambda self : None;
PickRebuildRequired_swigregister = _pd.PickRebuildRequired_swigregister
PickRebuildRequired_swigregister(PickRebuildRequired)

class PickSidechains(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickSidechains, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickSidechains, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickSidechains(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickSidechains_clone(*args)
    def matches(*args): return _pd.PickSidechains_matches(*args)
    __swig_destroy__ = _pd.delete_PickSidechains
    __del__ = lambda self : None;
PickSidechains_swigregister = _pd.PickSidechains_swigregister
PickSidechains_swigregister(PickSidechains)

class PickAtomIndex(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickAtomIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickAtomIndex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickAtomIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickAtomIndex_clone(*args)
    def matches(*args): return _pd.PickAtomIndex_matches(*args)
    __swig_destroy__ = _pd.delete_PickAtomIndex
    __del__ = lambda self : None;
PickAtomIndex_swigregister = _pd.PickAtomIndex_swigregister
PickAtomIndex_swigregister(PickAtomIndex)

class PickAtomRange(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickAtomRange, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickAtomRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickAtomRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickAtomRange_clone(*args)
    def __eq__(*args): return _pd.PickAtomRange___eq__(*args)
    def __ne__(*args): return _pd.PickAtomRange___ne__(*args)
    def getNAtoms(*args): return _pd.PickAtomRange_getNAtoms(*args)
    def getStartAtomIndex(*args): return _pd.PickAtomRange_getStartAtomIndex(*args)
    def getEndAtomIndex(*args): return _pd.PickAtomRange_getEndAtomIndex(*args)
    def assertRange(*args): return _pd.PickAtomRange_assertRange(*args)
    def matches(*args): return _pd.PickAtomRange_matches(*args)
    __swig_setmethods__["reversed"] = _pd.PickAtomRange_reversed_set
    __swig_getmethods__["reversed"] = _pd.PickAtomRange_reversed_get
    if _newclass:reversed = _swig_property(_pd.PickAtomRange_reversed_get, _pd.PickAtomRange_reversed_set)
    __swig_destroy__ = _pd.delete_PickAtomRange
    __del__ = lambda self : None;
PickAtomRange_swigregister = _pd.PickAtomRange_swigregister
PickAtomRange_swigregister(PickAtomRange)

class PickAtomRanges(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickAtomRanges, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickAtomRanges, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickAtomRanges(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickAtomRanges_clone(*args)
    def __eq__(*args): return _pd.PickAtomRanges___eq__(*args)
    def __ne__(*args): return _pd.PickAtomRanges___ne__(*args)
    def size(*args): return _pd.PickAtomRanges_size(*args)
    def clear(*args): return _pd.PickAtomRanges_clear(*args)
    def getPreviousMatchRangeIndex(*args): return _pd.PickAtomRanges_getPreviousMatchRangeIndex(*args)
    def getNAtoms(*args): return _pd.PickAtomRanges_getNAtoms(*args)
    def getStartAtomIndex(*args): return _pd.PickAtomRanges_getStartAtomIndex(*args)
    def getEndAtomIndex(*args): return _pd.PickAtomRanges_getEndAtomIndex(*args)
    def getReversed(*args): return _pd.PickAtomRanges_getReversed(*args)
    def assertRanges(*args): return _pd.PickAtomRanges_assertRanges(*args)
    def matches(*args): return _pd.PickAtomRanges_matches(*args)
    def addRange(*args): return _pd.PickAtomRanges_addRange(*args)
    __swig_destroy__ = _pd.delete_PickAtomRanges
    __del__ = lambda self : None;
PickAtomRanges_swigregister = _pd.PickAtomRanges_swigregister
PickAtomRanges_swigregister(PickAtomRanges)

class PickResidueRange(PickAtomRange):
    __swig_setmethods__ = {}
    for _s in [PickAtomRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickResidueRange, name, value)
    __swig_getmethods__ = {}
    for _s in [PickAtomRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickResidueRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickResidueRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickResidueRange_clone(*args)
    def getNRes(*args): return _pd.PickResidueRange_getNRes(*args)
    def getStartResIndex(*args): return _pd.PickResidueRange_getStartResIndex(*args)
    def getEndResIndex(*args): return _pd.PickResidueRange_getEndResIndex(*args)
    def getCentreResIndex(*args): return _pd.PickResidueRange_getCentreResIndex(*args)
    def assertRange(*args): return _pd.PickResidueRange_assertRange(*args)
    __swig_destroy__ = _pd.delete_PickResidueRange
    __del__ = lambda self : None;
PickResidueRange_swigregister = _pd.PickResidueRange_swigregister
PickResidueRange_swigregister(PickResidueRange)

class PickResidueList(PickResidueBase):
    __swig_setmethods__ = {}
    for _s in [PickResidueBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickResidueList, name, value)
    __swig_getmethods__ = {}
    for _s in [PickResidueBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickResidueList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickResidueList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PickResidueList
    __del__ = lambda self : None;
    def clone(*args): return _pd.PickResidueList_clone(*args)
    def invertSelection(*args): return _pd.PickResidueList_invertSelection(*args)
    def resetMolecule(*args): return _pd.PickResidueList_resetMolecule(*args)
    def add(*args): return _pd.PickResidueList_add(*args)
    def clearList(*args): return _pd.PickResidueList_clearList(*args)
    def matches(*args): return _pd.PickResidueList_matches(*args)
PickResidueList_swigregister = _pd.PickResidueList_swigregister
PickResidueList_swigregister(PickResidueList)

class PickElement(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickElement_clone(*args)
    def matches(*args): return _pd.PickElement_matches(*args)
    __swig_destroy__ = _pd.delete_PickElement
    __del__ = lambda self : None;
PickElement_swigregister = _pd.PickElement_swigregister
PickElement_swigregister(PickElement)

class PickAtomPDBName(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickAtomPDBName, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickAtomPDBName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickAtomPDBName(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickAtomPDBName_clone(*args)
    def matches(*args): return _pd.PickAtomPDBName_matches(*args)
    __swig_destroy__ = _pd.delete_PickAtomPDBName
    __del__ = lambda self : None;
PickAtomPDBName_swigregister = _pd.PickAtomPDBName_swigregister
PickAtomPDBName_swigregister(PickAtomPDBName)

class PickMoleculeName(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickMoleculeName, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickMoleculeName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickMoleculeName(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickMoleculeName_clone(*args)
    def matches(*args): return _pd.PickMoleculeName_matches(*args)
    __swig_destroy__ = _pd.delete_PickMoleculeName
    __del__ = lambda self : None;
PickMoleculeName_swigregister = _pd.PickMoleculeName_swigregister
PickMoleculeName_swigregister(PickMoleculeName)

class PickMolecule3LetterName(PickBase):
    __swig_setmethods__ = {}
    for _s in [PickBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickMolecule3LetterName, name, value)
    __swig_getmethods__ = {}
    for _s in [PickBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickMolecule3LetterName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickMolecule3LetterName(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickMolecule3LetterName_clone(*args)
    def matches(*args): return _pd.PickMolecule3LetterName_matches(*args)
    __swig_destroy__ = _pd.delete_PickMolecule3LetterName
    __del__ = lambda self : None;
PickMolecule3LetterName_swigregister = _pd.PickMolecule3LetterName_swigregister
PickMolecule3LetterName_swigregister(PickMolecule3LetterName)

class ResidueList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ResidueList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ResidueList(*args)
        try: self.this.append(this)
        except: self.this = this
    def setChainID(*args): return _pd.ResidueList_setChainID(*args)
    def getChainID(*args): return _pd.ResidueList_getChainID(*args)
    def pushback(*args): return _pd.ResidueList_pushback(*args)
    def getResListSize(*args): return _pd.ResidueList_getResListSize(*args)
    def getBiologicalIndex(*args): return _pd.ResidueList_getBiologicalIndex(*args)
    def getBiologicalIcode(*args): return _pd.ResidueList_getBiologicalIcode(*args)
    def getResName(*args): return _pd.ResidueList_getResName(*args)
    __swig_destroy__ = _pd.delete_ResidueList
    __del__ = lambda self : None;
ResidueList_swigregister = _pd.ResidueList_swigregister
ResidueList_swigregister(ResidueList)

class PickResiduesFromFile(PickResidueBase):
    __swig_setmethods__ = {}
    for _s in [PickResidueBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickResiduesFromFile, name, value)
    __swig_getmethods__ = {}
    for _s in [PickResidueBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickResiduesFromFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PickResiduesFromFile(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PickResiduesFromFile_clone(*args)
    def matches(*args): return _pd.PickResiduesFromFile_matches(*args)
    __swig_destroy__ = _pd.delete_PickResiduesFromFile
    __del__ = lambda self : None;
PickResiduesFromFile_swigregister = _pd.PickResiduesFromFile_swigregister
PickResiduesFromFile_swigregister(PickResiduesFromFile)

findLevelOne = _pd.findLevelOne
findLevelTwo = _pd.findLevelTwo
findLevelThree = _pd.findLevelThree
rebuildAndPolymerise = _pd.rebuildAndPolymerise
class RebuilderBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RebuilderBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RebuilderBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def invokeBuild(*args): return _pd.RebuilderBase_invokeBuild(*args)
    __swig_destroy__ = _pd.delete_RebuilderBase
    __del__ = lambda self : None;
RebuilderBase_swigregister = _pd.RebuilderBase_swigregister
RebuilderBase_swigregister(RebuilderBase)
rebuildMissingAtoms = _pd.rebuildMissingAtoms

class NullRebuilder(RebuilderBase):
    __swig_setmethods__ = {}
    for _s in [RebuilderBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NullRebuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RebuilderBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullRebuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NullRebuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def invokeBuild(*args): return _pd.NullRebuilder_invokeBuild(*args)
    __swig_destroy__ = _pd.delete_NullRebuilder
    __del__ = lambda self : None;
NullRebuilder_swigregister = _pd.NullRebuilder_swigregister
NullRebuilder_swigregister(NullRebuilder)

class ToOriginRebuilder(RebuilderBase):
    __swig_setmethods__ = {}
    for _s in [RebuilderBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ToOriginRebuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RebuilderBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToOriginRebuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ToOriginRebuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def invokeBuild(*args): return _pd.ToOriginRebuilder_invokeBuild(*args)
    def setFlagAsBuilt(*args): return _pd.ToOriginRebuilder_setFlagAsBuilt(*args)
    def getFlagAsBuilt(*args): return _pd.ToOriginRebuilder_getFlagAsBuilt(*args)
    __swig_destroy__ = _pd.delete_ToOriginRebuilder
    __del__ = lambda self : None;
ToOriginRebuilder_swigregister = _pd.ToOriginRebuilder_swigregister
ToOriginRebuilder_swigregister(ToOriginRebuilder)

class MissingAtomRebuilder(RebuilderBase):
    __swig_setmethods__ = {}
    for _s in [RebuilderBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MissingAtomRebuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RebuilderBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MissingAtomRebuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MissingAtomRebuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def invokeBuild(*args): return _pd.MissingAtomRebuilder_invokeBuild(*args)
    __swig_destroy__ = _pd.delete_MissingAtomRebuilder
    __del__ = lambda self : None;
MissingAtomRebuilder_swigregister = _pd.MissingAtomRebuilder_swigregister
MissingAtomRebuilder_swigregister(MissingAtomRebuilder)

class MainchainHydrogenRebuilder(RebuilderBase):
    __swig_setmethods__ = {}
    for _s in [RebuilderBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MainchainHydrogenRebuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RebuilderBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MainchainHydrogenRebuilder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MainchainHydrogenRebuilder(*args)
        try: self.this.append(this)
        except: self.this = this
    def invokeBuild(*args): return _pd.MainchainHydrogenRebuilder_invokeBuild(*args)
    __swig_destroy__ = _pd.delete_MainchainHydrogenRebuilder
    __del__ = lambda self : None;
MainchainHydrogenRebuilder_swigregister = _pd.MainchainHydrogenRebuilder_swigregister
MainchainHydrogenRebuilder_swigregister(MainchainHydrogenRebuilder)

class RebuilderOwner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RebuilderOwner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RebuilderOwner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RebuilderOwner(*args)
        try: self.this.append(this)
        except: self.this = this
    def setRebuilder(*args): return _pd.RebuilderOwner_setRebuilder(*args)
    def setRebuilderDefault(*args): return _pd.RebuilderOwner_setRebuilderDefault(*args)
    def disableRebuild(*args): return _pd.RebuilderOwner_disableRebuild(*args)
    def getRebuilder(*args): return _pd.RebuilderOwner_getRebuilder(*args)
    __swig_destroy__ = _pd.delete_RebuilderOwner
    __del__ = lambda self : None;
RebuilderOwner_swigregister = _pd.RebuilderOwner_swigregister
RebuilderOwner_swigregister(RebuilderOwner)

class ProfileBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ProfileBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProfileBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_ProfileBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.ProfileBase_clone(*args)
    def get(*args): return _pd.ProfileBase_get(*args)
    def info(*args): return _pd.ProfileBase_info(*args)
ProfileBase_swigregister = _pd.ProfileBase_swigregister
ProfileBase_swigregister(ProfileBase)

class ConstantProfile(ProfileBase):
    __swig_setmethods__ = {}
    for _s in [ProfileBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ConstantProfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ProfileBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ConstantProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ConstantProfile
    __del__ = lambda self : None;
    def clone(*args): return _pd.ConstantProfile_clone(*args)
    def get(*args): return _pd.ConstantProfile_get(*args)
    def info(*args): return _pd.ConstantProfile_info(*args)
ConstantProfile_swigregister = _pd.ConstantProfile_swigregister
ConstantProfile_swigregister(ConstantProfile)

class LinearProfile(ConstantProfile):
    __swig_setmethods__ = {}
    for _s in [ConstantProfile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, LinearProfile, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstantProfile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_LinearProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.LinearProfile_clone(*args)
    def get(*args): return _pd.LinearProfile_get(*args)
    def info(*args): return _pd.LinearProfile_info(*args)
    __swig_destroy__ = _pd.delete_LinearProfile
    __del__ = lambda self : None;
LinearProfile_swigregister = _pd.LinearProfile_swigregister
LinearProfile_swigregister(LinearProfile)

class ExponentialProfile(LinearProfile):
    __swig_setmethods__ = {}
    for _s in [LinearProfile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ExponentialProfile, name, value)
    __swig_getmethods__ = {}
    for _s in [LinearProfile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExponentialProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ExponentialProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.ExponentialProfile_clone(*args)
    def get(*args): return _pd.ExponentialProfile_get(*args)
    def info(*args): return _pd.ExponentialProfile_info(*args)
    __swig_destroy__ = _pd.delete_ExponentialProfile
    __del__ = lambda self : None;
ExponentialProfile_swigregister = _pd.ExponentialProfile_swigregister
ExponentialProfile_swigregister(ExponentialProfile)

class WorkSpaceOperatorBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, WorkSpaceOperatorBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkSpaceOperatorBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_WorkSpaceOperatorBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def getWSpace(*args): return _pd.WorkSpaceOperatorBase_getWSpace(*args)
    __swig_destroy__ = _pd.delete_WorkSpaceOperatorBase
    __del__ = lambda self : None;
WorkSpaceOperatorBase_swigregister = _pd.WorkSpaceOperatorBase_swigregister
WorkSpaceOperatorBase_swigregister(WorkSpaceOperatorBase)

class WorkSpaceComponentBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, WorkSpaceComponentBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorkSpaceComponentBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_WorkSpaceComponentBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def getWSpace(*args): return _pd.WorkSpaceComponentBase_getWSpace(*args)
    __swig_destroy__ = _pd.delete_WorkSpaceComponentBase
    __del__ = lambda self : None;
WorkSpaceComponentBase_swigregister = _pd.WorkSpaceComponentBase_swigregister
WorkSpaceComponentBase_swigregister(WorkSpaceComponentBase)

class PhysicsConst(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PhysicsConst, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhysicsConst, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["printConstants"] = lambda x: _pd.PhysicsConst_printConstants
    if _newclass:printConstants = staticmethod(_pd.PhysicsConst_printConstants)
    __swig_destroy__ = _pd.delete_PhysicsConst
    __del__ = lambda self : None;
PhysicsConst_swigregister = _pd.PhysicsConst_swigregister
PhysicsConst_swigregister(PhysicsConst)
PhysicsConst.kcal2J = _pd.cvar.PhysicsConst_kcal2J
PhysicsConst.J2kcal = _pd.cvar.PhysicsConst_J2kcal
PhysicsConst.Na = _pd.cvar.PhysicsConst_Na
PhysicsConst.kcal2JDivNa = _pd.cvar.PhysicsConst_kcal2JDivNa
PhysicsConst.kB = _pd.cvar.PhysicsConst_kB
PhysicsConst.R_kcal = _pd.cvar.PhysicsConst_R_kcal
PhysicsConst.planck = _pd.cvar.PhysicsConst_planck
PhysicsConst.clight = _pd.cvar.PhysicsConst_clight
PhysicsConst.amu = _pd.cvar.PhysicsConst_amu
PhysicsConst.Angstrom = _pd.cvar.PhysicsConst_Angstrom
PhysicsConst.invAngstrom = _pd.cvar.PhysicsConst_invAngstrom
PhysicsConst.e_charge = _pd.cvar.PhysicsConst_e_charge
PhysicsConst.sqr_e_charge = _pd.cvar.PhysicsConst_sqr_e_charge
PhysicsConst.e0 = _pd.cvar.PhysicsConst_e0
PhysicsConst._4pi_e0 = _pd.cvar.PhysicsConst__4pi_e0
PhysicsConst.econv = _pd.cvar.PhysicsConst_econv
PhysicsConst.halfeconv = _pd.cvar.PhysicsConst_halfeconv
PhysicsConst.econv_joule = _pd.cvar.PhysicsConst_econv_joule
PhysicsConst.halfeconv_joule = _pd.cvar.PhysicsConst_halfeconv_joule
PhysicsConst.Bar2Pa = _pd.cvar.PhysicsConst_Bar2Pa
PhysicsConst_printConstants = _pd.PhysicsConst_printConstants

class ForcefieldBase(Object,WorkSpaceOperatorBase):
    __swig_setmethods__ = {}
    for _s in [Object,WorkSpaceOperatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ForcefieldBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,WorkSpaceOperatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForcefieldBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Summary = _pd.ForcefieldBase_Summary
    Atomwise = _pd.ForcefieldBase_Atomwise
    Detailed = _pd.ForcefieldBase_Detailed
    __swig_destroy__ = _pd.delete_ForcefieldBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.ForcefieldBase_clone(*args)
    def setup(*args): return _pd.ForcefieldBase_setup(*args)
    def ensuresetup(*args): return _pd.ForcefieldBase_ensuresetup(*args)
    def calcCheckSum(*args): return _pd.ForcefieldBase_calcCheckSum(*args)
    def calcForces(*args): return _pd.ForcefieldBase_calcForces(*args)
    def calcEnergies(*args): return _pd.ForcefieldBase_calcEnergies(*args)
    def calcEnergiesVerbose(*args): return _pd.ForcefieldBase_calcEnergiesVerbose(*args)
    def info(*args): return _pd.ForcefieldBase_info(*args)
    def infoLine(*args): return _pd.ForcefieldBase_infoLine(*args)
    def infoLineHeader(*args): return _pd.ForcefieldBase_infoLineHeader(*args)
    def activate(*args): return _pd.ForcefieldBase_activate(*args)
    def deactivate(*args): return _pd.ForcefieldBase_deactivate(*args)
    __swig_setmethods__["ShortName"] = _pd.ForcefieldBase_ShortName_set
    __swig_getmethods__["ShortName"] = _pd.ForcefieldBase_ShortName_get
    if _newclass:ShortName = _swig_property(_pd.ForcefieldBase_ShortName_get, _pd.ForcefieldBase_ShortName_set)
    __swig_setmethods__["Passive"] = _pd.ForcefieldBase_Passive_set
    __swig_getmethods__["Passive"] = _pd.ForcefieldBase_Passive_get
    if _newclass:Passive = _swig_property(_pd.ForcefieldBase_Passive_get, _pd.ForcefieldBase_Passive_set)
    __swig_setmethods__["OutputLevel"] = _pd.ForcefieldBase_OutputLevel_set
    __swig_getmethods__["OutputLevel"] = _pd.ForcefieldBase_OutputLevel_get
    if _newclass:OutputLevel = _swig_property(_pd.ForcefieldBase_OutputLevel_get, _pd.ForcefieldBase_OutputLevel_set)
    __swig_setmethods__["epot"] = _pd.ForcefieldBase_epot_set
    __swig_getmethods__["epot"] = _pd.ForcefieldBase_epot_get
    if _newclass:epot = _swig_property(_pd.ForcefieldBase_epot_get, _pd.ForcefieldBase_epot_set)
    def epot_ptr(*args): return _pd.ForcefieldBase_epot_ptr(*args)
    def forceSetup(*args): return _pd.ForcefieldBase_forceSetup(*args)
ForcefieldBase_swigregister = _pd.ForcefieldBase_swigregister
ForcefieldBase_swigregister(ForcefieldBase)

class ObjectContainer_ForcefieldBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_ForcefieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_ForcefieldBase, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_ForcefieldBase_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_ForcefieldBase
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_ForcefieldBase_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_ForcefieldBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_ForcefieldBase_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_ForcefieldBase_add(*args)

    def erase(*args): return _pd.ObjectContainer_ForcefieldBase_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_ForcefieldBase_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_ForcefieldBase_element(*args)
ObjectContainer_ForcefieldBase_swigregister = _pd.ObjectContainer_ForcefieldBase_swigregister
ObjectContainer_ForcefieldBase_swigregister(ObjectContainer_ForcefieldBase)

class Forcefield(ForcefieldBase,ObjectContainer_ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase,ObjectContainer_ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Forcefield, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase,ObjectContainer_ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Forcefield, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Forcefield(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Forcefield_clone(*args)
    def setup(*args): return _pd.Forcefield_setup(*args)
    def calcEnergiesVerbose(*args): return _pd.Forcefield_calcEnergiesVerbose(*args)
    def calcEnergies(*args): return _pd.Forcefield_calcEnergies(*args)
    def calcForces(*args): return _pd.Forcefield_calcForces(*args)
    def info(*args): return _pd.Forcefield_info(*args)
    def infoLine(*args): return _pd.Forcefield_infoLine(*args)
    def infoLineHeader(*args): return _pd.Forcefield_infoLineHeader(*args)
    def addPreAddition(*args): return _pd.Forcefield_addPreAddition(*args)
    def printEnergyShort(*args): return _pd.Forcefield_printEnergyShort(*args)
    def printEnergySummary(*args): return _pd.Forcefield_printEnergySummary(*args)
    def printEnergyByAtom(*args): return _pd.Forcefield_printEnergyByAtom(*args)
    def printEnergyDetailed(*args): return _pd.Forcefield_printEnergyDetailed(*args)
    def listForcefields(*args): return _pd.Forcefield_listForcefields(*args)
    __swig_destroy__ = _pd.delete_Forcefield
    __del__ = lambda self : None;
Forcefield_swigregister = _pd.Forcefield_swigregister
Forcefield_swigregister(Forcefield)

Independent = _pd.Independent
Couple = _pd.Couple
Decouple = _pd.Decouple
class FF_Extension_TI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Extension_TI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Extension_TI, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setLambda(*args): return _pd.FF_Extension_TI_setLambda(*args)
    def getLambda(*args): return _pd.FF_Extension_TI_getLambda(*args)
    def get_dEdlambda(*args): return _pd.FF_Extension_TI_get_dEdlambda(*args)
    def printLambdaGroups(*args): return _pd.FF_Extension_TI_printLambdaGroups(*args)
    def setLambdaGroup(*args): return _pd.FF_Extension_TI_setLambdaGroup(*args)
    __swig_destroy__ = _pd.delete_FF_Extension_TI
    __del__ = lambda self : None;
FF_Extension_TI_swigregister = _pd.FF_Extension_TI_swigregister
FF_Extension_TI_swigregister(FF_Extension_TI)

calc_q_IdealGas = _pd.calc_q_IdealGas
class MonitorBase(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MonitorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonitorBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.MonitorBase_clone(*args)
    def measure(*args): return _pd.MonitorBase_measure(*args)
    def repeat(*args): return _pd.MonitorBase_repeat(*args)
    def reset(*args): return _pd.MonitorBase_reset(*args)
    def printHeader(*args): return _pd.MonitorBase_printHeader(*args)
    def printCurData(*args): return _pd.MonitorBase_printCurData(*args)
    def printData(*args): return _pd.MonitorBase_printData(*args)
    def printAllData(*args): return _pd.MonitorBase_printAllData(*args)
    def printHistogram(*args): return _pd.MonitorBase_printHistogram(*args)
    def nData(*args): return _pd.MonitorBase_nData(*args)
    def getCurData(*args): return _pd.MonitorBase_getCurData(*args)
    def addData(*args): return _pd.MonitorBase_addData(*args)
    def getData(*args): return _pd.MonitorBase_getData(*args)
    def getVarianceSubdata(*args): return _pd.MonitorBase_getVarianceSubdata(*args)
    def getVariance(*args): return _pd.MonitorBase_getVariance(*args)
    def printRunningAverageSubdata(*args): return _pd.MonitorBase_printRunningAverageSubdata(*args)
    def printRunningAverage(*args): return _pd.MonitorBase_printRunningAverage(*args)
    def getAverageSubdata(*args): return _pd.MonitorBase_getAverageSubdata(*args)
    def getAverage(*args): return _pd.MonitorBase_getAverage(*args)
    def printBlockAverage(*args): return _pd.MonitorBase_printBlockAverage(*args)
    def getBlockAvStdDev(*args): return _pd.MonitorBase_getBlockAvStdDev(*args)
    def getHistogram(*args): return _pd.MonitorBase_getHistogram(*args)
    __swig_setmethods__["OutputLevel"] = _pd.MonitorBase_OutputLevel_set
    __swig_getmethods__["OutputLevel"] = _pd.MonitorBase_OutputLevel_get
    if _newclass:OutputLevel = _swig_property(_pd.MonitorBase_OutputLevel_get, _pd.MonitorBase_OutputLevel_set)
    __swig_setmethods__["PrintAverage"] = _pd.MonitorBase_PrintAverage_set
    __swig_getmethods__["PrintAverage"] = _pd.MonitorBase_PrintAverage_get
    if _newclass:PrintAverage = _swig_property(_pd.MonitorBase_PrintAverage_get, _pd.MonitorBase_PrintAverage_set)
    __swig_setmethods__["RawIgnoreFirstN"] = _pd.MonitorBase_RawIgnoreFirstN_set
    __swig_getmethods__["RawIgnoreFirstN"] = _pd.MonitorBase_RawIgnoreFirstN_get
    if _newclass:RawIgnoreFirstN = _swig_property(_pd.MonitorBase_RawIgnoreFirstN_get, _pd.MonitorBase_RawIgnoreFirstN_set)
    __swig_setmethods__["RawSkip"] = _pd.MonitorBase_RawSkip_set
    __swig_getmethods__["RawSkip"] = _pd.MonitorBase_RawSkip_get
    if _newclass:RawSkip = _swig_property(_pd.MonitorBase_RawSkip_get, _pd.MonitorBase_RawSkip_set)
    def setGranularity(*args): return _pd.MonitorBase_setGranularity(*args)
    __swig_destroy__ = _pd.delete_MonitorBase
    __del__ = lambda self : None;
MonitorBase_swigregister = _pd.MonitorBase_swigregister
MonitorBase_swigregister(MonitorBase)

class ObjectContainer_Monitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_Monitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_Monitor, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_Monitor_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_Monitor
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_Monitor_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_Monitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_Monitor_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_Monitor_add(*args)

    def erase(*args): return _pd.ObjectContainer_Monitor_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_Monitor_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_Monitor_element(*args)
ObjectContainer_Monitor_swigregister = _pd.ObjectContainer_Monitor_swigregister
ObjectContainer_Monitor_swigregister(ObjectContainer_Monitor)

class MonitorContainer(MonitorBase,ObjectContainer_Monitor):
    __swig_setmethods__ = {}
    for _s in [MonitorBase,ObjectContainer_Monitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MonitorContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase,ObjectContainer_Monitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonitorContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MonitorContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.MonitorContainer_clone(*args)
    def measure(*args): return _pd.MonitorContainer_measure(*args)
    def repeat(*args): return _pd.MonitorContainer_repeat(*args)
    def reset(*args): return _pd.MonitorContainer_reset(*args)
    def printHeader(*args): return _pd.MonitorContainer_printHeader(*args)
    def printCurData(*args): return _pd.MonitorContainer_printCurData(*args)
    def printAllData(*args): return _pd.MonitorContainer_printAllData(*args)
    def printAllDataParallel(*args): return _pd.MonitorContainer_printAllDataParallel(*args)
    __swig_destroy__ = _pd.delete_MonitorContainer
    __del__ = lambda self : None;
MonitorContainer_swigregister = _pd.MonitorContainer_swigregister
MonitorContainer_swigregister(MonitorContainer)

class ProtocolBase(Object,WorkSpaceOperatorBase):
    __swig_setmethods__ = {}
    for _s in [Object,WorkSpaceOperatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ProtocolBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,WorkSpaceOperatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProtocolBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.ProtocolBase_clone(*args)
    def run(*args): return _pd.ProtocolBase_run(*args)
    def runcore(*args): return _pd.ProtocolBase_runcore(*args)
    def info(*args): return _pd.ProtocolBase_info(*args)
    def listForcefields(*args): return _pd.ProtocolBase_listForcefields(*args)
    def printFinalStatistics(*args): return _pd.ProtocolBase_printFinalStatistics(*args)
    def addMonitor(*args): return _pd.ProtocolBase_addMonitor(*args)
    def clearMonitors(*args): return _pd.ProtocolBase_clearMonitors(*args)
    def popMonitor(*args): return _pd.ProtocolBase_popMonitor(*args)
    __swig_setmethods__["mon"] = _pd.ProtocolBase_mon_set
    __swig_getmethods__["mon"] = _pd.ProtocolBase_mon_get
    if _newclass:mon = _swig_property(_pd.ProtocolBase_mon_get, _pd.ProtocolBase_mon_set)
    def getFF(*args): return _pd.ProtocolBase_getFF(*args)
    __swig_setmethods__["UpdateScr"] = _pd.ProtocolBase_UpdateScr_set
    __swig_getmethods__["UpdateScr"] = _pd.ProtocolBase_UpdateScr_get
    if _newclass:UpdateScr = _swig_property(_pd.ProtocolBase_UpdateScr_get, _pd.ProtocolBase_UpdateScr_set)
    __swig_setmethods__["UpdateTra"] = _pd.ProtocolBase_UpdateTra_set
    __swig_getmethods__["UpdateTra"] = _pd.ProtocolBase_UpdateTra_get
    if _newclass:UpdateTra = _swig_property(_pd.ProtocolBase_UpdateTra_get, _pd.ProtocolBase_UpdateTra_set)
    __swig_setmethods__["UpdateMon"] = _pd.ProtocolBase_UpdateMon_set
    __swig_getmethods__["UpdateMon"] = _pd.ProtocolBase_UpdateMon_get
    if _newclass:UpdateMon = _swig_property(_pd.ProtocolBase_UpdateMon_get, _pd.ProtocolBase_UpdateMon_set)
    __swig_setmethods__["UpdateNList"] = _pd.ProtocolBase_UpdateNList_set
    __swig_getmethods__["UpdateNList"] = _pd.ProtocolBase_UpdateNList_get
    if _newclass:UpdateNList = _swig_property(_pd.ProtocolBase_UpdateNList_get, _pd.ProtocolBase_UpdateNList_set)
    __swig_setmethods__["OutputLevel"] = _pd.ProtocolBase_OutputLevel_set
    __swig_getmethods__["OutputLevel"] = _pd.ProtocolBase_OutputLevel_get
    if _newclass:OutputLevel = _swig_property(_pd.ProtocolBase_OutputLevel_get, _pd.ProtocolBase_OutputLevel_set)
    __swig_setmethods__["Steps"] = _pd.ProtocolBase_Steps_set
    __swig_getmethods__["Steps"] = _pd.ProtocolBase_Steps_get
    if _newclass:Steps = _swig_property(_pd.ProtocolBase_Steps_get, _pd.ProtocolBase_Steps_set)
    def setTargetTemp(*args): return _pd.ProtocolBase_setTargetTemp(*args)
    def getTargetTemp(*args): return _pd.ProtocolBase_getTargetTemp(*args)
    def infoLine(*args): return _pd.ProtocolBase_infoLine(*args)
    def infoLineHeader(*args): return _pd.ProtocolBase_infoLineHeader(*args)
    __swig_destroy__ = _pd.delete_ProtocolBase
    __del__ = lambda self : None;
ProtocolBase_swigregister = _pd.ProtocolBase_swigregister
ProtocolBase_swigregister(ProtocolBase)

class RangedProtocolBase(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RangedProtocolBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RangedProtocolBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getRange(*args): return _pd.RangedProtocolBase_getRange(*args)
    def setRange(*args): return _pd.RangedProtocolBase_setRange(*args)
    def setFullRange(*args): return _pd.RangedProtocolBase_setFullRange(*args)
    def getStartAtom(*args): return _pd.RangedProtocolBase_getStartAtom(*args)
    def getEndAtom(*args): return _pd.RangedProtocolBase_getEndAtom(*args)
    def getNAtoms(*args): return _pd.RangedProtocolBase_getNAtoms(*args)
    __swig_destroy__ = _pd.delete_RangedProtocolBase
    __del__ = lambda self : None;
RangedProtocolBase_swigregister = _pd.RangedProtocolBase_swigregister
RangedProtocolBase_swigregister(RangedProtocolBase)

class RangesProtocolBase(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RangesProtocolBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RangesProtocolBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getRanges(*args): return _pd.RangesProtocolBase_getRanges(*args)
    def setRange(*args): return _pd.RangesProtocolBase_setRange(*args)
    def setFullRange(*args): return _pd.RangesProtocolBase_setFullRange(*args)
    def getStartAtom(*args): return _pd.RangesProtocolBase_getStartAtom(*args)
    def getEndAtom(*args): return _pd.RangesProtocolBase_getEndAtom(*args)
    def getNAtoms(*args): return _pd.RangesProtocolBase_getNAtoms(*args)
    def getReversed(*args): return _pd.RangesProtocolBase_getReversed(*args)
    def getPickerSerial(*args): return _pd.RangesProtocolBase_getPickerSerial(*args)
    __swig_destroy__ = _pd.delete_RangesProtocolBase
    __del__ = lambda self : None;
RangesProtocolBase_swigregister = _pd.RangesProtocolBase_swigregister
RangesProtocolBase_swigregister(RangesProtocolBase)

class PickedProtocolBase(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PickedProtocolBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PickedProtocolBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setPicking(*args): return _pd.PickedProtocolBase_setPicking(*args)
    def setPickEverything(*args): return _pd.PickedProtocolBase_setPickEverything(*args)
    def getPicker(*args): return _pd.PickedProtocolBase_getPicker(*args)
    def getPosPointer(*args): return _pd.PickedProtocolBase_getPosPointer(*args)
    def getPickerSerial(*args): return _pd.PickedProtocolBase_getPickerSerial(*args)
    __swig_destroy__ = _pd.delete_PickedProtocolBase
    __del__ = lambda self : None;
PickedProtocolBase_swigregister = _pd.PickedProtocolBase_swigregister
PickedProtocolBase_swigregister(PickedProtocolBase)

every = _pd.every
class ObjectContainer_ProtocolBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_ProtocolBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_ProtocolBase, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_ProtocolBase_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_ProtocolBase
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_ProtocolBase_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_ProtocolBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_ProtocolBase_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_ProtocolBase_add(*args)

    def erase(*args): return _pd.ObjectContainer_ProtocolBase_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_ProtocolBase_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_ProtocolBase_element(*args)
ObjectContainer_ProtocolBase_swigregister = _pd.ObjectContainer_ProtocolBase_swigregister
ObjectContainer_ProtocolBase_swigregister(ObjectContainer_ProtocolBase)

class ProtocolSet(ProtocolBase,ObjectContainer_ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase,ObjectContainer_ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ProtocolSet, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase,ObjectContainer_ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProtocolSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ProtocolSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.ProtocolSet_clone(*args)
    def run(*args): return _pd.ProtocolSet_run(*args)
    def runcore(*args): return _pd.ProtocolSet_runcore(*args)
    def info(*args): return _pd.ProtocolSet_info(*args)
    def printFinalStatistics(*args): return _pd.ProtocolSet_printFinalStatistics(*args)
    def addMonitor(*args): return _pd.ProtocolSet_addMonitor(*args)
    def clearMonitors(*args): return _pd.ProtocolSet_clearMonitors(*args)
    def popMonitor(*args): return _pd.ProtocolSet_popMonitor(*args)
    def setTargetTemp(*args): return _pd.ProtocolSet_setTargetTemp(*args)
    def infoLine(*args): return _pd.ProtocolSet_infoLine(*args)
    def infoLineHeader(*args): return _pd.ProtocolSet_infoLineHeader(*args)
    __swig_destroy__ = _pd.delete_ProtocolSet
    __del__ = lambda self : None;
ProtocolSet_swigregister = _pd.ProtocolSet_swigregister
ProtocolSet_swigregister(ProtocolSet)

class MoveBase(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MoveBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoveBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_MoveBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.MoveBase_clone(*args)
    def apply(*args): return _pd.MoveBase_apply(*args)
    def test(*args): return _pd.MoveBase_test(*args)
    def getWspace(*args): return _pd.MoveBase_getWspace(*args)
MoveBase_swigregister = _pd.MoveBase_swigregister
MoveBase_swigregister(MoveBase)

class ObjectContainer_Move(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_Move, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_Move, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_Move_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_Move
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_Move_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_Move(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_Move_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_Move_add(*args)

    def erase(*args): return _pd.ObjectContainer_Move_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_Move_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_Move_element(*args)
ObjectContainer_Move_swigregister = _pd.ObjectContainer_Move_swigregister
ObjectContainer_Move_swigregister(ObjectContainer_Move)

class MoveSet(MoveBase,ObjectContainer_Move):
    __swig_setmethods__ = {}
    for _s in [MoveBase,ObjectContainer_Move]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MoveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase,ObjectContainer_Move]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoveSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MoveSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_MoveSet
    __del__ = lambda self : None;
    def clone(*args): return _pd.MoveSet_clone(*args)
    def apply(*args): return _pd.MoveSet_apply(*args)
MoveSet_swigregister = _pd.MoveSet_swigregister
MoveSet_swigregister(MoveSet)

class FilterBase(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FilterBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_FilterBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.FilterBase_clone(*args)
    def passes(*args): return _pd.FilterBase_passes(*args)
    def reason(*args): return _pd.FilterBase_reason(*args)
FilterBase_swigregister = _pd.FilterBase_swigregister
FilterBase_swigregister(FilterBase)

class MolFilterBase(FilterBase):
    __swig_setmethods__ = {}
    for _s in [FilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MolFilterBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MolFilterBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_MolFilterBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.MolFilterBase_clone(*args)
MolFilterBase_swigregister = _pd.MolFilterBase_swigregister
MolFilterBase_swigregister(MolFilterBase)

class ObjectContainer_Filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_Filter, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_Filter_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_Filter
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_Filter_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_Filter(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_Filter_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_Filter_add(*args)

    def erase(*args): return _pd.ObjectContainer_Filter_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_Filter_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_Filter_element(*args)
ObjectContainer_Filter_swigregister = _pd.ObjectContainer_Filter_swigregister
ObjectContainer_Filter_swigregister(ObjectContainer_Filter)

class FilterContainer(FilterBase,ObjectContainer_Filter):
    __swig_setmethods__ = {}
    for _s in [FilterBase,ObjectContainer_Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FilterContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterBase,ObjectContainer_Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FilterContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FilterContainer
    __del__ = lambda self : None;
    def clone(*args): return _pd.FilterContainer_clone(*args)
    def passes(*args): return _pd.FilterContainer_passes(*args)
    def reason(*args): return _pd.FilterContainer_reason(*args)
FilterContainer_swigregister = _pd.FilterContainer_swigregister
FilterContainer_swigregister(FilterContainer)

class BackboneTorsionSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackboneTorsionSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneTorsionSet, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_BackboneTorsionSet
    __del__ = lambda self : None;
    def finalise(*args): return _pd.BackboneTorsionSet_finalise(*args)
    def isInitialised(*args): return _pd.BackboneTorsionSet_isInitialised(*args)
    def isFinalised(*args): return _pd.BackboneTorsionSet_isFinalised(*args)
    def size(*args): return _pd.BackboneTorsionSet_size(*args)
    def getResName(*args): return _pd.BackboneTorsionSet_getResName(*args)
    def getResSingleID(*args): return _pd.BackboneTorsionSet_getResSingleID(*args)
    def getAngleClass(*args): return _pd.BackboneTorsionSet_getAngleClass(*args)
    def getAngleSetID(*args): return _pd.BackboneTorsionSet_getAngleSetID(*args)
    def getPhi(*args): return _pd.BackboneTorsionSet_getPhi(*args)
    def getPsi(*args): return _pd.BackboneTorsionSet_getPsi(*args)
    def getOmega(*args): return _pd.BackboneTorsionSet_getOmega(*args)
    def getPropensity(*args): return _pd.BackboneTorsionSet_getPropensity(*args)
    def getPhis(*args): return _pd.BackboneTorsionSet_getPhis(*args)
    def getPsis(*args): return _pd.BackboneTorsionSet_getPsis(*args)
    def getOmegas(*args): return _pd.BackboneTorsionSet_getOmegas(*args)
    def getClosestAngleGroup(*args): return _pd.BackboneTorsionSet_getClosestAngleGroup(*args)
    def info(*args): return _pd.BackboneTorsionSet_info(*args)
BackboneTorsionSet_swigregister = _pd.BackboneTorsionSet_swigregister
BackboneTorsionSet_swigregister(BackboneTorsionSet)

class BackboneTorsionLibrary(BackboneTorsionSet):
    __swig_setmethods__ = {}
    for _s in [BackboneTorsionSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackboneTorsionLibrary, name, value)
    __swig_getmethods__ = {}
    for _s in [BackboneTorsionSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneTorsionLibrary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BackboneTorsionLibrary(*args)
        try: self.this.append(this)
        except: self.this = this
    def finalise(*args): return _pd.BackboneTorsionLibrary_finalise(*args)
    def init(*args): return _pd.BackboneTorsionLibrary_init(*args)
    def addAngleGroup(*args): return _pd.BackboneTorsionLibrary_addAngleGroup(*args)
    __swig_destroy__ = _pd.delete_BackboneTorsionLibrary
    __del__ = lambda self : None;
BackboneTorsionLibrary_swigregister = _pd.BackboneTorsionLibrary_swigregister
BackboneTorsionLibrary_swigregister(BackboneTorsionLibrary)

class BackboneTorsionSubSet(BackboneTorsionSet):
    __swig_setmethods__ = {}
    for _s in [BackboneTorsionSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackboneTorsionSubSet, name, value)
    __swig_getmethods__ = {}
    for _s in [BackboneTorsionSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneTorsionSubSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BackboneTorsionSubSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def finalise(*args): return _pd.BackboneTorsionSubSet_finalise(*args)
    def init(*args): return _pd.BackboneTorsionSubSet_init(*args)
    def addAngleGroup(*args): return _pd.BackboneTorsionSubSet_addAngleGroup(*args)
    def libSize(*args): return _pd.BackboneTorsionSubSet_libSize(*args)
    __swig_destroy__ = _pd.delete_BackboneTorsionSubSet
    __del__ = lambda self : None;
BackboneTorsionSubSet_swigregister = _pd.BackboneTorsionSubSet_swigregister
BackboneTorsionSubSet_swigregister(BackboneTorsionSubSet)

class AngleSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AngleSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngleSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_AngleSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def loadFromFile(*args): return _pd.AngleSet_loadFromFile(*args)
    def clear(*args): return _pd.AngleSet_clear(*args)
    def info(*args): return _pd.AngleSet_info(*args)
    def getIsDefined(*args): return _pd.AngleSet_getIsDefined(*args)
    def isInitialised(*args): return _pd.AngleSet_isInitialised(*args)
    def size(*args): return _pd.AngleSet_size(*args)
    def getResidueIDs(*args): return _pd.AngleSet_getResidueIDs(*args)
    def getBackboneTorsionSet(*args): return _pd.AngleSet_getBackboneTorsionSet(*args)
    def getClosestAngleGroup(*args): return _pd.AngleSet_getClosestAngleGroup(*args)
    __swig_getmethods__["EnsureRadianRange"] = lambda x: _pd.AngleSet_EnsureRadianRange
    if _newclass:EnsureRadianRange = staticmethod(_pd.AngleSet_EnsureRadianRange)
    __swig_destroy__ = _pd.delete_AngleSet
    __del__ = lambda self : None;
AngleSet_swigregister = _pd.AngleSet_swigregister
AngleSet_swigregister(AngleSet)
AngleSet_EnsureRadianRange = _pd.AngleSet_EnsureRadianRange

Polypeptide = _pd.Polypeptide
DNA = _pd.DNA
RNA = _pd.RNA
SmallMolecule = _pd.SmallMolecule
Water = _pd.Water
Ion = _pd.Ion
Carbohydrate = _pd.Carbohydrate
isPolymerClass = _pd.isPolymerClass
getResidueClassString = _pd.getResidueClassString
Solvent = _pd.Solvent
Nucleotide = _pd.Nucleotide
AllExceptSolvent = _pd.AllExceptSolvent
AllClasses = _pd.AllClasses
class PrePostFix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PrePostFix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrePostFix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PrePostFix(*args)
        try: self.this.append(this)
        except: self.this = this
    def build(*args): return _pd.PrePostFix_build(*args)
    def isDefined(*args): return _pd.PrePostFix_isDefined(*args)
    __swig_setmethods__["fix"] = _pd.PrePostFix_fix_set
    __swig_getmethods__["fix"] = _pd.PrePostFix_fix_get
    if _newclass:fix = _swig_property(_pd.PrePostFix_fix_get, _pd.PrePostFix_fix_set)
    __swig_setmethods__["isPost"] = _pd.PrePostFix_isPost_set
    __swig_getmethods__["isPost"] = _pd.PrePostFix_isPost_get
    if _newclass:isPost = _swig_property(_pd.PrePostFix_isPost_get, _pd.PrePostFix_isPost_set)
    __swig_destroy__ = _pd.delete_PrePostFix
    __del__ = lambda self : None;
PrePostFix_swigregister = _pd.PrePostFix_swigregister
PrePostFix_swigregister(PrePostFix)
ResidueClassCount = cvar.ResidueClassCount
PrePostFix.NoFix = _pd.cvar.PrePostFix_NoFix

class ResidueClassDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ResidueClassDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueClassDef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ResidueClassDef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _pd.ResidueClassDef_getName(*args)
    def contains(*args): return _pd.ResidueClassDef_contains(*args)
    def containsCap(*args): return _pd.ResidueClassDef_containsCap(*args)
    __swig_destroy__ = _pd.delete_ResidueClassDef
    __del__ = lambda self : None;
ResidueClassDef_swigregister = _pd.ResidueClassDef_swigregister
ResidueClassDef_swigregister(ResidueClassDef)

class ClassMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ClassMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ClassMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def isOfClass(*args): return _pd.ClassMapper_isOfClass(*args)
    def getClassString(*args): return _pd.ClassMapper_getClassString(*args)
    def getStartTerminusFromResidue(*args): return _pd.ClassMapper_getStartTerminusFromResidue(*args)
    def getEndTerminusFromResidue(*args): return _pd.ClassMapper_getEndTerminusFromResidue(*args)
    def getStartTerminusFromClass(*args): return _pd.ClassMapper_getStartTerminusFromClass(*args)
    def getEndTerminusFromClass(*args): return _pd.ClassMapper_getEndTerminusFromClass(*args)
    def detectSplitRequirement(*args): return _pd.ClassMapper_detectSplitRequirement(*args)
    def setClassMapperTermini(*args): return _pd.ClassMapper_setClassMapperTermini(*args)
    def addClassCap(*args): return _pd.ClassMapper_addClassCap(*args)
    def addClassMember(*args): return _pd.ClassMapper_addClassMember(*args)
    __swig_destroy__ = _pd.delete_ClassMapper
    __del__ = lambda self : None;
ClassMapper_swigregister = _pd.ClassMapper_swigregister
ClassMapper_swigregister(ClassMapper)

class AliasMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AliasMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AliasMapper, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_AliasMapper
    __del__ = lambda self : None;
    def lookupLongName(*args): return _pd.AliasMapper_lookupLongName(*args)
    def lookupShortName(*args): return _pd.AliasMapper_lookupShortName(*args)
    def lookupAlias(*args): return _pd.AliasMapper_lookupAlias(*args)
AliasMapper_swigregister = _pd.AliasMapper_swigregister
AliasMapper_swigregister(AliasMapper)

class AliasMapperCollection(AliasMapper):
    __swig_setmethods__ = {}
    for _s in [AliasMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AliasMapperCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [AliasMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AliasMapperCollection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_AliasMapperCollection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_AliasMapperCollection
    __del__ = lambda self : None;
    def addAliasMapper(*args): return _pd.AliasMapperCollection_addAliasMapper(*args)
    def lookupLongName(*args): return _pd.AliasMapperCollection_lookupLongName(*args)
    def lookupShortName(*args): return _pd.AliasMapperCollection_lookupShortName(*args)
    def lookupAlias(*args): return _pd.AliasMapperCollection_lookupAlias(*args)
AliasMapperCollection_swigregister = _pd.AliasMapperCollection_swigregister
AliasMapperCollection_swigregister(AliasMapperCollection)

class CustomAliasMapper(AliasMapper):
    __swig_setmethods__ = {}
    for _s in [AliasMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CustomAliasMapper, name, value)
    __swig_getmethods__ = {}
    for _s in [AliasMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomAliasMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_CustomAliasMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_CustomAliasMapper
    __del__ = lambda self : None;
    def addNameSet(*args): return _pd.CustomAliasMapper_addNameSet(*args)
    def addAlias(*args): return _pd.CustomAliasMapper_addAlias(*args)
    def lookupLongName(*args): return _pd.CustomAliasMapper_lookupLongName(*args)
    def lookupShortName(*args): return _pd.CustomAliasMapper_lookupShortName(*args)
    def lookupAlias(*args): return _pd.CustomAliasMapper_lookupAlias(*args)
CustomAliasMapper_swigregister = _pd.CustomAliasMapper_swigregister
CustomAliasMapper_swigregister(CustomAliasMapper)

class ResidueAliasDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ResidueAliasDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueAliasDefinition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ResidueAliasDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(*args): return _pd.ResidueAliasDefinition___eq__(*args)
    def set(*args): return _pd.ResidueAliasDefinition_set(*args)
    def cmpAlias(*args): return _pd.ResidueAliasDefinition_cmpAlias(*args)
    def getAlias(*args): return _pd.ResidueAliasDefinition_getAlias(*args)
    def getName(*args): return _pd.ResidueAliasDefinition_getName(*args)
    __swig_destroy__ = _pd.delete_ResidueAliasDefinition
    __del__ = lambda self : None;
ResidueAliasDefinition_swigregister = _pd.ResidueAliasDefinition_swigregister
ResidueAliasDefinition_swigregister(ResidueAliasDefinition)

PDB = _pd.PDB
XPLOR = _pd.XPLOR
AMBER = _pd.AMBER
class ResidueNameSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ResidueNameSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueNameSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ResidueNameSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ResidueNameSet
    __del__ = lambda self : None;
    def findAtomName(*args): return _pd.ResidueNameSet_findAtomName(*args)
    def findAtomIndex(*args): return _pd.ResidueNameSet_findAtomIndex(*args)
    def size(*args): return _pd.ResidueNameSet_size(*args)
    def getName(*args): return _pd.ResidueNameSet_getName(*args)
    def getSingleLetter(*args): return _pd.ResidueNameSet_getSingleLetter(*args)
    def getLongName(*args): return _pd.ResidueNameSet_getLongName(*args)
ResidueNameSet_swigregister = _pd.ResidueNameSet_swigregister
ResidueNameSet_swigregister(ResidueNameSet)
NAME_SET_COUNT = cvar.NAME_SET_COUNT
NAME_SET_DEPTH = cvar.NAME_SET_DEPTH

class NameSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NameSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NameSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(*args): return _pd.NameSet_getName(*args)
    def getDescription(*args): return _pd.NameSet_getDescription(*args)
    def findResidueDef(*args): return _pd.NameSet_findResidueDef(*args)
    def findResidueName(*args): return _pd.NameSet_findResidueName(*args)
    def findResidueIndex(*args): return _pd.NameSet_findResidueIndex(*args)
    def findAtomIndex(*args): return _pd.NameSet_findAtomIndex(*args)
    def findAtomName(*args): return _pd.NameSet_findAtomName(*args)
    def size(*args): return _pd.NameSet_size(*args)
    __swig_destroy__ = _pd.delete_NameSet
    __del__ = lambda self : None;
NameSet_swigregister = _pd.NameSet_swigregister
NameSet_swigregister(NameSet)

class NamingConventions(AliasMapper,ClassMapper):
    __swig_setmethods__ = {}
    for _s in [AliasMapper,ClassMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NamingConventions, name, value)
    __swig_getmethods__ = {}
    for _s in [AliasMapper,ClassMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NamingConventions, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getSingleton"] = lambda x: _pd.NamingConventions_getSingleton
    if _newclass:getSingleton = staticmethod(_pd.NamingConventions_getSingleton)
    def __init__(self, *args): 
        this = _pd.new_NamingConventions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NamingConventions
    __del__ = lambda self : None;
    def printNaming(*args): return _pd.NamingConventions_printNaming(*args)
    def size(*args): return _pd.NamingConventions_size(*args)
    def extendNameSets(*args): return _pd.NamingConventions_extendNameSets(*args)
    def findNameSet(*args): return _pd.NamingConventions_findNameSet(*args)
    def findAtomName(*args): return _pd.NamingConventions_findAtomName(*args)
    def lookupLongName(*args): return _pd.NamingConventions_lookupLongName(*args)
    def lookupShortName(*args): return _pd.NamingConventions_lookupShortName(*args)
    def lookupAlias(*args): return _pd.NamingConventions_lookupAlias(*args)
NamingConventions_swigregister = _pd.NamingConventions_swigregister
NamingConventions_swigregister(NamingConventions)
NamingConventions_getSingleton = _pd.NamingConventions_getSingleton

WriteCartesian = _pd.WriteCartesian
WriteTorsional = _pd.WriteTorsional
WriteOriginal = _pd.WriteOriginal
class ConventionDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ConventionDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConventionDef, name)
    __repr__ = _swig_repr
    __swig_setmethods__["resName"] = _pd.ConventionDef_resName_set
    __swig_getmethods__["resName"] = _pd.ConventionDef_resName_get
    if _newclass:resName = _swig_property(_pd.ConventionDef_resName_get, _pd.ConventionDef_resName_set)
    __swig_setmethods__["a1"] = _pd.ConventionDef_a1_set
    __swig_getmethods__["a1"] = _pd.ConventionDef_a1_get
    if _newclass:a1 = _swig_property(_pd.ConventionDef_a1_get, _pd.ConventionDef_a1_set)
    __swig_setmethods__["a2"] = _pd.ConventionDef_a2_set
    __swig_getmethods__["a2"] = _pd.ConventionDef_a2_get
    if _newclass:a2 = _swig_property(_pd.ConventionDef_a2_get, _pd.ConventionDef_a2_set)
    __swig_setmethods__["a3"] = _pd.ConventionDef_a3_set
    __swig_getmethods__["a3"] = _pd.ConventionDef_a3_get
    if _newclass:a3 = _swig_property(_pd.ConventionDef_a3_get, _pd.ConventionDef_a3_set)
    __swig_setmethods__["chi"] = _pd.ConventionDef_chi_set
    __swig_getmethods__["chi"] = _pd.ConventionDef_chi_get
    if _newclass:chi = _swig_property(_pd.ConventionDef_chi_get, _pd.ConventionDef_chi_set)
    def __init__(self, *args): 
        this = _pd.new_ConventionDef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ConventionDef
    __del__ = lambda self : None;
ConventionDef_swigregister = _pd.ConventionDef_swigregister
ConventionDef_swigregister(ConventionDef)

class RotConvention(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotConvention, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotConvention, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotConvention(*args)
        try: self.this.append(this)
        except: self.this = this
    def anchorAtomType(*args): return _pd.RotConvention_anchorAtomType(*args)
    def addConvention(*args): return _pd.RotConvention_addConvention(*args)
    def findConvention(*args): return _pd.RotConvention_findConvention(*args)
    def getConvention(*args): return _pd.RotConvention_getConvention(*args)
    def clear(*args): return _pd.RotConvention_clear(*args)
    def setToDefaultConvention(*args): return _pd.RotConvention_setToDefaultConvention(*args)
    __swig_setmethods__["CBIsThirdDefaultAnchor"] = _pd.RotConvention_CBIsThirdDefaultAnchor_set
    __swig_getmethods__["CBIsThirdDefaultAnchor"] = _pd.RotConvention_CBIsThirdDefaultAnchor_get
    if _newclass:CBIsThirdDefaultAnchor = _swig_property(_pd.RotConvention_CBIsThirdDefaultAnchor_get, _pd.RotConvention_CBIsThirdDefaultAnchor_set)
    __swig_destroy__ = _pd.delete_RotConvention
    __del__ = lambda self : None;
RotConvention_swigregister = _pd.RotConvention_swigregister
RotConvention_swigregister(RotConvention)

class RotLibConvertBase(RotConvention):
    __swig_setmethods__ = {}
    for _s in [RotConvention]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotLibConvertBase, name, value)
    __swig_getmethods__ = {}
    for _s in [RotConvention]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotLibConvertBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_RotLibConvertBase
    __del__ = lambda self : None;
RotLibConvertBase_swigregister = _pd.RotLibConvertBase_swigregister
RotLibConvertBase_swigregister(RotLibConvertBase)

class RotLibConvert_PD(RotLibConvertBase):
    __swig_setmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotLibConvert_PD, name, value)
    __swig_getmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotLibConvert_PD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotLibConvert_PD(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotLibConvert_PD
    __del__ = lambda self : None;
RotLibConvert_PD_swigregister = _pd.RotLibConvert_PD_swigregister
RotLibConvert_PD_swigregister(RotLibConvert_PD)

class RotLibConvert_OldPDFormat(RotLibConvertBase):
    __swig_setmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotLibConvert_OldPDFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotLibConvert_OldPDFormat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotLibConvert_OldPDFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotLibConvert_OldPDFormat
    __del__ = lambda self : None;
RotLibConvert_OldPDFormat_swigregister = _pd.RotLibConvert_OldPDFormat_swigregister
RotLibConvert_OldPDFormat_swigregister(RotLibConvert_OldPDFormat)

class RotamerAtom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerAtom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerAtom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotamerAtom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["Name"] = _pd.RotamerAtom_Name_set
    __swig_getmethods__["Name"] = _pd.RotamerAtom_Name_get
    if _newclass:Name = _swig_property(_pd.RotamerAtom_Name_get, _pd.RotamerAtom_Name_set)
    __swig_setmethods__["IdealPos"] = _pd.RotamerAtom_IdealPos_set
    __swig_getmethods__["IdealPos"] = _pd.RotamerAtom_IdealPos_get
    if _newclass:IdealPos = _swig_property(_pd.RotamerAtom_IdealPos_get, _pd.RotamerAtom_IdealPos_set)
    __swig_setmethods__["Defined"] = _pd.RotamerAtom_Defined_set
    __swig_getmethods__["Defined"] = _pd.RotamerAtom_Defined_get
    if _newclass:Defined = _swig_property(_pd.RotamerAtom_Defined_get, _pd.RotamerAtom_Defined_set)
    __swig_setmethods__["IsHydrogen"] = _pd.RotamerAtom_IsHydrogen_set
    __swig_getmethods__["IsHydrogen"] = _pd.RotamerAtom_IsHydrogen_get
    if _newclass:IsHydrogen = _swig_property(_pd.RotamerAtom_IsHydrogen_get, _pd.RotamerAtom_IsHydrogen_set)
    __swig_destroy__ = _pd.delete_RotamerAtom
    __del__ = lambda self : None;
RotamerAtom_swigregister = _pd.RotamerAtom_swigregister
RotamerAtom_swigregister(RotamerAtom)

class RotamerChi(StringQuartet):
    __swig_setmethods__ = {}
    for _s in [StringQuartet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerChi, name, value)
    __swig_getmethods__ = {}
    for _s in [StringQuartet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerChi, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotamerChi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["rot"] = _pd.RotamerChi_rot_set
    __swig_getmethods__["rot"] = _pd.RotamerChi_rot_get
    if _newclass:rot = _swig_property(_pd.RotamerChi_rot_get, _pd.RotamerChi_rot_set)
    __swig_destroy__ = _pd.delete_RotamerChi
    __del__ = lambda self : None;
RotamerChi_swigregister = _pd.RotamerChi_swigregister
RotamerChi_swigregister(RotamerChi)

class BackboneScope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackboneScope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneScope, name)
    __repr__ = _swig_repr
    Undefined = _pd.BackboneScope_Undefined
    Alpha = _pd.BackboneScope_Alpha
    Beta = _pd.BackboneScope_Beta
    LeftAlpha = _pd.BackboneScope_LeftAlpha
    Specific = _pd.BackboneScope_Specific
    def __init__(self, *args): 
        this = _pd.new_BackboneScope(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(*args): return _pd.BackboneScope_set(*args)
    def setSpecific(*args): return _pd.BackboneScope_setSpecific(*args)
    def isInRange(*args): return _pd.BackboneScope_isInRange(*args)
    def getPhi(*args): return _pd.BackboneScope_getPhi(*args)
    def getPsi(*args): return _pd.BackboneScope_getPsi(*args)
    def getScopeID(*args): return _pd.BackboneScope_getScopeID(*args)
    def toString(*args): return _pd.BackboneScope_toString(*args)
    def parseString(*args): return _pd.BackboneScope_parseString(*args)
    __swig_destroy__ = _pd.delete_BackboneScope
    __del__ = lambda self : None;
BackboneScope_swigregister = _pd.BackboneScope_swigregister
BackboneScope_swigregister(BackboneScope)
BackboneScope.PhiAplpha = _pd.cvar.BackboneScope_PhiAplpha
BackboneScope.PsiAplpha = _pd.cvar.BackboneScope_PsiAplpha
BackboneScope.PhiBeta = _pd.cvar.BackboneScope_PhiBeta
BackboneScope.PsiBeta = _pd.cvar.BackboneScope_PsiBeta
BackboneScope.PhiLAplpha = _pd.cvar.BackboneScope_PhiLAplpha
BackboneScope.PsiLAplpha = _pd.cvar.BackboneScope_PsiLAplpha

class ProbabilityBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ProbabilityBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_ProbabilityBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.ProbabilityBase_clone(*args)
    def clear(*args): return _pd.ProbabilityBase_clear(*args)
    def toStream(*args): return _pd.ProbabilityBase_toStream(*args)
    def fromStream(*args): return _pd.ProbabilityBase_fromStream(*args)
    def toScreen(*args): return _pd.ProbabilityBase_toScreen(*args)
    def probability(*args): return _pd.ProbabilityBase_probability(*args)
ProbabilityBase_swigregister = _pd.ProbabilityBase_swigregister
ProbabilityBase_swigregister(ProbabilityBase)

class ConstantProbability(ProbabilityBase):
    __swig_setmethods__ = {}
    for _s in [ProbabilityBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ConstantProbability, name, value)
    __swig_getmethods__ = {}
    for _s in [ProbabilityBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantProbability, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ConstantProbability(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.ConstantProbability_clone(*args)
    def setProbability(*args): return _pd.ConstantProbability_setProbability(*args)
    def clear(*args): return _pd.ConstantProbability_clear(*args)
    def toStream(*args): return _pd.ConstantProbability_toStream(*args)
    def fromStream(*args): return _pd.ConstantProbability_fromStream(*args)
    def probability(*args): return _pd.ConstantProbability_probability(*args)
    __swig_destroy__ = _pd.delete_ConstantProbability
    __del__ = lambda self : None;
ConstantProbability_swigregister = _pd.ConstantProbability_swigregister
ConstantProbability_swigregister(ConstantProbability)

class ProbabilityByBBScope(ConstantProbability):
    __swig_setmethods__ = {}
    for _s in [ConstantProbability]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ProbabilityByBBScope, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstantProbability]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityByBBScope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ProbabilityByBBScope(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.ProbabilityByBBScope_clone(*args)
    def toStream(*args): return _pd.ProbabilityByBBScope_toStream(*args)
    def fromStream(*args): return _pd.ProbabilityByBBScope_fromStream(*args)
    def probability(*args): return _pd.ProbabilityByBBScope_probability(*args)
    __swig_destroy__ = _pd.delete_ProbabilityByBBScope
    __del__ = lambda self : None;
ProbabilityByBBScope_swigregister = _pd.ProbabilityByBBScope_swigregister
ProbabilityByBBScope_swigregister(ProbabilityByBBScope)

class ProbabilityByPhiPsiMap(ProbabilityBase):
    __swig_setmethods__ = {}
    for _s in [ProbabilityBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ProbabilityByPhiPsiMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ProbabilityBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProbabilityByPhiPsiMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ProbabilityByPhiPsiMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _pd.ProbabilityByPhiPsiMap_clear(*args)
    def clone(*args): return _pd.ProbabilityByPhiPsiMap_clone(*args)
    def toStream(*args): return _pd.ProbabilityByPhiPsiMap_toStream(*args)
    def fromStream(*args): return _pd.ProbabilityByPhiPsiMap_fromStream(*args)
    def probability(*args): return _pd.ProbabilityByPhiPsiMap_probability(*args)
    def setTo(*args): return _pd.ProbabilityByPhiPsiMap_setTo(*args)
    def assignFrom(*args): return _pd.ProbabilityByPhiPsiMap_assignFrom(*args)
    def numAssignments(*args): return _pd.ProbabilityByPhiPsiMap_numAssignments(*args)
    __swig_destroy__ = _pd.delete_ProbabilityByPhiPsiMap
    __del__ = lambda self : None;
ProbabilityByPhiPsiMap_swigregister = _pd.ProbabilityByPhiPsiMap_swigregister
ProbabilityByPhiPsiMap_swigregister(ProbabilityByPhiPsiMap)

class Rotamer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Rotamer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rotamer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Rotamer(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPos(*args): return _pd.Rotamer_getPos(*args)
    def getChi(*args): return _pd.Rotamer_getChi(*args)
    def nAtom(*args): return _pd.Rotamer_nAtom(*args)
    def nChi(*args): return _pd.Rotamer_nChi(*args)
    def getProbMap(*args): return _pd.Rotamer_getProbMap(*args)
    def getSource(*args): return _pd.Rotamer_getSource(*args)
    def info(*args): return _pd.Rotamer_info(*args)
    def setProbMap(*args): return _pd.Rotamer_setProbMap(*args)
    __swig_destroy__ = _pd.delete_Rotamer
    __del__ = lambda self : None;
Rotamer_swigregister = _pd.Rotamer_swigregister
Rotamer_swigregister(Rotamer)

class RotamerSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerSet, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getName(*args): return _pd.RotamerSet_getName(*args)
    def nAtom(*args): return _pd.RotamerSet_nAtom(*args)
    def nRot(*args): return _pd.RotamerSet_nRot(*args)
    def getRotamer(*args): return _pd.RotamerSet_getRotamer(*args)
    def getCartesianAnchorRot1(*args): return _pd.RotamerSet_getCartesianAnchorRot1(*args)
    def getCartesianAnchorRot2(*args): return _pd.RotamerSet_getCartesianAnchorRot2(*args)
    def getCartesianAnchorRot3(*args): return _pd.RotamerSet_getCartesianAnchorRot3(*args)
    def getAtoms(*args): return _pd.RotamerSet_getAtoms(*args)
    def getChis(*args): return _pd.RotamerSet_getChis(*args)
    def usesAltnames(*args): return _pd.RotamerSet_usesAltnames(*args)
    def searchAtomName(*args): return _pd.RotamerSet_searchAtomName(*args)
    def closestRotamer(*args): return _pd.RotamerSet_closestRotamer(*args)
    def calcAtomIndexMap(*args): return _pd.RotamerSet_calcAtomIndexMap(*args)
    def applyRotamerCartesian(*args): return _pd.RotamerSet_applyRotamerCartesian(*args)
    def calcTorsionalScope_FF(*args): return _pd.RotamerSet_calcTorsionalScope_FF(*args)
    def calcTorsionalScope_Rot(*args): return _pd.RotamerSet_calcTorsionalScope_Rot(*args)
    def applyRotamerTorsional(*args): return _pd.RotamerSet_applyRotamerTorsional(*args)
    def applyFFIdealised(*args): return _pd.RotamerSet_applyFFIdealised(*args)
    __swig_destroy__ = _pd.delete_RotamerSet
    __del__ = lambda self : None;
RotamerSet_swigregister = _pd.RotamerSet_swigregister
RotamerSet_swigregister(RotamerSet)

class RotamerLibrary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerLibrary, name)
    __repr__ = _swig_repr
    Hydrogens = _pd.RotamerLibrary_Hydrogens
    NoRebuild = _pd.RotamerLibrary_NoRebuild
    __swig_setmethods__["RebuildTollerance"] = _pd.RotamerLibrary_RebuildTollerance_set
    __swig_getmethods__["RebuildTollerance"] = _pd.RotamerLibrary_RebuildTollerance_get
    if _newclass:RebuildTollerance = _swig_property(_pd.RotamerLibrary_RebuildTollerance_get, _pd.RotamerLibrary_RebuildTollerance_set)
    def __init__(self, *args): 
        this = _pd.new_RotamerLibrary(*args)
        try: self.this.append(this)
        except: self.this = this
    def readLib(*args): return _pd.RotamerLibrary_readLib(*args)
    def convertLib(*args): return _pd.RotamerLibrary_convertLib(*args)
    def writeLib(*args): return _pd.RotamerLibrary_writeLib(*args)
    def writePDB(*args): return _pd.RotamerLibrary_writePDB(*args)
    def info(*args): return _pd.RotamerLibrary_info(*args)
    def size(*args): return _pd.RotamerLibrary_size(*args)
    def isFinalised(*args): return _pd.RotamerLibrary_isFinalised(*args)
    def useAltNames(*args): return _pd.RotamerLibrary_useAltNames(*args)
    def autoFinalise(*args): return _pd.RotamerLibrary_autoFinalise(*args)
    def finalise(*args): return _pd.RotamerLibrary_finalise(*args)
    def clear(*args): return _pd.RotamerLibrary_clear(*args)
    def addIonisationAlias(*args): return _pd.RotamerLibrary_addIonisationAlias(*args)
    def clearIonisationAliases(*args): return _pd.RotamerLibrary_clearIonisationAliases(*args)
    def addIonisationAliasWorkingDefaults(*args): return _pd.RotamerLibrary_addIonisationAliasWorkingDefaults(*args)
    def addAsBlankRotamer(*args): return _pd.RotamerLibrary_addAsBlankRotamer(*args)
    def addRotamer(*args): return _pd.RotamerLibrary_addRotamer(*args)
    def getIonMaps(*args): return _pd.RotamerLibrary_getIonMaps(*args)
    def getIDForResidue(*args): return _pd.RotamerLibrary_getIDForResidue(*args)
    def nRotIn(*args): return _pd.RotamerLibrary_nRotIn(*args)
    def nRot(*args): return _pd.RotamerLibrary_nRot(*args)
    def getRotamerSet(*args): return _pd.RotamerLibrary_getRotamerSet(*args)
    def overrideConventions(*args): return _pd.RotamerLibrary_overrideConventions(*args)
    def setDefaultConventions(*args): return _pd.RotamerLibrary_setDefaultConventions(*args)
    __swig_destroy__ = _pd.delete_RotamerLibrary
    __del__ = lambda self : None;
RotamerLibrary_swigregister = _pd.RotamerLibrary_swigregister
RotamerLibrary_swigregister(RotamerLibrary)

class RotLibConvert_Dunbrack_BBInd(RotLibConvertBase):
    __swig_setmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotLibConvert_Dunbrack_BBInd, name, value)
    __swig_getmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotLibConvert_Dunbrack_BBInd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotLibConvert_Dunbrack_BBInd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotLibConvert_Dunbrack_BBInd
    __del__ = lambda self : None;
RotLibConvert_Dunbrack_BBInd_swigregister = _pd.RotLibConvert_Dunbrack_BBInd_swigregister
RotLibConvert_Dunbrack_BBInd_swigregister(RotLibConvert_Dunbrack_BBInd)

class RotLibConvert_Dunbrack_BBDep(RotLibConvertBase):
    __swig_setmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotLibConvert_Dunbrack_BBDep, name, value)
    __swig_getmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotLibConvert_Dunbrack_BBDep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotLibConvert_Dunbrack_BBDep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["switchImportMode"] = _pd.RotLibConvert_Dunbrack_BBDep_switchImportMode_set
    __swig_getmethods__["switchImportMode"] = _pd.RotLibConvert_Dunbrack_BBDep_switchImportMode_get
    if _newclass:switchImportMode = _swig_property(_pd.RotLibConvert_Dunbrack_BBDep_switchImportMode_get, _pd.RotLibConvert_Dunbrack_BBDep_switchImportMode_set)
    __swig_destroy__ = _pd.delete_RotLibConvert_Dunbrack_BBDep
    __del__ = lambda self : None;
RotLibConvert_Dunbrack_BBDep_swigregister = _pd.RotLibConvert_Dunbrack_BBDep_swigregister
RotLibConvert_Dunbrack_BBDep_swigregister(RotLibConvert_Dunbrack_BBDep)

class RotLibConvert_Shetty(RotLibConvertBase):
    __swig_setmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotLibConvert_Shetty, name, value)
    __swig_getmethods__ = {}
    for _s in [RotLibConvertBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotLibConvert_Shetty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotLibConvert_Shetty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotLibConvert_Shetty
    __del__ = lambda self : None;
RotLibConvert_Shetty_swigregister = _pd.RotLibConvert_Shetty_swigregister
RotLibConvert_Shetty_swigregister(RotLibConvert_Shetty)

class BioSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BioSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BioSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def isEqual(*args): return _pd.BioSource_isEqual(*args)
    def setTo(*args): return _pd.BioSource_setTo(*args)
    def getBiologicalIndex(*args): return _pd.BioSource_getBiologicalIndex(*args)
    def getBiologicalICode(*args): return _pd.BioSource_getBiologicalICode(*args)
    def getResName(*args): return _pd.BioSource_getResName(*args)
    __swig_destroy__ = _pd.delete_BioSource
    __del__ = lambda self : None;
BioSource_swigregister = _pd.BioSource_swigregister
BioSource_swigregister(BioSource)

class ResidueInfo(BioSource):
    __swig_setmethods__ = {}
    for _s in [BioSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ResidueInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [BioSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResidueInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ResidueInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTo(*args): return _pd.ResidueInfo_setTo(*args)
    def setPrefix(*args): return _pd.ResidueInfo_setPrefix(*args)
    def getPrefix(*args): return _pd.ResidueInfo_getPrefix(*args)
    def ForceRename(*args): return _pd.ResidueInfo_ForceRename(*args)
    def isEqual(*args): return _pd.ResidueInfo_isEqual(*args)
    def getSingleResLetter(*args): return _pd.ResidueInfo_getSingleResLetter(*args)
    def getResidueType(*args): return _pd.ResidueInfo_getResidueType(*args)
    def getSequentialIndex(*args): return _pd.ResidueInfo_getSequentialIndex(*args)
    def getFullName(*args): return _pd.ResidueInfo_getFullName(*args)
    __swig_destroy__ = _pd.delete_ResidueInfo
    __del__ = lambda self : None;
ResidueInfo_swigregister = _pd.ResidueInfo_swigregister
ResidueInfo_swigregister(ResidueInfo)

class BioSequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BioSequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioSequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BioSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def compare(*args): return _pd.BioSequence_compare(*args)
    def setNamingException(*args): return _pd.BioSequence_setNamingException(*args)
    def setPrefix(*args): return _pd.BioSequence_setPrefix(*args)
    def removeAllPrefixes(*args): return _pd.BioSequence_removeAllPrefixes(*args)
    def setChainID(*args): return _pd.BioSequence_setChainID(*args)
    def getChainID(*args): return _pd.BioSequence_getChainID(*args)
    def setTo(*args): return _pd.BioSequence_setTo(*args)
    def append(*args): return _pd.BioSequence_append(*args)
    def reSequence(*args): return _pd.BioSequence_reSequence(*args)
    def erase(*args): return _pd.BioSequence_erase(*args)
    def clear(*args): return _pd.BioSequence_clear(*args)
    def printToScreen(*args): return _pd.BioSequence_printToScreen(*args)
    def printToBuffer(*args): return _pd.BioSequence_printToBuffer(*args)
    def printToString(*args): return _pd.BioSequence_printToString(*args)
    def printToStringSingle(*args): return _pd.BioSequence_printToStringSingle(*args)
    def makeResidueStrings(*args): return _pd.BioSequence_makeResidueStrings(*args)
    def makeSubSequence(*args): return _pd.BioSequence_makeSubSequence(*args)
    def size(*args): return _pd.BioSequence_size(*args)
    def getFullName(*args): return _pd.BioSequence_getFullName(*args)
    def getResName(*args): return _pd.BioSequence_getResName(*args)
    def getSingleResLetter(*args): return _pd.BioSequence_getSingleResLetter(*args)
    def getResidue(*args): return _pd.BioSequence_getResidue(*args)
    __swig_destroy__ = _pd.delete_BioSequence
    __del__ = lambda self : None;
BioSequence_swigregister = _pd.BioSequence_swigregister
BioSequence_swigregister(BioSequence)

__lshift__ = _pd.__lshift__
__eq__ = _pd.__eq__
class BestPathBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BestPathBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BestPathBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def FillScoreMatrix(*args): return _pd.BestPathBase_FillScoreMatrix(*args)
    def getBestPath(*args): return _pd.BestPathBase_getBestPath(*args)
    __swig_destroy__ = _pd.delete_BestPathBase
    __del__ = lambda self : None;
BestPathBase_swigregister = _pd.BestPathBase_swigregister
BestPathBase_swigregister(BestPathBase)

class AlignmentDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AlignmentDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlignmentDef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_AlignmentDef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_AlignmentDef
    __del__ = lambda self : None;
    def printToScreen(*args): return _pd.AlignmentDef_printToScreen(*args)
    def getEquivelency(*args): return _pd.AlignmentDef_getEquivelency(*args)
    def getSeq1(*args): return _pd.AlignmentDef_getSeq1(*args)
    def getSeq2(*args): return _pd.AlignmentDef_getSeq2(*args)
    def isSeqAligned(*args): return _pd.AlignmentDef_isSeqAligned(*args)
    def ResetAlignment(*args): return _pd.AlignmentDef_ResetAlignment(*args)
AlignmentDef_swigregister = _pd.AlignmentDef_swigregister
AlignmentDef_swigregister(AlignmentDef)

class ExpSeqPair(AlignmentDef):
    __swig_setmethods__ = {}
    for _s in [AlignmentDef]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ExpSeqPair, name, value)
    __swig_getmethods__ = {}
    for _s in [AlignmentDef]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpSeqPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ExpSeqPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ExpSeqPair
    __del__ = lambda self : None;
    def isValid(*args): return _pd.ExpSeqPair_isValid(*args)
ExpSeqPair_swigregister = _pd.ExpSeqPair_swigregister
ExpSeqPair_swigregister(ExpSeqPair)

class AlignerBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AlignerBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlignerBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Align(*args): return _pd.AlignerBase_Align(*args)
    __swig_destroy__ = _pd.delete_AlignerBase
    __del__ = lambda self : None;
AlignerBase_swigregister = _pd.AlignerBase_swigregister
AlignerBase_swigregister(AlignerBase)

class SimpleBestPath(BestPathBase):
    __swig_setmethods__ = {}
    for _s in [BestPathBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SimpleBestPath, name, value)
    __swig_getmethods__ = {}
    for _s in [BestPathBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleBestPath, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_SimpleBestPath
    __del__ = lambda self : None;
SimpleBestPath_swigregister = _pd.SimpleBestPath_swigregister
SimpleBestPath_swigregister(SimpleBestPath)

class SimpleAligner(AlignerBase):
    __swig_setmethods__ = {}
    for _s in [AlignerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SimpleAligner, name, value)
    __swig_getmethods__ = {}
    for _s in [AlignerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleAligner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SimpleAligner(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_SimpleAligner
    __del__ = lambda self : None;
SimpleAligner_swigregister = _pd.SimpleAligner_swigregister
SimpleAligner_swigregister(SimpleAligner)

class ManualAligner(AlignerBase):
    __swig_setmethods__ = {}
    for _s in [AlignerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ManualAligner, name, value)
    __swig_getmethods__ = {}
    for _s in [AlignerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ManualAligner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ManualAligner(*args)
        try: self.this.append(this)
        except: self.this = this
    def addMatch(*args): return _pd.ManualAligner_addMatch(*args)
    def clearmatches(*args): return _pd.ManualAligner_clearmatches(*args)
    __swig_destroy__ = _pd.delete_ManualAligner
    __del__ = lambda self : None;
ManualAligner_swigregister = _pd.ManualAligner_swigregister
ManualAligner_swigregister(ManualAligner)

class DirectAligner(AlignerBase):
    __swig_setmethods__ = {}
    for _s in [AlignerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DirectAligner, name, value)
    __swig_getmethods__ = {}
    for _s in [AlignerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirectAligner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_DirectAligner(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_DirectAligner
    __del__ = lambda self : None;
DirectAligner_swigregister = _pd.DirectAligner_swigregister
DirectAligner_swigregister(DirectAligner)

class OutputTrajectory(Object,WorkSpaceOperatorBase):
    __swig_setmethods__ = {}
    for _s in [Object,WorkSpaceOperatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputTrajectory, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,WorkSpaceOperatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputTrajectory, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_OutputTrajectory
    __del__ = lambda self : None;
    def clone(*args): return _pd.OutputTrajectory_clone(*args)
    def create(*args): return _pd.OutputTrajectory_create(*args)
    def append(*args): return _pd.OutputTrajectory_append(*args)
OutputTrajectory_swigregister = _pd.OutputTrajectory_swigregister
OutputTrajectory_swigregister(OutputTrajectory)

class OutputTrajectoryFile(OutputTrajectory):
    __swig_setmethods__ = {}
    for _s in [OutputTrajectory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputTrajectoryFile, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputTrajectory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputTrajectoryFile, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_OutputTrajectoryFile
    __del__ = lambda self : None;
    def clone(*args): return _pd.OutputTrajectoryFile_clone(*args)
    def create(*args): return _pd.OutputTrajectoryFile_create(*args)
    def append(*args): return _pd.OutputTrajectoryFile_append(*args)
OutputTrajectoryFile_swigregister = _pd.OutputTrajectoryFile_swigregister
OutputTrajectoryFile_swigregister(OutputTrajectoryFile)

class ObjectContainer_OutputTrajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_OutputTrajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_OutputTrajectory, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_OutputTrajectory_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_OutputTrajectory
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_OutputTrajectory_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_OutputTrajectory(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_OutputTrajectory_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_OutputTrajectory_add(*args)

    def erase(*args): return _pd.ObjectContainer_OutputTrajectory_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_OutputTrajectory_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_OutputTrajectory_element(*args)
ObjectContainer_OutputTrajectory_swigregister = _pd.ObjectContainer_OutputTrajectory_swigregister
ObjectContainer_OutputTrajectory_swigregister(ObjectContainer_OutputTrajectory)

class OutputTrajectoryContainer(OutputTrajectory,ObjectContainer_OutputTrajectory):
    __swig_setmethods__ = {}
    for _s in [OutputTrajectory,ObjectContainer_OutputTrajectory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputTrajectoryContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputTrajectory,ObjectContainer_OutputTrajectory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputTrajectoryContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutputTrajectoryContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_OutputTrajectoryContainer
    __del__ = lambda self : None;
    def clone(*args): return _pd.OutputTrajectoryContainer_clone(*args)
    def create(*args): return _pd.OutputTrajectoryContainer_create(*args)
    def append(*args): return _pd.OutputTrajectoryContainer_append(*args)
OutputTrajectoryContainer_swigregister = _pd.OutputTrajectoryContainer_swigregister
OutputTrajectoryContainer_swigregister(OutputTrajectoryContainer)

class OutputFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.OutputFile_clone(*args)
    def save(*args): return _pd.OutputFile_save(*args)
    __swig_destroy__ = _pd.delete_OutputFile
    __del__ = lambda self : None;
OutputFile_swigregister = _pd.OutputFile_swigregister
OutputFile_swigregister(OutputFile)

class InputTrajectory(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, InputTrajectory, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputTrajectory, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_InputTrajectory
    __del__ = lambda self : None;
    def clone(*args): return _pd.InputTrajectory_clone(*args)
    def readNext(*args): return _pd.InputTrajectory_readNext(*args)
    def skip(*args): return _pd.InputTrajectory_skip(*args)
    def isEndOfFile(*args): return _pd.InputTrajectory_isEndOfFile(*args)
    def reset(*args): return _pd.InputTrajectory_reset(*args)
InputTrajectory_swigregister = _pd.InputTrajectory_swigregister
InputTrajectory_swigregister(InputTrajectory)

class InputTrajectory_RandomAccess(InputTrajectory):
    __swig_setmethods__ = {}
    for _s in [InputTrajectory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, InputTrajectory_RandomAccess, name, value)
    __swig_getmethods__ = {}
    for _s in [InputTrajectory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputTrajectory_RandomAccess, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_InputTrajectory_RandomAccess
    __del__ = lambda self : None;
    def clone(*args): return _pd.InputTrajectory_RandomAccess_clone(*args)
    def readRandomAccess(*args): return _pd.InputTrajectory_RandomAccess_readRandomAccess(*args)
    def nEntries(*args): return _pd.InputTrajectory_RandomAccess_nEntries(*args)
InputTrajectory_RandomAccess_swigregister = _pd.InputTrajectory_RandomAccess_swigregister
InputTrajectory_RandomAccess_swigregister(InputTrajectory_RandomAccess)

class OutputFile_PSF(OutputFile):
    __swig_setmethods__ = {}
    for _s in [OutputFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile_PSF, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile_PSF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutputFile_PSF(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutputFile_PSF_clone(*args)
    def save(*args): return _pd.OutputFile_PSF_save(*args)
    __swig_destroy__ = _pd.delete_OutputFile_PSF
    __del__ = lambda self : None;
OutputFile_PSF_swigregister = _pd.OutputFile_PSF_swigregister
OutputFile_PSF_swigregister(OutputFile_PSF)

class OutputFile_DCD(OutputFile):
    __swig_setmethods__ = {}
    for _s in [OutputFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile_DCD, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile_DCD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutputFile_DCD(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutputFile_DCD_clone(*args)
    def save(*args): return _pd.OutputFile_DCD_save(*args)
    __swig_destroy__ = _pd.delete_OutputFile_DCD
    __del__ = lambda self : None;
OutputFile_DCD_swigregister = _pd.OutputFile_DCD_swigregister
OutputFile_DCD_swigregister(OutputFile_DCD)

class OutTra_NAMD(OutputTrajectoryFile):
    __swig_setmethods__ = {}
    for _s in [OutputTrajectoryFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutTra_NAMD, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputTrajectoryFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutTra_NAMD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutTra_NAMD(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutTra_NAMD_clone(*args)
    def create(*args): return _pd.OutTra_NAMD_create(*args)
    def append(*args): return _pd.OutTra_NAMD_append(*args)
    __swig_destroy__ = _pd.delete_OutTra_NAMD
    __del__ = lambda self : None;
OutTra_NAMD_swigregister = _pd.OutTra_NAMD_swigregister
OutTra_NAMD_swigregister(OutTra_NAMD)

class FileParticle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileParticle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileParticle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["atomNum"] = _pd.FileParticle_atomNum_set
    __swig_getmethods__["atomNum"] = _pd.FileParticle_atomNum_get
    if _newclass:atomNum = _swig_property(_pd.FileParticle_atomNum_get, _pd.FileParticle_atomNum_set)
    __swig_setmethods__["atomName"] = _pd.FileParticle_atomName_set
    __swig_getmethods__["atomName"] = _pd.FileParticle_atomName_get
    if _newclass:atomName = _swig_property(_pd.FileParticle_atomName_get, _pd.FileParticle_atomName_set)
    __swig_setmethods__["resName"] = _pd.FileParticle_resName_set
    __swig_getmethods__["resName"] = _pd.FileParticle_resName_get
    if _newclass:resName = _swig_property(_pd.FileParticle_resName_get, _pd.FileParticle_resName_set)
    __swig_setmethods__["chainID"] = _pd.FileParticle_chainID_set
    __swig_getmethods__["chainID"] = _pd.FileParticle_chainID_get
    if _newclass:chainID = _swig_property(_pd.FileParticle_chainID_get, _pd.FileParticle_chainID_set)
    __swig_setmethods__["iCode"] = _pd.FileParticle_iCode_set
    __swig_getmethods__["iCode"] = _pd.FileParticle_iCode_get
    if _newclass:iCode = _swig_property(_pd.FileParticle_iCode_get, _pd.FileParticle_iCode_set)
    __swig_setmethods__["resNum"] = _pd.FileParticle_resNum_set
    __swig_getmethods__["resNum"] = _pd.FileParticle_resNum_get
    if _newclass:resNum = _swig_property(_pd.FileParticle_resNum_get, _pd.FileParticle_resNum_set)
    __swig_setmethods__["x"] = _pd.FileParticle_x_set
    __swig_getmethods__["x"] = _pd.FileParticle_x_get
    if _newclass:x = _swig_property(_pd.FileParticle_x_get, _pd.FileParticle_x_set)
    __swig_setmethods__["y"] = _pd.FileParticle_y_set
    __swig_getmethods__["y"] = _pd.FileParticle_y_get
    if _newclass:y = _swig_property(_pd.FileParticle_y_get, _pd.FileParticle_y_set)
    __swig_setmethods__["z"] = _pd.FileParticle_z_set
    __swig_getmethods__["z"] = _pd.FileParticle_z_get
    if _newclass:z = _swig_property(_pd.FileParticle_z_get, _pd.FileParticle_z_set)
    def info(*args): return _pd.FileParticle_info(*args)
    def __init__(self, *args): 
        this = _pd.new_FileParticle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FileParticle
    __del__ = lambda self : None;
FileParticle_swigregister = _pd.FileParticle_swigregister
FileParticle_swigregister(FileParticle)

class File_Molecule(ExpSeqPair):
    __swig_setmethods__ = {}
    for _s in [ExpSeqPair]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, File_Molecule, name, value)
    __swig_getmethods__ = {}
    for _s in [ExpSeqPair]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, File_Molecule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_File_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPrefix(*args): return _pd.File_Molecule_setPrefix(*args)
    def printToScreen(*args): return _pd.File_Molecule_printToScreen(*args)
    def getBiologicalSeq(*args): return _pd.File_Molecule_getBiologicalSeq(*args)
    def getStructuralSeq(*args): return _pd.File_Molecule_getStructuralSeq(*args)
    def getBioLength(*args): return _pd.File_Molecule_getBioLength(*args)
    def getAtomLines(*args): return _pd.File_Molecule_getAtomLines(*args)
    def getChainID(*args): return _pd.File_Molecule_getChainID(*args)
    def isEmpty(*args): return _pd.File_Molecule_isEmpty(*args)
    __swig_destroy__ = _pd.delete_File_Molecule
    __del__ = lambda self : None;
File_Molecule_swigregister = _pd.File_Molecule_swigregister
File_Molecule_swigregister(File_Molecule)
setPolymerPositions = _pd.setPolymerPositions

class FileBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileBond, name)
    __repr__ = _swig_repr
    Invalid = _pd.FileBond_Invalid
    Disulphide = _pd.FileBond_Disulphide
    Covalent = _pd.FileBond_Covalent
    HBond = _pd.FileBond_HBond
    def __init__(self, *args): 
        this = _pd.new_FileBond(*args)
        try: self.this.append(this)
        except: self.this = this
    def clear(*args): return _pd.FileBond_clear(*args)
    def matches(*args): return _pd.FileBond_matches(*args)
    __swig_setmethods__["Type"] = _pd.FileBond_Type_set
    __swig_getmethods__["Type"] = _pd.FileBond_Type_get
    if _newclass:Type = _swig_property(_pd.FileBond_Type_get, _pd.FileBond_Type_set)
    __swig_setmethods__["r1Name"] = _pd.FileBond_r1Name_set
    __swig_getmethods__["r1Name"] = _pd.FileBond_r1Name_get
    if _newclass:r1Name = _swig_property(_pd.FileBond_r1Name_get, _pd.FileBond_r1Name_set)
    __swig_setmethods__["r1ChainID"] = _pd.FileBond_r1ChainID_set
    __swig_getmethods__["r1ChainID"] = _pd.FileBond_r1ChainID_get
    if _newclass:r1ChainID = _swig_property(_pd.FileBond_r1ChainID_get, _pd.FileBond_r1ChainID_set)
    __swig_setmethods__["r1ResNum"] = _pd.FileBond_r1ResNum_set
    __swig_getmethods__["r1ResNum"] = _pd.FileBond_r1ResNum_get
    if _newclass:r1ResNum = _swig_property(_pd.FileBond_r1ResNum_get, _pd.FileBond_r1ResNum_set)
    __swig_setmethods__["r1ICode"] = _pd.FileBond_r1ICode_set
    __swig_getmethods__["r1ICode"] = _pd.FileBond_r1ICode_get
    if _newclass:r1ICode = _swig_property(_pd.FileBond_r1ICode_get, _pd.FileBond_r1ICode_set)
    __swig_setmethods__["r2Name"] = _pd.FileBond_r2Name_set
    __swig_getmethods__["r2Name"] = _pd.FileBond_r2Name_get
    if _newclass:r2Name = _swig_property(_pd.FileBond_r2Name_get, _pd.FileBond_r2Name_set)
    __swig_setmethods__["r2ChainID"] = _pd.FileBond_r2ChainID_set
    __swig_getmethods__["r2ChainID"] = _pd.FileBond_r2ChainID_get
    if _newclass:r2ChainID = _swig_property(_pd.FileBond_r2ChainID_get, _pd.FileBond_r2ChainID_set)
    __swig_setmethods__["r2ResNum"] = _pd.FileBond_r2ResNum_set
    __swig_getmethods__["r2ResNum"] = _pd.FileBond_r2ResNum_get
    if _newclass:r2ResNum = _swig_property(_pd.FileBond_r2ResNum_get, _pd.FileBond_r2ResNum_set)
    __swig_setmethods__["r2ICode"] = _pd.FileBond_r2ICode_set
    __swig_getmethods__["r2ICode"] = _pd.FileBond_r2ICode_get
    if _newclass:r2ICode = _swig_property(_pd.FileBond_r2ICode_get, _pd.FileBond_r2ICode_set)
    __swig_destroy__ = _pd.delete_FileBond
    __del__ = lambda self : None;
FileBond_swigregister = _pd.FileBond_swigregister
FileBond_swigregister(FileBond)

class FileCovalency(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileCovalency, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileCovalency, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FileCovalency(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FileCovalency
    __del__ = lambda self : None;
    def getCount(*args): return _pd.FileCovalency_getCount(*args)
    def addBond(*args): return _pd.FileCovalency_addBond(*args)
FileCovalency_swigregister = _pd.FileCovalency_swigregister
FileCovalency_swigregister(FileCovalency)

class FileBabelBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileBabelBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileBabelBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FileBabelBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def ReinterpretName(*args): return _pd.FileBabelBase_ReinterpretName(*args)
    def setAtomNameConverterEnabled(*args): return _pd.FileBabelBase_setAtomNameConverterEnabled(*args)
    def setAtomNameConverter(*args): return _pd.FileBabelBase_setAtomNameConverter(*args)
    def getAtomNameConverter(*args): return _pd.FileBabelBase_getAtomNameConverter(*args)
    def enableKnownedgeBasedRenaming(*args): return _pd.FileBabelBase_enableKnownedgeBasedRenaming(*args)
    __swig_destroy__ = _pd.delete_FileBabelBase
    __del__ = lambda self : None;
FileBabelBase_swigregister = _pd.FileBabelBase_swigregister
FileBabelBase_swigregister(FileBabelBase)

class FileImportBase(FileBabelBase):
    __swig_setmethods__ = {}
    for _s in [FileBabelBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileImportBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FileBabelBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileImportBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FileImportBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFileName(*args): return _pd.FileImportBase_getFileName(*args)
    def getAligner(*args): return _pd.FileImportBase_getAligner(*args)
    def setAligner(*args): return _pd.FileImportBase_setAligner(*args)
    def setAlignerDefault(*args): return _pd.FileImportBase_setAlignerDefault(*args)
    def setAlignerDirect(*args): return _pd.FileImportBase_setAlignerDirect(*args)
    def addAliasMapper(*args): return _pd.FileImportBase_addAliasMapper(*args)
    def setCovalency(*args): return _pd.FileImportBase_setCovalency(*args)
    def setClassMapper(*args): return _pd.FileImportBase_setClassMapper(*args)
    def getClass(*args): return _pd.FileImportBase_getClass(*args)
    def getAlias(*args): return _pd.FileImportBase_getAlias(*args)
    def getCovalency(*args): return _pd.FileImportBase_getCovalency(*args)
    def setFilter(*args): return _pd.FileImportBase_setFilter(*args)
    def isResequencableFilter(*args): return _pd.FileImportBase_isResequencableFilter(*args)
    def PassesFilter(*args): return _pd.FileImportBase_PassesFilter(*args)
    def getFilterText(*args): return _pd.FileImportBase_getFilterText(*args)
    def ReinterpretName(*args): return _pd.FileImportBase_ReinterpretName(*args)
    __swig_destroy__ = _pd.delete_FileImportBase
    __del__ = lambda self : None;
FileImportBase_swigregister = _pd.FileImportBase_swigregister
FileImportBase_swigregister(FileImportBase)

class FileInBase(FileImportBase,System,RebuilderOwner,CustomAliasMapper):
    __swig_setmethods__ = {}
    for _s in [FileImportBase,System,RebuilderOwner,CustomAliasMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileInBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FileImportBase,System,RebuilderOwner,CustomAliasMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileInBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FileInBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["TreatMolsAsGroups"] = _pd.FileInBase_TreatMolsAsGroups_set
    __swig_getmethods__["TreatMolsAsGroups"] = _pd.FileInBase_TreatMolsAsGroups_get
    if _newclass:TreatMolsAsGroups = _swig_property(_pd.FileInBase_TreatMolsAsGroups_get, _pd.FileInBase_TreatMolsAsGroups_set)
    __swig_setmethods__["CentreOnBuild"] = _pd.FileInBase_CentreOnBuild_set
    __swig_getmethods__["CentreOnBuild"] = _pd.FileInBase_CentreOnBuild_get
    if _newclass:CentreOnBuild = _swig_property(_pd.FileInBase_CentreOnBuild_get, _pd.FileInBase_CentreOnBuild_set)
    __swig_destroy__ = _pd.delete_FileInBase
    __del__ = lambda self : None;
FileInBase_swigregister = _pd.FileInBase_swigregister
FileInBase_swigregister(FileInBase)

class FileToolBase(FileImportBase):
    __swig_setmethods__ = {}
    for _s in [FileImportBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileToolBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FileImportBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileToolBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FileToolBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FileToolBase
    __del__ = lambda self : None;
FileToolBase_swigregister = _pd.FileToolBase_swigregister
FileToolBase_swigregister(FileToolBase)

class FileMoleculeMaker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FileMoleculeMaker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileMoleculeMaker, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_FileMoleculeMaker
    __del__ = lambda self : None;
    def make(*args): return _pd.FileMoleculeMaker_make(*args)
    def findChainIDs(*args): return _pd.FileMoleculeMaker_findChainIDs(*args)
    def HasChainID(*args): return _pd.FileMoleculeMaker_HasChainID(*args)
FileMoleculeMaker_swigregister = _pd.FileMoleculeMaker_swigregister
FileMoleculeMaker_swigregister(FileMoleculeMaker)

class PSF_AtomLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PSF_AtomLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSF_AtomLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _pd.PSF_AtomLine_index_set
    __swig_getmethods__["index"] = _pd.PSF_AtomLine_index_get
    if _newclass:index = _swig_property(_pd.PSF_AtomLine_index_get, _pd.PSF_AtomLine_index_set)
    __swig_setmethods__["segname"] = _pd.PSF_AtomLine_segname_set
    __swig_getmethods__["segname"] = _pd.PSF_AtomLine_segname_get
    if _newclass:segname = _swig_property(_pd.PSF_AtomLine_segname_get, _pd.PSF_AtomLine_segname_set)
    __swig_setmethods__["resnumber"] = _pd.PSF_AtomLine_resnumber_set
    __swig_getmethods__["resnumber"] = _pd.PSF_AtomLine_resnumber_get
    if _newclass:resnumber = _swig_property(_pd.PSF_AtomLine_resnumber_get, _pd.PSF_AtomLine_resnumber_set)
    __swig_setmethods__["resname"] = _pd.PSF_AtomLine_resname_set
    __swig_getmethods__["resname"] = _pd.PSF_AtomLine_resname_get
    if _newclass:resname = _swig_property(_pd.PSF_AtomLine_resname_get, _pd.PSF_AtomLine_resname_set)
    __swig_setmethods__["atomname"] = _pd.PSF_AtomLine_atomname_set
    __swig_getmethods__["atomname"] = _pd.PSF_AtomLine_atomname_get
    if _newclass:atomname = _swig_property(_pd.PSF_AtomLine_atomname_get, _pd.PSF_AtomLine_atomname_set)
    __swig_setmethods__["ffname"] = _pd.PSF_AtomLine_ffname_set
    __swig_getmethods__["ffname"] = _pd.PSF_AtomLine_ffname_get
    if _newclass:ffname = _swig_property(_pd.PSF_AtomLine_ffname_get, _pd.PSF_AtomLine_ffname_set)
    __swig_setmethods__["charge"] = _pd.PSF_AtomLine_charge_set
    __swig_getmethods__["charge"] = _pd.PSF_AtomLine_charge_get
    if _newclass:charge = _swig_property(_pd.PSF_AtomLine_charge_get, _pd.PSF_AtomLine_charge_set)
    __swig_setmethods__["mass"] = _pd.PSF_AtomLine_mass_set
    __swig_getmethods__["mass"] = _pd.PSF_AtomLine_mass_get
    if _newclass:mass = _swig_property(_pd.PSF_AtomLine_mass_get, _pd.PSF_AtomLine_mass_set)
    __swig_setmethods__["extratoken"] = _pd.PSF_AtomLine_extratoken_set
    __swig_getmethods__["extratoken"] = _pd.PSF_AtomLine_extratoken_get
    if _newclass:extratoken = _swig_property(_pd.PSF_AtomLine_extratoken_get, _pd.PSF_AtomLine_extratoken_set)
    def __init__(self, *args): 
        this = _pd.new_PSF_AtomLine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PSF_AtomLine
    __del__ = lambda self : None;
PSF_AtomLine_swigregister = _pd.PSF_AtomLine_swigregister
PSF_AtomLine_swigregister(PSF_AtomLine)

class Load_PSF(System):
    __swig_setmethods__ = {}
    for _s in [System]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Load_PSF, name, value)
    __swig_getmethods__ = {}
    for _s in [System]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Load_PSF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Load_PSF(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Load_PSF
    __del__ = lambda self : None;
Load_PSF_swigregister = _pd.Load_PSF_swigregister
Load_PSF_swigregister(Load_PSF)

class BioSequenceCollection_char(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BioSequenceCollection_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BioSequenceCollection_char, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BioSequenceCollection_char(*args)
        try: self.this.append(this)
        except: self.this = this
    def getSequence(*args): return _pd.BioSequenceCollection_char_getSequence(*args)
    def getLastSequence(*args): return _pd.BioSequenceCollection_char_getLastSequence(*args)
    def HasIndex(*args): return _pd.BioSequenceCollection_char_HasIndex(*args)
    def getIndexer(*args): return _pd.BioSequenceCollection_char_getIndexer(*args)
    def size(*args): return _pd.BioSequenceCollection_char_size(*args)
    def printScreen(*args): return _pd.BioSequenceCollection_char_printScreen(*args)
    __swig_destroy__ = _pd.delete_BioSequenceCollection_char
    __del__ = lambda self : None;
BioSequenceCollection_char_swigregister = _pd.BioSequenceCollection_char_swigregister
BioSequenceCollection_char_swigregister(BioSequenceCollection_char)

HEADER = _pd.HEADER
TITLE = _pd.TITLE
COMPND = _pd.COMPND
SOURCE = _pd.SOURCE
KEYWDS = _pd.KEYWDS
EXPDTA = _pd.EXPDTA
AUTHOR = _pd.AUTHOR
REVDAT = _pd.REVDAT
JRNL = _pd.JRNL
REMARK = _pd.REMARK
FORMUL = _pd.FORMUL
HELIX = _pd.HELIX
SHEET = _pd.SHEET
HET = _pd.HET
DBREF = _pd.DBREF
SEQRES = _pd.SEQRES
MODRES = _pd.MODRES
SSBOND = _pd.SSBOND
CONECT = _pd.CONECT
UNKNOWN_TAGS = _pd.UNKNOWN_TAGS
NoHeader = _pd.NoHeader
SystemInfo = _pd.SystemInfo
Minimal = _pd.Minimal
Comprehensive = _pd.Comprehensive
AllKnown = _pd.AllKnown
Everything = _pd.Everything
DefaultHeader = _pd.DefaultHeader
Crystalographic = _pd.Crystalographic
InfraredMicroscopy = _pd.InfraredMicroscopy
FiberDiffraction = _pd.FiberDiffraction
ElectronMicroscopy = _pd.ElectronMicroscopy
SingleCrystalElectronMicroscopy = _pd.SingleCrystalElectronMicroscopy
NMR = _pd.NMR
UnknownMethod = _pd.UnknownMethod
Undefined = _pd.Undefined
class PDB_SEQRES(BioSequenceCollection_char):
    __swig_setmethods__ = {}
    for _s in [BioSequenceCollection_char]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_SEQRES, name, value)
    __swig_getmethods__ = {}
    for _s in [BioSequenceCollection_char]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_SEQRES, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_SEQRES(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAlias(*args): return _pd.PDB_SEQRES_setAlias(*args)
    def getAlias(*args): return _pd.PDB_SEQRES_getAlias(*args)
    def clear(*args): return _pd.PDB_SEQRES_clear(*args)
    def loadFromFile(*args): return _pd.PDB_SEQRES_loadFromFile(*args)
    def parseLine(*args): return _pd.PDB_SEQRES_parseLine(*args)
    def getNameMapper(*args): return _pd.PDB_SEQRES_getNameMapper(*args)
    __swig_destroy__ = _pd.delete_PDB_SEQRES
    __del__ = lambda self : None;
PDB_SEQRES_swigregister = _pd.PDB_SEQRES_swigregister
PDB_SEQRES_swigregister(PDB_SEQRES)

class PDBAtomLine(FileParticle):
    __swig_setmethods__ = {}
    for _s in [FileParticle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDBAtomLine, name, value)
    __swig_getmethods__ = {}
    for _s in [FileParticle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDBAtomLine, name)
    __repr__ = _swig_repr
    ATOM = _pd.PDBAtomLine_ATOM
    HETATM = _pd.PDBAtomLine_HETATM
    TER = _pd.PDBAtomLine_TER
    __swig_setmethods__["lineType"] = _pd.PDBAtomLine_lineType_set
    __swig_getmethods__["lineType"] = _pd.PDBAtomLine_lineType_get
    if _newclass:lineType = _swig_property(_pd.PDBAtomLine_lineType_get, _pd.PDBAtomLine_lineType_set)
    __swig_setmethods__["altLoc"] = _pd.PDBAtomLine_altLoc_set
    __swig_getmethods__["altLoc"] = _pd.PDBAtomLine_altLoc_get
    if _newclass:altLoc = _swig_property(_pd.PDBAtomLine_altLoc_get, _pd.PDBAtomLine_altLoc_set)
    __swig_setmethods__["occupancy"] = _pd.PDBAtomLine_occupancy_set
    __swig_getmethods__["occupancy"] = _pd.PDBAtomLine_occupancy_get
    if _newclass:occupancy = _swig_property(_pd.PDBAtomLine_occupancy_get, _pd.PDBAtomLine_occupancy_set)
    __swig_setmethods__["TempFactor"] = _pd.PDBAtomLine_TempFactor_set
    __swig_getmethods__["TempFactor"] = _pd.PDBAtomLine_TempFactor_get
    if _newclass:TempFactor = _swig_property(_pd.PDBAtomLine_TempFactor_get, _pd.PDBAtomLine_TempFactor_set)
    __swig_setmethods__["segID"] = _pd.PDBAtomLine_segID_set
    __swig_getmethods__["segID"] = _pd.PDBAtomLine_segID_get
    if _newclass:segID = _swig_property(_pd.PDBAtomLine_segID_get, _pd.PDBAtomLine_segID_set)
    __swig_setmethods__["element"] = _pd.PDBAtomLine_element_set
    __swig_getmethods__["element"] = _pd.PDBAtomLine_element_get
    if _newclass:element = _swig_property(_pd.PDBAtomLine_element_get, _pd.PDBAtomLine_element_set)
    __swig_setmethods__["charge"] = _pd.PDBAtomLine_charge_set
    __swig_getmethods__["charge"] = _pd.PDBAtomLine_charge_get
    if _newclass:charge = _swig_property(_pd.PDBAtomLine_charge_get, _pd.PDBAtomLine_charge_set)
    def __init__(self, *args): 
        this = _pd.new_PDBAtomLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(*args): return _pd.PDBAtomLine_init(*args)
    def loadAtom(*args): return _pd.PDBAtomLine_loadAtom(*args)
    def loadLine(*args): return _pd.PDBAtomLine_loadLine(*args)
    def saveLine(*args): return _pd.PDBAtomLine_saveLine(*args)
    __swig_destroy__ = _pd.delete_PDBAtomLine
    __del__ = lambda self : None;
PDBAtomLine_swigregister = _pd.PDBAtomLine_swigregister
PDBAtomLine_swigregister(PDBAtomLine)

class ModResLine(ResidueAliasDefinition):
    __swig_setmethods__ = {}
    for _s in [ResidueAliasDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ModResLine, name, value)
    __swig_getmethods__ = {}
    for _s in [ResidueAliasDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModResLine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ModResLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def parseLine(*args): return _pd.ModResLine_parseLine(*args)
    def matches(*args): return _pd.ModResLine_matches(*args)
    __swig_destroy__ = _pd.delete_ModResLine
    __del__ = lambda self : None;
ModResLine_swigregister = _pd.ModResLine_swigregister
ModResLine_swigregister(ModResLine)

class PDB_MODRES(AliasMapper):
    __swig_setmethods__ = {}
    for _s in [AliasMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_MODRES, name, value)
    __swig_getmethods__ = {}
    for _s in [AliasMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_MODRES, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_MODRES(*args)
        try: self.this.append(this)
        except: self.this = this
    def parseLine(*args): return _pd.PDB_MODRES_parseLine(*args)
    def getCount(*args): return _pd.PDB_MODRES_getCount(*args)
    def AttemptRename(*args): return _pd.PDB_MODRES_AttemptRename(*args)
    def lookupLongName(*args): return _pd.PDB_MODRES_lookupLongName(*args)
    def lookupShortName(*args): return _pd.PDB_MODRES_lookupShortName(*args)
    def lookupAlias(*args): return _pd.PDB_MODRES_lookupAlias(*args)
    __swig_destroy__ = _pd.delete_PDB_MODRES
    __del__ = lambda self : None;
PDB_MODRES_swigregister = _pd.PDB_MODRES_swigregister
PDB_MODRES_swigregister(PDB_MODRES)

class PDB_Connections(FileCovalency):
    __swig_setmethods__ = {}
    for _s in [FileCovalency]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_Connections, name, value)
    __swig_getmethods__ = {}
    for _s in [FileCovalency]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_Connections, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_Connections(*args)
        try: self.this.append(this)
        except: self.this = this
    def parseCONECT(*args): return _pd.PDB_Connections_parseCONECT(*args)
    def parseSSBOND(*args): return _pd.PDB_Connections_parseSSBOND(*args)
    __swig_destroy__ = _pd.delete_PDB_Connections
    __del__ = lambda self : None;
PDB_Connections_swigregister = _pd.PDB_Connections_swigregister
PDB_Connections_swigregister(PDB_Connections)

class PDB_Model(FileMoleculeMaker):
    __swig_setmethods__ = {}
    for _s in [FileMoleculeMaker]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_Model, name, value)
    __swig_getmethods__ = {}
    for _s in [FileMoleculeMaker]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_Model, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_PDB_Model
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pd.new_PDB_Model(*args)
        try: self.this.append(this)
        except: self.this = this
    def make(*args): return _pd.PDB_Model_make(*args)
    def findChainIDs(*args): return _pd.PDB_Model_findChainIDs(*args)
    def HasChainID(*args): return _pd.PDB_Model_HasChainID(*args)
    def getPDBParent(*args): return _pd.PDB_Model_getPDBParent(*args)
PDB_Model_swigregister = _pd.PDB_Model_swigregister
PDB_Model_swigregister(PDB_Model)

class PDB_ImportBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_ImportBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_ImportBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_ImportBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def getSEQRES(*args): return _pd.PDB_ImportBase_getSEQRES(*args)
    def getMODRES(*args): return _pd.PDB_ImportBase_getMODRES(*args)
    def getConnections(*args): return _pd.PDB_ImportBase_getConnections(*args)
    __swig_setmethods__["MaxModelImport"] = _pd.PDB_ImportBase_MaxModelImport_set
    __swig_getmethods__["MaxModelImport"] = _pd.PDB_ImportBase_MaxModelImport_get
    if _newclass:MaxModelImport = _swig_property(_pd.PDB_ImportBase_MaxModelImport_get, _pd.PDB_ImportBase_MaxModelImport_set)
    __swig_setmethods__["HeaderFilterMode"] = _pd.PDB_ImportBase_HeaderFilterMode_set
    __swig_getmethods__["HeaderFilterMode"] = _pd.PDB_ImportBase_HeaderFilterMode_get
    if _newclass:HeaderFilterMode = _swig_property(_pd.PDB_ImportBase_HeaderFilterMode_get, _pd.PDB_ImportBase_HeaderFilterMode_set)
    __swig_setmethods__["UseSEQRES"] = _pd.PDB_ImportBase_UseSEQRES_set
    __swig_getmethods__["UseSEQRES"] = _pd.PDB_ImportBase_UseSEQRES_get
    if _newclass:UseSEQRES = _swig_property(_pd.PDB_ImportBase_UseSEQRES_get, _pd.PDB_ImportBase_UseSEQRES_set)
    __swig_destroy__ = _pd.delete_PDB_ImportBase
    __del__ = lambda self : None;
PDB_ImportBase_swigregister = _pd.PDB_ImportBase_swigregister
PDB_ImportBase_swigregister(PDB_ImportBase)

class PDB_Babel(FileBabelBase):
    __swig_setmethods__ = {}
    for _s in [FileBabelBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_Babel, name, value)
    __swig_getmethods__ = {}
    for _s in [FileBabelBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_Babel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_Babel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_PDB_Babel
    __del__ = lambda self : None;
    def RenameFile(*args): return _pd.PDB_Babel_RenameFile(*args)
PDB_Babel_swigregister = _pd.PDB_Babel_swigregister
PDB_Babel_swigregister(PDB_Babel)

class PDB_Tools(FileImportBase,PDB_ImportBase):
    __swig_setmethods__ = {}
    for _s in [FileImportBase,PDB_ImportBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_Tools, name, value)
    __swig_getmethods__ = {}
    for _s in [FileImportBase,PDB_ImportBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_Tools, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_Tools(*args)
        try: self.this.append(this)
        except: self.this = this
    def ensureScan(*args): return _pd.PDB_Tools_ensureScan(*args)
    __swig_destroy__ = _pd.delete_PDB_Tools
    __del__ = lambda self : None;
PDB_Tools_swigregister = _pd.PDB_Tools_swigregister
PDB_Tools_swigregister(PDB_Tools)

class PDB_In(FileInBase,PDB_ImportBase):
    __swig_setmethods__ = {}
    for _s in [FileInBase,PDB_ImportBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_In, name, value)
    __swig_getmethods__ = {}
    for _s in [FileInBase,PDB_ImportBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_In, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_In(*args)
        try: self.this.append(this)
        except: self.this = this
    def setVerbosity(*args): return _pd.PDB_In_setVerbosity(*args)
    def ensureScanned(*args): return _pd.PDB_In_ensureScanned(*args)
    def loadAll(*args): return _pd.PDB_In_loadAll(*args)
    def loadModel(*args): return _pd.PDB_In_loadModel(*args)
    def load(*args): return _pd.PDB_In_load(*args)
    def loadExplicit(*args): return _pd.PDB_In_loadExplicit(*args)
    __swig_destroy__ = _pd.delete_PDB_In
    __del__ = lambda self : None;
PDB_In_swigregister = _pd.PDB_In_swigregister
PDB_In_swigregister(PDB_In)

class PDB_RawWriter(StreamWriter):
    __swig_setmethods__ = {}
    for _s in [StreamWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_RawWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [StreamWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_RawWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_RawWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["UseBioInfo"] = _pd.PDB_RawWriter_UseBioInfo_set
    __swig_getmethods__["UseBioInfo"] = _pd.PDB_RawWriter_UseBioInfo_get
    if _newclass:UseBioInfo = _swig_property(_pd.PDB_RawWriter_UseBioInfo_get, _pd.PDB_RawWriter_UseBioInfo_set)
    def resetModelCount(*args): return _pd.PDB_RawWriter_resetModelCount(*args)
    def beginStream(*args): return _pd.PDB_RawWriter_beginStream(*args)
    def endStream(*args): return _pd.PDB_RawWriter_endStream(*args)
    def rawRemarks(*args): return _pd.PDB_RawWriter_rawRemarks(*args)
    def rawBeginModel(*args): return _pd.PDB_RawWriter_rawBeginModel(*args)
    def rawEndModel(*args): return _pd.PDB_RawWriter_rawEndModel(*args)
    def rawEnd(*args): return _pd.PDB_RawWriter_rawEnd(*args)
    def rawWriteFullHeader(*args): return _pd.PDB_RawWriter_rawWriteFullHeader(*args)
    def rawWrite(*args): return _pd.PDB_RawWriter_rawWrite(*args)
    __swig_destroy__ = _pd.delete_PDB_RawWriter
    __del__ = lambda self : None;
PDB_RawWriter_swigregister = _pd.PDB_RawWriter_swigregister
PDB_RawWriter_swigregister(PDB_RawWriter)

class PDB_Writer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PDB_Writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PDB_Writer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PDB_Writer(*args)
        try: self.this.append(this)
        except: self.this = this
    def write(*args): return _pd.PDB_Writer_write(*args)
    __swig_destroy__ = _pd.delete_PDB_Writer
    __del__ = lambda self : None;
PDB_Writer_swigregister = _pd.PDB_Writer_swigregister
PDB_Writer_swigregister(PDB_Writer)

class OutTra_PDB(OutputTrajectoryFile,PDB_RawWriter):
    __swig_setmethods__ = {}
    for _s in [OutputTrajectoryFile,PDB_RawWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutTra_PDB, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputTrajectoryFile,PDB_RawWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutTra_PDB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutTra_PDB(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutTra_PDB_clone(*args)
    def create(*args): return _pd.OutTra_PDB_create(*args)
    def append(*args): return _pd.OutTra_PDB_append(*args)
    __swig_destroy__ = _pd.delete_OutTra_PDB
    __del__ = lambda self : None;
OutTra_PDB_swigregister = _pd.OutTra_PDB_swigregister
OutTra_PDB_swigregister(OutTra_PDB)

class OutTra_PDB_Single(OutTra_PDB):
    __swig_setmethods__ = {}
    for _s in [OutTra_PDB]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutTra_PDB_Single, name, value)
    __swig_getmethods__ = {}
    for _s in [OutTra_PDB]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutTra_PDB_Single, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutTra_PDB_Single(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutTra_PDB_Single_clone(*args)
    def append(*args): return _pd.OutTra_PDB_Single_append(*args)
    __swig_destroy__ = _pd.delete_OutTra_PDB_Single
    __del__ = lambda self : None;
OutTra_PDB_Single_swigregister = _pd.OutTra_PDB_Single_swigregister
OutTra_PDB_Single_swigregister(OutTra_PDB_Single)

class OutputFile_PDB(OutputFile):
    __swig_setmethods__ = {}
    for _s in [OutputFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile_PDB, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile_PDB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutputFile_PDB(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutputFile_PDB_clone(*args)
    def save(*args): return _pd.OutputFile_PDB_save(*args)
    __swig_destroy__ = _pd.delete_OutputFile_PDB
    __del__ = lambda self : None;
OutputFile_PDB_swigregister = _pd.OutputFile_PDB_swigregister
OutputFile_PDB_swigregister(OutputFile_PDB)

PhiPsis = _pd.PhiPsis
Energies = _pd.Energies
ForceVectors = _pd.ForceVectors
MinimalIncludes = _pd.MinimalIncludes
DefaultIncludes = _pd.DefaultIncludes
AllIncludes = _pd.AllIncludes
class BTF_Header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Header, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Header(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BTF_Header
    __del__ = lambda self : None;
    def info(*args): return _pd.BTF_Header_info(*args)
    def load(*args): return _pd.BTF_Header_load(*args)
    def save(*args): return _pd.BTF_Header_save(*args)
    BTF_VERSION = _pd.BTF_Header_BTF_VERSION
    __swig_setmethods__["version"] = _pd.BTF_Header_version_set
    __swig_getmethods__["version"] = _pd.BTF_Header_version_get
    if _newclass:version = _swig_property(_pd.BTF_Header_version_get, _pd.BTF_Header_version_set)
    __swig_setmethods__["Type"] = _pd.BTF_Header_Type_set
    __swig_getmethods__["Type"] = _pd.BTF_Header_Type_get
    if _newclass:Type = _swig_property(_pd.BTF_Header_Type_get, _pd.BTF_Header_Type_set)
    __swig_setmethods__["residues"] = _pd.BTF_Header_residues_set
    __swig_getmethods__["residues"] = _pd.BTF_Header_residues_get
    if _newclass:residues = _swig_property(_pd.BTF_Header_residues_get, _pd.BTF_Header_residues_set)
    __swig_setmethods__["atoms"] = _pd.BTF_Header_atoms_set
    __swig_getmethods__["atoms"] = _pd.BTF_Header_atoms_get
    if _newclass:atoms = _swig_property(_pd.BTF_Header_atoms_get, _pd.BTF_Header_atoms_set)
    __swig_setmethods__["blocksize"] = _pd.BTF_Header_blocksize_set
    __swig_getmethods__["blocksize"] = _pd.BTF_Header_blocksize_get
    if _newclass:blocksize = _swig_property(_pd.BTF_Header_blocksize_get, _pd.BTF_Header_blocksize_set)
    __swig_setmethods__["trajectorystart"] = _pd.BTF_Header_trajectorystart_set
    __swig_getmethods__["trajectorystart"] = _pd.BTF_Header_trajectorystart_get
    if _newclass:trajectorystart = _swig_property(_pd.BTF_Header_trajectorystart_get, _pd.BTF_Header_trajectorystart_set)
    __swig_setmethods__["dateday"] = _pd.BTF_Header_dateday_set
    __swig_getmethods__["dateday"] = _pd.BTF_Header_dateday_get
    if _newclass:dateday = _swig_property(_pd.BTF_Header_dateday_get, _pd.BTF_Header_dateday_set)
    __swig_setmethods__["datemonth"] = _pd.BTF_Header_datemonth_set
    __swig_getmethods__["datemonth"] = _pd.BTF_Header_datemonth_get
    if _newclass:datemonth = _swig_property(_pd.BTF_Header_datemonth_get, _pd.BTF_Header_datemonth_set)
    __swig_setmethods__["dateyear"] = _pd.BTF_Header_dateyear_set
    __swig_getmethods__["dateyear"] = _pd.BTF_Header_dateyear_get
    if _newclass:dateyear = _swig_property(_pd.BTF_Header_dateyear_get, _pd.BTF_Header_dateyear_set)
    __swig_setmethods__["ID0"] = _pd.BTF_Header_ID0_set
    __swig_getmethods__["ID0"] = _pd.BTF_Header_ID0_get
    if _newclass:ID0 = _swig_property(_pd.BTF_Header_ID0_get, _pd.BTF_Header_ID0_set)
    __swig_setmethods__["ID1"] = _pd.BTF_Header_ID1_set
    __swig_getmethods__["ID1"] = _pd.BTF_Header_ID1_get
    if _newclass:ID1 = _swig_property(_pd.BTF_Header_ID1_get, _pd.BTF_Header_ID1_set)
    __swig_setmethods__["ID2"] = _pd.BTF_Header_ID2_set
    __swig_getmethods__["ID2"] = _pd.BTF_Header_ID2_get
    if _newclass:ID2 = _swig_property(_pd.BTF_Header_ID2_get, _pd.BTF_Header_ID2_set)
    __swig_setmethods__["ID3"] = _pd.BTF_Header_ID3_set
    __swig_getmethods__["ID3"] = _pd.BTF_Header_ID3_get
    if _newclass:ID3 = _swig_property(_pd.BTF_Header_ID3_get, _pd.BTF_Header_ID3_set)
    __swig_setmethods__["customAtomProperty"] = _pd.BTF_Header_customAtomProperty_set
    __swig_getmethods__["customAtomProperty"] = _pd.BTF_Header_customAtomProperty_get
    if _newclass:customAtomProperty = _swig_property(_pd.BTF_Header_customAtomProperty_get, _pd.BTF_Header_customAtomProperty_set)
    __swig_setmethods__["customEnergyEntry"] = _pd.BTF_Header_customEnergyEntry_set
    __swig_getmethods__["customEnergyEntry"] = _pd.BTF_Header_customEnergyEntry_get
    if _newclass:customEnergyEntry = _swig_property(_pd.BTF_Header_customEnergyEntry_get, _pd.BTF_Header_customEnergyEntry_set)
    __swig_setmethods__["descriptor"] = _pd.BTF_Header_descriptor_set
    __swig_getmethods__["descriptor"] = _pd.BTF_Header_descriptor_get
    if _newclass:descriptor = _swig_property(_pd.BTF_Header_descriptor_get, _pd.BTF_Header_descriptor_set)
    __swig_setmethods__["text"] = _pd.BTF_Header_text_set
    __swig_getmethods__["text"] = _pd.BTF_Header_text_get
    if _newclass:text = _swig_property(_pd.BTF_Header_text_get, _pd.BTF_Header_text_set)
BTF_Header_swigregister = _pd.BTF_Header_swigregister
BTF_Header_swigregister(BTF_Header)

class BTF_SystemDefinitionEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_SystemDefinitionEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_SystemDefinitionEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_SystemDefinitionEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(*args): return _pd.BTF_SystemDefinitionEntry_load(*args)
    def save(*args): return _pd.BTF_SystemDefinitionEntry_save(*args)
    def setFrom(*args): return _pd.BTF_SystemDefinitionEntry_setFrom(*args)
    def info(*args): return _pd.BTF_SystemDefinitionEntry_info(*args)
    __swig_setmethods__["atomnumber"] = _pd.BTF_SystemDefinitionEntry_atomnumber_set
    __swig_getmethods__["atomnumber"] = _pd.BTF_SystemDefinitionEntry_atomnumber_get
    if _newclass:atomnumber = _swig_property(_pd.BTF_SystemDefinitionEntry_atomnumber_get, _pd.BTF_SystemDefinitionEntry_atomnumber_set)
    __swig_setmethods__["pdbname"] = _pd.BTF_SystemDefinitionEntry_pdbname_set
    __swig_getmethods__["pdbname"] = _pd.BTF_SystemDefinitionEntry_pdbname_get
    if _newclass:pdbname = _swig_property(_pd.BTF_SystemDefinitionEntry_pdbname_get, _pd.BTF_SystemDefinitionEntry_pdbname_set)
    __swig_setmethods__["primitivetype"] = _pd.BTF_SystemDefinitionEntry_primitivetype_set
    __swig_getmethods__["primitivetype"] = _pd.BTF_SystemDefinitionEntry_primitivetype_get
    if _newclass:primitivetype = _swig_property(_pd.BTF_SystemDefinitionEntry_primitivetype_get, _pd.BTF_SystemDefinitionEntry_primitivetype_set)
    __swig_setmethods__["altname"] = _pd.BTF_SystemDefinitionEntry_altname_set
    __swig_getmethods__["altname"] = _pd.BTF_SystemDefinitionEntry_altname_get
    if _newclass:altname = _swig_property(_pd.BTF_SystemDefinitionEntry_altname_get, _pd.BTF_SystemDefinitionEntry_altname_set)
    __swig_setmethods__["parentnumber"] = _pd.BTF_SystemDefinitionEntry_parentnumber_set
    __swig_getmethods__["parentnumber"] = _pd.BTF_SystemDefinitionEntry_parentnumber_get
    if _newclass:parentnumber = _swig_property(_pd.BTF_SystemDefinitionEntry_parentnumber_get, _pd.BTF_SystemDefinitionEntry_parentnumber_set)
    __swig_setmethods__["parentname"] = _pd.BTF_SystemDefinitionEntry_parentname_set
    __swig_getmethods__["parentname"] = _pd.BTF_SystemDefinitionEntry_parentname_get
    if _newclass:parentname = _swig_property(_pd.BTF_SystemDefinitionEntry_parentname_get, _pd.BTF_SystemDefinitionEntry_parentname_set)
    __swig_setmethods__["targetx"] = _pd.BTF_SystemDefinitionEntry_targetx_set
    __swig_getmethods__["targetx"] = _pd.BTF_SystemDefinitionEntry_targetx_get
    if _newclass:targetx = _swig_property(_pd.BTF_SystemDefinitionEntry_targetx_get, _pd.BTF_SystemDefinitionEntry_targetx_set)
    __swig_setmethods__["targety"] = _pd.BTF_SystemDefinitionEntry_targety_set
    __swig_getmethods__["targety"] = _pd.BTF_SystemDefinitionEntry_targety_get
    if _newclass:targety = _swig_property(_pd.BTF_SystemDefinitionEntry_targety_get, _pd.BTF_SystemDefinitionEntry_targety_set)
    __swig_setmethods__["targetz"] = _pd.BTF_SystemDefinitionEntry_targetz_set
    __swig_getmethods__["targetz"] = _pd.BTF_SystemDefinitionEntry_targetz_get
    if _newclass:targetz = _swig_property(_pd.BTF_SystemDefinitionEntry_targetz_get, _pd.BTF_SystemDefinitionEntry_targetz_set)
    __swig_setmethods__["structureknown"] = _pd.BTF_SystemDefinitionEntry_structureknown_set
    __swig_getmethods__["structureknown"] = _pd.BTF_SystemDefinitionEntry_structureknown_get
    if _newclass:structureknown = _swig_property(_pd.BTF_SystemDefinitionEntry_structureknown_get, _pd.BTF_SystemDefinitionEntry_structureknown_set)
    __swig_setmethods__["cov12atom"] = _pd.BTF_SystemDefinitionEntry_cov12atom_set
    __swig_getmethods__["cov12atom"] = _pd.BTF_SystemDefinitionEntry_cov12atom_get
    if _newclass:cov12atom = _swig_property(_pd.BTF_SystemDefinitionEntry_cov12atom_get, _pd.BTF_SystemDefinitionEntry_cov12atom_set)
    __swig_setmethods__["n_cov12atoms"] = _pd.BTF_SystemDefinitionEntry_n_cov12atoms_set
    __swig_getmethods__["n_cov12atoms"] = _pd.BTF_SystemDefinitionEntry_n_cov12atoms_get
    if _newclass:n_cov12atoms = _swig_property(_pd.BTF_SystemDefinitionEntry_n_cov12atoms_get, _pd.BTF_SystemDefinitionEntry_n_cov12atoms_set)
    __swig_setmethods__["charge"] = _pd.BTF_SystemDefinitionEntry_charge_set
    __swig_getmethods__["charge"] = _pd.BTF_SystemDefinitionEntry_charge_get
    if _newclass:charge = _swig_property(_pd.BTF_SystemDefinitionEntry_charge_get, _pd.BTF_SystemDefinitionEntry_charge_set)
    __swig_setmethods__["radius"] = _pd.BTF_SystemDefinitionEntry_radius_set
    __swig_getmethods__["radius"] = _pd.BTF_SystemDefinitionEntry_radius_get
    if _newclass:radius = _swig_property(_pd.BTF_SystemDefinitionEntry_radius_get, _pd.BTF_SystemDefinitionEntry_radius_set)
    __swig_setmethods__["customProperty"] = _pd.BTF_SystemDefinitionEntry_customProperty_set
    __swig_getmethods__["customProperty"] = _pd.BTF_SystemDefinitionEntry_customProperty_get
    if _newclass:customProperty = _swig_property(_pd.BTF_SystemDefinitionEntry_customProperty_get, _pd.BTF_SystemDefinitionEntry_customProperty_set)
    __swig_destroy__ = _pd.delete_BTF_SystemDefinitionEntry
    __del__ = lambda self : None;
BTF_SystemDefinitionEntry_swigregister = _pd.BTF_SystemDefinitionEntry_swigregister
BTF_SystemDefinitionEntry_swigregister(BTF_SystemDefinitionEntry)

class BTF_Energy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Energy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Energy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Energy(*args)
        try: self.this.append(this)
        except: self.this = this
    def info(*args): return _pd.BTF_Energy_info(*args)
    def load(*args): return _pd.BTF_Energy_load(*args)
    def save(*args): return _pd.BTF_Energy_save(*args)
    __swig_setmethods__["Step"] = _pd.BTF_Energy_Step_set
    __swig_getmethods__["Step"] = _pd.BTF_Energy_Step_get
    if _newclass:Step = _swig_property(_pd.BTF_Energy_Step_get, _pd.BTF_Energy_Step_set)
    __swig_setmethods__["time"] = _pd.BTF_Energy_time_set
    __swig_getmethods__["time"] = _pd.BTF_Energy_time_get
    if _newclass:time = _swig_property(_pd.BTF_Energy_time_get, _pd.BTF_Energy_time_set)
    __swig_setmethods__["cRMS"] = _pd.BTF_Energy_cRMS_set
    __swig_getmethods__["cRMS"] = _pd.BTF_Energy_cRMS_get
    if _newclass:cRMS = _swig_property(_pd.BTF_Energy_cRMS_get, _pd.BTF_Energy_cRMS_set)
    __swig_setmethods__["dRMS"] = _pd.BTF_Energy_dRMS_set
    __swig_getmethods__["dRMS"] = _pd.BTF_Energy_dRMS_get
    if _newclass:dRMS = _swig_property(_pd.BTF_Energy_dRMS_get, _pd.BTF_Energy_dRMS_set)
    __swig_setmethods__["etot"] = _pd.BTF_Energy_etot_set
    __swig_getmethods__["etot"] = _pd.BTF_Energy_etot_get
    if _newclass:etot = _swig_property(_pd.BTF_Energy_etot_get, _pd.BTF_Energy_etot_set)
    __swig_setmethods__["epot"] = _pd.BTF_Energy_epot_set
    __swig_getmethods__["epot"] = _pd.BTF_Energy_epot_get
    if _newclass:epot = _swig_property(_pd.BTF_Energy_epot_get, _pd.BTF_Energy_epot_set)
    __swig_setmethods__["ekin"] = _pd.BTF_Energy_ekin_set
    __swig_getmethods__["ekin"] = _pd.BTF_Energy_ekin_get
    if _newclass:ekin = _swig_property(_pd.BTF_Energy_ekin_get, _pd.BTF_Energy_ekin_set)
    __swig_setmethods__["epot_bond"] = _pd.BTF_Energy_epot_bond_set
    __swig_getmethods__["epot_bond"] = _pd.BTF_Energy_epot_bond_get
    if _newclass:epot_bond = _swig_property(_pd.BTF_Energy_epot_bond_get, _pd.BTF_Energy_epot_bond_set)
    __swig_setmethods__["epot_angle"] = _pd.BTF_Energy_epot_angle_set
    __swig_getmethods__["epot_angle"] = _pd.BTF_Energy_epot_angle_get
    if _newclass:epot_angle = _swig_property(_pd.BTF_Energy_epot_angle_get, _pd.BTF_Energy_epot_angle_set)
    __swig_setmethods__["epot_torsion"] = _pd.BTF_Energy_epot_torsion_set
    __swig_getmethods__["epot_torsion"] = _pd.BTF_Energy_epot_torsion_get
    if _newclass:epot_torsion = _swig_property(_pd.BTF_Energy_epot_torsion_get, _pd.BTF_Energy_epot_torsion_set)
    __swig_setmethods__["epot_vdw"] = _pd.BTF_Energy_epot_vdw_set
    __swig_getmethods__["epot_vdw"] = _pd.BTF_Energy_epot_vdw_get
    if _newclass:epot_vdw = _swig_property(_pd.BTF_Energy_epot_vdw_get, _pd.BTF_Energy_epot_vdw_set)
    __swig_setmethods__["epot_elec"] = _pd.BTF_Energy_epot_elec_set
    __swig_getmethods__["epot_elec"] = _pd.BTF_Energy_epot_elec_get
    if _newclass:epot_elec = _swig_property(_pd.BTF_Energy_epot_elec_get, _pd.BTF_Energy_epot_elec_set)
    __swig_setmethods__["epot_surf"] = _pd.BTF_Energy_epot_surf_set
    __swig_getmethods__["epot_surf"] = _pd.BTF_Energy_epot_surf_get
    if _newclass:epot_surf = _swig_property(_pd.BTF_Energy_epot_surf_get, _pd.BTF_Energy_epot_surf_set)
    __swig_setmethods__["epot_pol"] = _pd.BTF_Energy_epot_pol_set
    __swig_getmethods__["epot_pol"] = _pd.BTF_Energy_epot_pol_get
    if _newclass:epot_pol = _swig_property(_pd.BTF_Energy_epot_pol_get, _pd.BTF_Energy_epot_pol_set)
    __swig_setmethods__["epot_pol_self"] = _pd.BTF_Energy_epot_pol_self_set
    __swig_getmethods__["epot_pol_self"] = _pd.BTF_Energy_epot_pol_self_get
    if _newclass:epot_pol_self = _swig_property(_pd.BTF_Energy_epot_pol_self_get, _pd.BTF_Energy_epot_pol_self_set)
    __swig_setmethods__["epot_pol_cross"] = _pd.BTF_Energy_epot_pol_cross_set
    __swig_getmethods__["epot_pol_cross"] = _pd.BTF_Energy_epot_pol_cross_get
    if _newclass:epot_pol_cross = _swig_property(_pd.BTF_Energy_epot_pol_cross_get, _pd.BTF_Energy_epot_pol_cross_set)
    __swig_setmethods__["epot_pol_totcross"] = _pd.BTF_Energy_epot_pol_totcross_set
    __swig_getmethods__["epot_pol_totcross"] = _pd.BTF_Energy_epot_pol_totcross_get
    if _newclass:epot_pol_totcross = _swig_property(_pd.BTF_Energy_epot_pol_totcross_get, _pd.BTF_Energy_epot_pol_totcross_set)
    __swig_setmethods__["epot_pol_tot"] = _pd.BTF_Energy_epot_pol_tot_set
    __swig_getmethods__["epot_pol_tot"] = _pd.BTF_Energy_epot_pol_tot_get
    if _newclass:epot_pol_tot = _swig_property(_pd.BTF_Energy_epot_pol_tot_get, _pd.BTF_Energy_epot_pol_tot_set)
    __swig_setmethods__["epot_hb_total"] = _pd.BTF_Energy_epot_hb_total_set
    __swig_getmethods__["epot_hb_total"] = _pd.BTF_Energy_epot_hb_total_get
    if _newclass:epot_hb_total = _swig_property(_pd.BTF_Energy_epot_hb_total_get, _pd.BTF_Energy_epot_hb_total_set)
    __swig_setmethods__["epot_hb_native"] = _pd.BTF_Energy_epot_hb_native_set
    __swig_getmethods__["epot_hb_native"] = _pd.BTF_Energy_epot_hb_native_get
    if _newclass:epot_hb_native = _swig_property(_pd.BTF_Energy_epot_hb_native_get, _pd.BTF_Energy_epot_hb_native_set)
    __swig_setmethods__["epot_4"] = _pd.BTF_Energy_epot_4_set
    __swig_getmethods__["epot_4"] = _pd.BTF_Energy_epot_4_get
    if _newclass:epot_4 = _swig_property(_pd.BTF_Energy_epot_4_get, _pd.BTF_Energy_epot_4_set)
    __swig_setmethods__["epot_5"] = _pd.BTF_Energy_epot_5_set
    __swig_getmethods__["epot_5"] = _pd.BTF_Energy_epot_5_get
    if _newclass:epot_5 = _swig_property(_pd.BTF_Energy_epot_5_get, _pd.BTF_Energy_epot_5_set)
    __swig_setmethods__["epot_6"] = _pd.BTF_Energy_epot_6_set
    __swig_getmethods__["epot_6"] = _pd.BTF_Energy_epot_6_get
    if _newclass:epot_6 = _swig_property(_pd.BTF_Energy_epot_6_get, _pd.BTF_Energy_epot_6_set)
    __swig_setmethods__["epot_custom"] = _pd.BTF_Energy_epot_custom_set
    __swig_getmethods__["epot_custom"] = _pd.BTF_Energy_epot_custom_get
    if _newclass:epot_custom = _swig_property(_pd.BTF_Energy_epot_custom_get, _pd.BTF_Energy_epot_custom_set)
    __swig_setmethods__["data1"] = _pd.BTF_Energy_data1_set
    __swig_getmethods__["data1"] = _pd.BTF_Energy_data1_get
    if _newclass:data1 = _swig_property(_pd.BTF_Energy_data1_get, _pd.BTF_Energy_data1_set)
    __swig_setmethods__["data2"] = _pd.BTF_Energy_data2_set
    __swig_getmethods__["data2"] = _pd.BTF_Energy_data2_get
    if _newclass:data2 = _swig_property(_pd.BTF_Energy_data2_get, _pd.BTF_Energy_data2_set)
    __swig_setmethods__["data3"] = _pd.BTF_Energy_data3_set
    __swig_getmethods__["data3"] = _pd.BTF_Energy_data3_get
    if _newclass:data3 = _swig_property(_pd.BTF_Energy_data3_get, _pd.BTF_Energy_data3_set)
    __swig_setmethods__["data4"] = _pd.BTF_Energy_data4_set
    __swig_getmethods__["data4"] = _pd.BTF_Energy_data4_get
    if _newclass:data4 = _swig_property(_pd.BTF_Energy_data4_get, _pd.BTF_Energy_data4_set)
    __swig_setmethods__["data5"] = _pd.BTF_Energy_data5_set
    __swig_getmethods__["data5"] = _pd.BTF_Energy_data5_get
    if _newclass:data5 = _swig_property(_pd.BTF_Energy_data5_get, _pd.BTF_Energy_data5_set)
    __swig_setmethods__["data6"] = _pd.BTF_Energy_data6_set
    __swig_getmethods__["data6"] = _pd.BTF_Energy_data6_get
    if _newclass:data6 = _swig_property(_pd.BTF_Energy_data6_get, _pd.BTF_Energy_data6_set)
    __swig_setmethods__["data7"] = _pd.BTF_Energy_data7_set
    __swig_getmethods__["data7"] = _pd.BTF_Energy_data7_get
    if _newclass:data7 = _swig_property(_pd.BTF_Energy_data7_get, _pd.BTF_Energy_data7_set)
    __swig_setmethods__["data8"] = _pd.BTF_Energy_data8_set
    __swig_getmethods__["data8"] = _pd.BTF_Energy_data8_get
    if _newclass:data8 = _swig_property(_pd.BTF_Energy_data8_get, _pd.BTF_Energy_data8_set)
    __swig_setmethods__["data9"] = _pd.BTF_Energy_data9_set
    __swig_getmethods__["data9"] = _pd.BTF_Energy_data9_get
    if _newclass:data9 = _swig_property(_pd.BTF_Energy_data9_get, _pd.BTF_Energy_data9_set)
    __swig_setmethods__["data10"] = _pd.BTF_Energy_data10_set
    __swig_getmethods__["data10"] = _pd.BTF_Energy_data10_get
    if _newclass:data10 = _swig_property(_pd.BTF_Energy_data10_get, _pd.BTF_Energy_data10_set)
    __swig_setmethods__["fill"] = _pd.BTF_Energy_fill_set
    __swig_getmethods__["fill"] = _pd.BTF_Energy_fill_get
    if _newclass:fill = _swig_property(_pd.BTF_Energy_fill_get, _pd.BTF_Energy_fill_set)
    __swig_destroy__ = _pd.delete_BTF_Energy
    __del__ = lambda self : None;
BTF_Energy_swigregister = _pd.BTF_Energy_swigregister
BTF_Energy_swigregister(BTF_Energy)

class BTF_Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Block, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_BTF_Block
    __del__ = lambda self : None;
    def clone(*args): return _pd.BTF_Block_clone(*args)
BTF_Block_swigregister = _pd.BTF_Block_swigregister
BTF_Block_swigregister(BTF_Block)

class BTF_Block_Vector(BTF_Block,IDrawProvider):
    __swig_setmethods__ = {}
    for _s in [BTF_Block,IDrawProvider]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Block_Vector, name, value)
    __swig_getmethods__ = {}
    for _s in [BTF_Block,IDrawProvider]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Block_Vector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Block_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BTF_Block_Vector
    __del__ = lambda self : None;
    def clone(*args): return _pd.BTF_Block_Vector_clone(*args)
    def getVectorCount(*args): return _pd.BTF_Block_Vector_getVectorCount(*args)
    def request(*args): return _pd.BTF_Block_Vector_request(*args)
    def ForceClear(*args): return _pd.BTF_Block_Vector_ForceClear(*args)
BTF_Block_Vector_swigregister = _pd.BTF_Block_Vector_swigregister
BTF_Block_Vector_swigregister(BTF_Block_Vector)

class BTF_Block_Comment(StringBuilder,BTF_Block):
    __swig_setmethods__ = {}
    for _s in [StringBuilder,BTF_Block]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Block_Comment, name, value)
    __swig_getmethods__ = {}
    for _s in [StringBuilder,BTF_Block]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Block_Comment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Block_Comment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BTF_Block_Comment
    __del__ = lambda self : None;
    def clone(*args): return _pd.BTF_Block_Comment_clone(*args)
    def getTraCapactity(*args): return _pd.BTF_Block_Comment_getTraCapactity(*args)
BTF_Block_Comment_swigregister = _pd.BTF_Block_Comment_swigregister
BTF_Block_Comment_swigregister(BTF_Block_Comment)

class BTF_Block_Comment_User(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Block_Comment_User, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Block_Comment_User, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Block_Comment_User(*args)
        try: self.this.append(this)
        except: self.this = this
    def hasTraComments(*args): return _pd.BTF_Block_Comment_User_hasTraComments(*args)
    def enableComments(*args): return _pd.BTF_Block_Comment_User_enableComments(*args)
    def getTraComments(*args): return _pd.BTF_Block_Comment_User_getTraComments(*args)
    __swig_destroy__ = _pd.delete_BTF_Block_Comment_User
    __del__ = lambda self : None;
BTF_Block_Comment_User_swigregister = _pd.BTF_Block_Comment_User_swigregister
BTF_Block_Comment_User_swigregister(BTF_Block_Comment_User)

class BTF_Block_Vector_User(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Block_Vector_User, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Block_Vector_User, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Block_Vector_User(*args)
        try: self.this.append(this)
        except: self.this = this
    def hasTraVectors(*args): return _pd.BTF_Block_Vector_User_hasTraVectors(*args)
    def enableVectors(*args): return _pd.BTF_Block_Vector_User_enableVectors(*args)
    def getTraVectors(*args): return _pd.BTF_Block_Vector_User_getTraVectors(*args)
    __swig_destroy__ = _pd.delete_BTF_Block_Vector_User
    __del__ = lambda self : None;
BTF_Block_Vector_User_swigregister = _pd.BTF_Block_Vector_User_swigregister
BTF_Block_Vector_User_swigregister(BTF_Block_Vector_User)

class BTF_Base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Base, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.BTF_Base_clone(*args)
    __swig_destroy__ = _pd.delete_BTF_Base
    __del__ = lambda self : None;
BTF_Base_swigregister = _pd.BTF_Base_swigregister
BTF_Base_swigregister(BTF_Base)

class OutTra_BTF(BTF_Base,OutputTrajectoryFile):
    __swig_setmethods__ = {}
    for _s in [BTF_Base,OutputTrajectoryFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutTra_BTF, name, value)
    __swig_getmethods__ = {}
    for _s in [BTF_Base,OutputTrajectoryFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutTra_BTF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutTra_BTF(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutTra_BTF_clone(*args)
    def create(*args): return _pd.OutTra_BTF_create(*args)
    def append(*args): return _pd.OutTra_BTF_append(*args)
    def addOwnedBlock(*args): return _pd.OutTra_BTF_addOwnedBlock(*args)
    def addBlock(*args): return _pd.OutTra_BTF_addBlock(*args)
    __swig_destroy__ = _pd.delete_OutTra_BTF
    __del__ = lambda self : None;
OutTra_BTF_swigregister = _pd.OutTra_BTF_swigregister
OutTra_BTF_swigregister(OutTra_BTF)

class BTF_ImportBase(BTF_Base):
    __swig_setmethods__ = {}
    for _s in [BTF_Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_ImportBase, name, value)
    __swig_getmethods__ = {}
    for _s in [BTF_Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_ImportBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    CA = _pd.BTF_ImportBase_CA
    N = _pd.BTF_ImportBase_N
    O = _pd.BTF_ImportBase_O
    C = _pd.BTF_ImportBase_C
    Sidechain = _pd.BTF_ImportBase_Sidechain
    Hydrogens = _pd.BTF_ImportBase_Hydrogens
    Backbone = _pd.BTF_ImportBase_Backbone
    HeavyAtom = _pd.BTF_ImportBase_HeavyAtom
    All = _pd.BTF_ImportBase_All
    def clone(*args): return _pd.BTF_ImportBase_clone(*args)
    def reOpen(*args): return _pd.BTF_ImportBase_reOpen(*args)
    def validateFile(*args): return _pd.BTF_ImportBase_validateFile(*args)
    def info(*args): return _pd.BTF_ImportBase_info(*args)
    def recountEntries(*args): return _pd.BTF_ImportBase_recountEntries(*args)
    def getEntryCount(*args): return _pd.BTF_ImportBase_getEntryCount(*args)
    def size(*args): return _pd.BTF_ImportBase_size(*args)
    def getSequence(*args): return _pd.BTF_ImportBase_getSequence(*args)
    __swig_destroy__ = _pd.delete_BTF_ImportBase
    __del__ = lambda self : None;
BTF_ImportBase_swigregister = _pd.BTF_ImportBase_swigregister
BTF_ImportBase_swigregister(BTF_ImportBase)

class InTra_BTF(BTF_ImportBase,InputTrajectory_RandomAccess):
    __swig_setmethods__ = {}
    for _s in [BTF_ImportBase,InputTrajectory_RandomAccess]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, InTra_BTF, name, value)
    __swig_getmethods__ = {}
    for _s in [BTF_ImportBase,InputTrajectory_RandomAccess]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InTra_BTF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_InTra_BTF(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.InTra_BTF_clone(*args)
    def loadIntoSystem(*args): return _pd.InTra_BTF_loadIntoSystem(*args)
    def readNext(*args): return _pd.InTra_BTF_readNext(*args)
    def skip(*args): return _pd.InTra_BTF_skip(*args)
    def isEndOfFile(*args): return _pd.InTra_BTF_isEndOfFile(*args)
    def reset(*args): return _pd.InTra_BTF_reset(*args)
    def readRandomAccess(*args): return _pd.InTra_BTF_readRandomAccess(*args)
    def nEntries(*args): return _pd.InTra_BTF_nEntries(*args)
    __swig_destroy__ = _pd.delete_InTra_BTF
    __del__ = lambda self : None;
InTra_BTF_swigregister = _pd.InTra_BTF_swigregister
InTra_BTF_swigregister(InTra_BTF)

class BTF_Tools(BTF_ImportBase):
    __swig_setmethods__ = {}
    for _s in [BTF_ImportBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BTF_Tools, name, value)
    __swig_getmethods__ = {}
    for _s in [BTF_ImportBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BTF_Tools, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BTF_Tools(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.BTF_Tools_clone(*args)
    def getCoordinates(*args): return _pd.BTF_Tools_getCoordinates(*args)
    def savePDBFile(*args): return _pd.BTF_Tools_savePDBFile(*args)
    __swig_destroy__ = _pd.delete_BTF_Tools
    __del__ = lambda self : None;
BTF_Tools_swigregister = _pd.BTF_Tools_swigregister
BTF_Tools_swigregister(BTF_Tools)

loadtra = _pd.loadtra
class OutputFile_BTF(OutputFile):
    __swig_setmethods__ = {}
    for _s in [OutputFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile_BTF, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile_BTF, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OutputFile_BTF(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.OutputFile_BTF_clone(*args)
    def save(*args): return _pd.OutputFile_BTF_save(*args)
    __swig_destroy__ = _pd.delete_OutputFile_BTF
    __del__ = lambda self : None;
OutputFile_BTF_swigregister = _pd.OutputFile_BTF_swigregister
OutputFile_BTF_swigregister(OutputFile_BTF)

class Space(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Space, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Space, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def info(*args): return _pd.Space_info(*args)
    def getImage(*args): return _pd.Space_getImage(*args)
    def getClosestImage(*args): return _pd.Space_getClosestImage(*args)
    def ncells(*args): return _pd.Space_ncells(*args)
    def moveIntoBox(*args): return _pd.Space_moveIntoBox(*args)
    def moveIntoCell(*args): return _pd.Space_moveIntoCell(*args)
    def setupCellDimensions(*args): return _pd.Space_setupCellDimensions(*args)
    def scale(*args): return _pd.Space_scale(*args)
    def nBasisVectors(*args): return _pd.Space_nBasisVectors(*args)
    def getBasisVector(*args): return _pd.Space_getBasisVector(*args)
    def getSmallestChord(*args): return _pd.Space_getSmallestChord(*args)
    __swig_setmethods__["savedist"] = _pd.Space_savedist_set
    __swig_getmethods__["savedist"] = _pd.Space_savedist_get
    if _newclass:savedist = _swig_property(_pd.Space_savedist_get, _pd.Space_savedist_set)
    __swig_destroy__ = _pd.delete_Space
    __del__ = lambda self : None;
Space_swigregister = _pd.Space_swigregister
Space_swigregister(Space)

class ClosedSpace(Space):
    __swig_setmethods__ = {}
    for _s in [Space]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ClosedSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [Space]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClosedSpace, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def volume(*args): return _pd.ClosedSpace_volume(*args)
    def getEvenPointDistribution(*args): return _pd.ClosedSpace_getEvenPointDistribution(*args)
    def getBoxVectors(*args): return _pd.ClosedSpace_getBoxVectors(*args)
    __swig_destroy__ = _pd.delete_ClosedSpace
    __del__ = lambda self : None;
ClosedSpace_swigregister = _pd.ClosedSpace_swigregister
ClosedSpace_swigregister(ClosedSpace)

class InfiniteSpace(Space):
    __swig_setmethods__ = {}
    for _s in [Space]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, InfiniteSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [Space]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfiniteSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_InfiniteSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    def info(*args): return _pd.InfiniteSpace_info(*args)
    def getImage(*args): return _pd.InfiniteSpace_getImage(*args)
    def getClosestImage(*args): return _pd.InfiniteSpace_getClosestImage(*args)
    def ncells(*args): return _pd.InfiniteSpace_ncells(*args)
    def ncells_inline(*args): return _pd.InfiniteSpace_ncells_inline(*args)
    def moveIntoBox(*args): return _pd.InfiniteSpace_moveIntoBox(*args)
    def moveIntoCell(*args): return _pd.InfiniteSpace_moveIntoCell(*args)
    def setupCellDimensions(*args): return _pd.InfiniteSpace_setupCellDimensions(*args)
    def scale(*args): return _pd.InfiniteSpace_scale(*args)
    __swig_destroy__ = _pd.delete_InfiniteSpace
    __del__ = lambda self : None;
InfiniteSpace_swigregister = _pd.InfiniteSpace_swigregister
InfiniteSpace_swigregister(InfiniteSpace)

class PeriodicBox(ClosedSpace):
    __swig_setmethods__ = {}
    for _s in [ClosedSpace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PeriodicBox, name, value)
    __swig_getmethods__ = {}
    for _s in [ClosedSpace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeriodicBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PeriodicBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def info(*args): return _pd.PeriodicBox_info(*args)
    def getImage(*args): return _pd.PeriodicBox_getImage(*args)
    def getClosestImage(*args): return _pd.PeriodicBox_getClosestImage(*args)
    def ncells(*args): return _pd.PeriodicBox_ncells(*args)
    def ncells_inline(*args): return _pd.PeriodicBox_ncells_inline(*args)
    def moveIntoBox(*args): return _pd.PeriodicBox_moveIntoBox(*args)
    def moveIntoCell(*args): return _pd.PeriodicBox_moveIntoCell(*args)
    def setupCellDimensions(*args): return _pd.PeriodicBox_setupCellDimensions(*args)
    def volume(*args): return _pd.PeriodicBox_volume(*args)
    def getEvenPointDistribution(*args): return _pd.PeriodicBox_getEvenPointDistribution(*args)
    def scale(*args): return _pd.PeriodicBox_scale(*args)
    def nBasisVectors(*args): return _pd.PeriodicBox_nBasisVectors(*args)
    def getBasisVector(*args): return _pd.PeriodicBox_getBasisVector(*args)
    def getSmallestChord(*args): return _pd.PeriodicBox_getSmallestChord(*args)
    def getBoxVectors(*args): return _pd.PeriodicBox_getBoxVectors(*args)
    __swig_setmethods__["boxSize"] = _pd.PeriodicBox_boxSize_set
    __swig_getmethods__["boxSize"] = _pd.PeriodicBox_boxSize_get
    if _newclass:boxSize = _swig_property(_pd.PeriodicBox_boxSize_get, _pd.PeriodicBox_boxSize_set)
    __swig_setmethods__["halfBoxSize"] = _pd.PeriodicBox_halfBoxSize_set
    __swig_getmethods__["halfBoxSize"] = _pd.PeriodicBox_halfBoxSize_get
    if _newclass:halfBoxSize = _swig_property(_pd.PeriodicBox_halfBoxSize_get, _pd.PeriodicBox_halfBoxSize_set)
    __swig_setmethods__["cellSize"] = _pd.PeriodicBox_cellSize_set
    __swig_getmethods__["cellSize"] = _pd.PeriodicBox_cellSize_get
    if _newclass:cellSize = _swig_property(_pd.PeriodicBox_cellSize_get, _pd.PeriodicBox_cellSize_set)
    __swig_setmethods__["halfCellSize"] = _pd.PeriodicBox_halfCellSize_set
    __swig_getmethods__["halfCellSize"] = _pd.PeriodicBox_halfCellSize_get
    if _newclass:halfCellSize = _swig_property(_pd.PeriodicBox_halfCellSize_get, _pd.PeriodicBox_halfCellSize_set)
    __swig_setmethods__["vi"] = _pd.PeriodicBox_vi_set
    __swig_getmethods__["vi"] = _pd.PeriodicBox_vi_get
    if _newclass:vi = _swig_property(_pd.PeriodicBox_vi_get, _pd.PeriodicBox_vi_set)
    __swig_setmethods__["vj"] = _pd.PeriodicBox_vj_set
    __swig_getmethods__["vj"] = _pd.PeriodicBox_vj_get
    if _newclass:vj = _swig_property(_pd.PeriodicBox_vj_get, _pd.PeriodicBox_vj_set)
    __swig_setmethods__["vk"] = _pd.PeriodicBox_vk_set
    __swig_getmethods__["vk"] = _pd.PeriodicBox_vk_get
    if _newclass:vk = _swig_property(_pd.PeriodicBox_vk_get, _pd.PeriodicBox_vk_set)
    __swig_setmethods__["celloffset"] = _pd.PeriodicBox_celloffset_set
    __swig_getmethods__["celloffset"] = _pd.PeriodicBox_celloffset_get
    if _newclass:celloffset = _swig_property(_pd.PeriodicBox_celloffset_get, _pd.PeriodicBox_celloffset_set)
    __swig_setmethods__["basisvector"] = _pd.PeriodicBox_basisvector_set
    __swig_getmethods__["basisvector"] = _pd.PeriodicBox_basisvector_get
    if _newclass:basisvector = _swig_property(_pd.PeriodicBox_basisvector_get, _pd.PeriodicBox_basisvector_set)
    __swig_setmethods__["nx"] = _pd.PeriodicBox_nx_set
    __swig_getmethods__["nx"] = _pd.PeriodicBox_nx_get
    if _newclass:nx = _swig_property(_pd.PeriodicBox_nx_get, _pd.PeriodicBox_nx_set)
    __swig_setmethods__["ny"] = _pd.PeriodicBox_ny_set
    __swig_getmethods__["ny"] = _pd.PeriodicBox_ny_get
    if _newclass:ny = _swig_property(_pd.PeriodicBox_ny_get, _pd.PeriodicBox_ny_set)
    __swig_setmethods__["nz"] = _pd.PeriodicBox_nz_set
    __swig_getmethods__["nz"] = _pd.PeriodicBox_nz_get
    if _newclass:nz = _swig_property(_pd.PeriodicBox_nz_get, _pd.PeriodicBox_nz_set)
    __swig_setmethods__["m_cutoff"] = _pd.PeriodicBox_m_cutoff_set
    __swig_getmethods__["m_cutoff"] = _pd.PeriodicBox_m_cutoff_get
    if _newclass:m_cutoff = _swig_property(_pd.PeriodicBox_m_cutoff_get, _pd.PeriodicBox_m_cutoff_set)
    __swig_setmethods__["m_sqrcutoff"] = _pd.PeriodicBox_m_sqrcutoff_set
    __swig_getmethods__["m_sqrcutoff"] = _pd.PeriodicBox_m_sqrcutoff_get
    if _newclass:m_sqrcutoff = _swig_property(_pd.PeriodicBox_m_sqrcutoff_get, _pd.PeriodicBox_m_sqrcutoff_set)
    __swig_setmethods__["need_replicas"] = _pd.PeriodicBox_need_replicas_set
    __swig_getmethods__["need_replicas"] = _pd.PeriodicBox_need_replicas_get
    if _newclass:need_replicas = _swig_property(_pd.PeriodicBox_need_replicas_get, _pd.PeriodicBox_need_replicas_set)
    __swig_destroy__ = _pd.delete_PeriodicBox
    __del__ = lambda self : None;
PeriodicBox_swigregister = _pd.PeriodicBox_swigregister
PeriodicBox_swigregister(PeriodicBox)

castTo_ClosedSpace = _pd.castTo_ClosedSpace
class AtomOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AtomOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["j"] = _pd.AtomOrder_j_set
    __swig_getmethods__["j"] = _pd.AtomOrder_j_get
    if _newclass:j = _swig_property(_pd.AtomOrder_j_get, _pd.AtomOrder_j_set)
    __swig_setmethods__["order"] = _pd.AtomOrder_order_set
    __swig_getmethods__["order"] = _pd.AtomOrder_order_get
    if _newclass:order = _swig_property(_pd.AtomOrder_order_get, _pd.AtomOrder_order_set)
    def __init__(self, *args): 
        this = _pd.new_AtomOrder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_AtomOrder
    __del__ = lambda self : None;
AtomOrder_swigregister = _pd.AtomOrder_swigregister
AtomOrder_swigregister(AtomOrder)
BondOrder_1_1_Pair = cvar.BondOrder_1_1_Pair
BondOrder_1_2_Pair = cvar.BondOrder_1_2_Pair
BondOrder_1_3_Pair = cvar.BondOrder_1_3_Pair
BondOrder_1_4_Pair = cvar.BondOrder_1_4_Pair
BondOrder_1_5_Pair = cvar.BondOrder_1_5_Pair
BondOrder_1_6_Pair = cvar.BondOrder_1_6_Pair

class LongBondOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, LongBondOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongBondOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _pd.LongBondOrder_i_set
    __swig_getmethods__["i"] = _pd.LongBondOrder_i_get
    if _newclass:i = _swig_property(_pd.LongBondOrder_i_get, _pd.LongBondOrder_i_set)
    __swig_setmethods__["partner"] = _pd.LongBondOrder_partner_set
    __swig_getmethods__["partner"] = _pd.LongBondOrder_partner_get
    if _newclass:partner = _swig_property(_pd.LongBondOrder_partner_get, _pd.LongBondOrder_partner_set)
    def memuse(*args): return _pd.LongBondOrder_memuse(*args)
    def __init__(self, *args): 
        this = _pd.new_LongBondOrder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_LongBondOrder
    __del__ = lambda self : None;
LongBondOrder_swigregister = _pd.LongBondOrder_swigregister
LongBondOrder_swigregister(LongBondOrder)

class BondOrder(WorkSpaceComponentBase):
    __swig_setmethods__ = {}
    for _s in [WorkSpaceComponentBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BondOrder, name, value)
    __swig_getmethods__ = {}
    for _s in [WorkSpaceComponentBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondOrder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BondOrder(*args)
        try: self.this.append(this)
        except: self.this = this
    def memuse(*args): return _pd.BondOrder_memuse(*args)
    def getBondOrder(*args): return _pd.BondOrder_getBondOrder(*args)
    def getDiagBondOrder(*args): return _pd.BondOrder_getDiagBondOrder(*args)
    def getOffDiagBondOrder(*args): return _pd.BondOrder_getOffDiagBondOrder(*args)
    def isOffDiag(*args): return _pd.BondOrder_isOffDiag(*args)
    def getMaxIndexDelta(*args): return _pd.BondOrder_getMaxIndexDelta(*args)
    def getMaxBondOrder(*args): return _pd.BondOrder_getMaxBondOrder(*args)
    def getOffDiagData(*args): return _pd.BondOrder_getOffDiagData(*args)
    def getDiagData(*args): return _pd.BondOrder_getDiagData(*args)
    __swig_destroy__ = _pd.delete_BondOrder
    __del__ = lambda self : None;
BondOrder_swigregister = _pd.BondOrder_swigregister
BondOrder_swigregister(BondOrder)

class NeighbourData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _pd.NeighbourData_n_set
    __swig_getmethods__["n"] = _pd.NeighbourData_n_get
    if _newclass:n = _swig_property(_pd.NeighbourData_n_get, _pd.NeighbourData_n_set)
    __swig_setmethods__["i"] = _pd.NeighbourData_i_set
    __swig_getmethods__["i"] = _pd.NeighbourData_i_get
    if _newclass:i = _swig_property(_pd.NeighbourData_i_get, _pd.NeighbourData_i_set)
    __swig_setmethods__["Type"] = _pd.NeighbourData_Type_set
    __swig_getmethods__["Type"] = _pd.NeighbourData_Type_get
    if _newclass:Type = _swig_property(_pd.NeighbourData_Type_get, _pd.NeighbourData_Type_set)
    def __init__(self, *args): 
        this = _pd.new_NeighbourData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NeighbourData
    __del__ = lambda self : None;
NeighbourData_swigregister = _pd.NeighbourData_swigregister
NeighbourData_swigregister(NeighbourData)

class NeighbourListBase(WorkSpaceComponentBase):
    __swig_setmethods__ = {}
    for _s in [WorkSpaceComponentBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourListBase, name, value)
    __swig_getmethods__ = {}
    for _s in [WorkSpaceComponentBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourListBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_NeighbourListBase
    __del__ = lambda self : None;
    def memuse(*args): return _pd.NeighbourListBase_memuse(*args)
    def getData(*args): return _pd.NeighbourListBase_getData(*args)
    def enable(*args): return _pd.NeighbourListBase_enable(*args)
    def disable(*args): return _pd.NeighbourListBase_disable(*args)
    def calcShadow(*args): return _pd.NeighbourListBase_calcShadow(*args)
    def requestCutoff(*args): return _pd.NeighbourListBase_requestCutoff(*args)
    def setPadding(*args): return _pd.NeighbourListBase_setPadding(*args)
    def getFullUpdateCount(*args): return _pd.NeighbourListBase_getFullUpdateCount(*args)
    def nNeighbours(*args): return _pd.NeighbourListBase_nNeighbours(*args)
    def getNeighbourIndex(*args): return _pd.NeighbourListBase_getNeighbourIndex(*args)
    def getNeighbourBondOrder(*args): return _pd.NeighbourListBase_getNeighbourBondOrder(*args)
    def getNeighbourImageNumber(*args): return _pd.NeighbourListBase_getNeighbourImageNumber(*args)
    def calcNewList(*args): return _pd.NeighbourListBase_calcNewList(*args)
NeighbourListBase_swigregister = _pd.NeighbourListBase_swigregister
NeighbourListBase_swigregister(NeighbourListBase)

NList32Bit_Index = _pd.NList32Bit_Index
NList32Bit_BondOrder = _pd.NList32Bit_BondOrder
NList32Bit_ImageNumber = _pd.NList32Bit_ImageNumber
class NeighbourList_32Bit_Base(NeighbourListBase):
    __swig_setmethods__ = {}
    for _s in [NeighbourListBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourList_32Bit_Base, name, value)
    __swig_getmethods__ = {}
    for _s in [NeighbourListBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourList_32Bit_Base, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_NeighbourList_32Bit_Base
    __del__ = lambda self : None;
    def reassignList(*args): return _pd.NeighbourList_32Bit_Base_reassignList(*args)
    def nNeighbours(*args): return _pd.NeighbourList_32Bit_Base_nNeighbours(*args)
    def getNeighbourIndex(*args): return _pd.NeighbourList_32Bit_Base_getNeighbourIndex(*args)
    def getNeighbourBondOrder(*args): return _pd.NeighbourList_32Bit_Base_getNeighbourBondOrder(*args)
    def getNeighbourImageNumber(*args): return _pd.NeighbourList_32Bit_Base_getNeighbourImageNumber(*args)
NeighbourList_32Bit_Base_swigregister = _pd.NeighbourList_32Bit_Base_swigregister
NeighbourList_32Bit_Base_swigregister(NeighbourList_32Bit_Base)

class NeighbourList(NeighbourList_32Bit_Base):
    __swig_setmethods__ = {}
    for _s in [NeighbourList_32Bit_Base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourList, name, value)
    __swig_getmethods__ = {}
    for _s in [NeighbourList_32Bit_Base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NeighbourList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NeighbourList
    __del__ = lambda self : None;
    def calcNewList(*args): return _pd.NeighbourList_calcNewList(*args)
NeighbourList_swigregister = _pd.NeighbourList_swigregister
NeighbourList_swigregister(NeighbourList)

class NeighbourList_GroupBased(NeighbourList):
    __swig_setmethods__ = {}
    for _s in [NeighbourList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourList_GroupBased, name, value)
    __swig_getmethods__ = {}
    for _s in [NeighbourList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourList_GroupBased, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NeighbourList_GroupBased(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NeighbourList_GroupBased
    __del__ = lambda self : None;
NeighbourList_GroupBased_swigregister = _pd.NeighbourList_GroupBased_swigregister
NeighbourList_GroupBased_swigregister(NeighbourList_GroupBased)

class DeprecatedNeighbourList(NeighbourListBase):
    __swig_setmethods__ = {}
    for _s in [NeighbourListBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DeprecatedNeighbourList, name, value)
    __swig_getmethods__ = {}
    for _s in [NeighbourListBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeprecatedNeighbourList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_DeprecatedNeighbourList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_DeprecatedNeighbourList
    __del__ = lambda self : None;
    def nNeighbours(*args): return _pd.DeprecatedNeighbourList_nNeighbours(*args)
    def getNeighbourIndex(*args): return _pd.DeprecatedNeighbourList_getNeighbourIndex(*args)
    def getNeighbourBondOrder(*args): return _pd.DeprecatedNeighbourList_getNeighbourBondOrder(*args)
    def getNeighbourImageNumber(*args): return _pd.DeprecatedNeighbourList_getNeighbourImageNumber(*args)
    def calcNewList(*args): return _pd.DeprecatedNeighbourList_calcNewList(*args)
DeprecatedNeighbourList_swigregister = _pd.DeprecatedNeighbourList_swigregister
DeprecatedNeighbourList_swigregister(DeprecatedNeighbourList)

class NeighbourList_GeneralBoundary(NeighbourListBase):
    __swig_setmethods__ = {}
    for _s in [NeighbourListBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourList_GeneralBoundary, name, value)
    __swig_getmethods__ = {}
    for _s in [NeighbourListBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourList_GeneralBoundary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NeighbourList_GeneralBoundary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NeighbourList_GeneralBoundary
    __del__ = lambda self : None;
    def nNeighbours(*args): return _pd.NeighbourList_GeneralBoundary_nNeighbours(*args)
    def getNeighbourIndex(*args): return _pd.NeighbourList_GeneralBoundary_getNeighbourIndex(*args)
    def getNeighbourBondOrder(*args): return _pd.NeighbourList_GeneralBoundary_getNeighbourBondOrder(*args)
    def getNeighbourImageNumber(*args): return _pd.NeighbourList_GeneralBoundary_getNeighbourImageNumber(*args)
    def calcNewList(*args): return _pd.NeighbourList_GeneralBoundary_calcNewList(*args)
NeighbourList_GeneralBoundary_swigregister = _pd.NeighbourList_GeneralBoundary_swigregister
NeighbourList_GeneralBoundary_swigregister(NeighbourList_GeneralBoundary)

class NeighbourList_PeriodicBox(NeighbourListBase):
    __swig_setmethods__ = {}
    for _s in [NeighbourListBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NeighbourList_PeriodicBox, name, value)
    __swig_getmethods__ = {}
    for _s in [NeighbourListBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeighbourList_PeriodicBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NeighbourList_PeriodicBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NeighbourList_PeriodicBox
    __del__ = lambda self : None;
    def nNeighbours(*args): return _pd.NeighbourList_PeriodicBox_nNeighbours(*args)
    def getNeighbourIndex(*args): return _pd.NeighbourList_PeriodicBox_getNeighbourIndex(*args)
    def getNeighbourBondOrder(*args): return _pd.NeighbourList_PeriodicBox_getNeighbourBondOrder(*args)
    def getNeighbourImageNumber(*args): return _pd.NeighbourList_PeriodicBox_getNeighbourImageNumber(*args)
    def calcNewList(*args): return _pd.NeighbourList_PeriodicBox_calcNewList(*args)
NeighbourList_PeriodicBox_swigregister = _pd.NeighbourList_PeriodicBox_swigregister
NeighbourList_PeriodicBox_swigregister(NeighbourList_PeriodicBox)

MAXROTATABLEBONDSEGS = _pd.MAXROTATABLEBONDSEGS
class RotatableBond(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotatableBond, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotatableBond, name)
    __repr__ = _swig_repr
    Single = _pd.RotatableBond_Single
    Planar = _pd.RotatableBond_Planar
    Double = _pd.RotatableBond_Double
    Phi = _pd.RotatableBond_Phi
    Psi = _pd.RotatableBond_Psi
    Omega = _pd.RotatableBond_Omega
    def __init__(self, *args): 
        this = _pd.new_RotatableBond(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["i"] = _pd.RotatableBond_i_set
    __swig_getmethods__["i"] = _pd.RotatableBond_i_get
    if _newclass:i = _swig_property(_pd.RotatableBond_i_get, _pd.RotatableBond_i_set)
    __swig_setmethods__["j"] = _pd.RotatableBond_j_set
    __swig_getmethods__["j"] = _pd.RotatableBond_j_get
    if _newclass:j = _swig_property(_pd.RotatableBond_j_get, _pd.RotatableBond_j_set)
    __swig_setmethods__["ip"] = _pd.RotatableBond_ip_set
    __swig_getmethods__["ip"] = _pd.RotatableBond_ip_get
    if _newclass:ip = _swig_property(_pd.RotatableBond_ip_get, _pd.RotatableBond_ip_set)
    __swig_setmethods__["jp"] = _pd.RotatableBond_jp_set
    __swig_getmethods__["jp"] = _pd.RotatableBond_jp_get
    if _newclass:jp = _swig_property(_pd.RotatableBond_jp_get, _pd.RotatableBond_jp_set)
    __swig_setmethods__["lastphi"] = _pd.RotatableBond_lastphi_set
    __swig_getmethods__["lastphi"] = _pd.RotatableBond_lastphi_get
    if _newclass:lastphi = _swig_property(_pd.RotatableBond_lastphi_get, _pd.RotatableBond_lastphi_set)
    __swig_setmethods__["phi"] = _pd.RotatableBond_phi_set
    __swig_getmethods__["phi"] = _pd.RotatableBond_phi_get
    if _newclass:phi = _swig_property(_pd.RotatableBond_phi_get, _pd.RotatableBond_phi_set)
    __swig_setmethods__["Type"] = _pd.RotatableBond_Type_set
    __swig_getmethods__["Type"] = _pd.RotatableBond_Type_get
    if _newclass:Type = _swig_property(_pd.RotatableBond_Type_get, _pd.RotatableBond_Type_set)
    __swig_setmethods__["status"] = _pd.RotatableBond_status_set
    __swig_getmethods__["status"] = _pd.RotatableBond_status_get
    if _newclass:status = _swig_property(_pd.RotatableBond_status_get, _pd.RotatableBond_status_set)
    __swig_setmethods__["status2"] = _pd.RotatableBond_status2_set
    __swig_getmethods__["status2"] = _pd.RotatableBond_status2_get
    if _newclass:status2 = _swig_property(_pd.RotatableBond_status2_get, _pd.RotatableBond_status2_set)
    __swig_setmethods__["segmentstart"] = _pd.RotatableBond_segmentstart_set
    __swig_getmethods__["segmentstart"] = _pd.RotatableBond_segmentstart_get
    if _newclass:segmentstart = _swig_property(_pd.RotatableBond_segmentstart_get, _pd.RotatableBond_segmentstart_set)
    __swig_setmethods__["segmentend"] = _pd.RotatableBond_segmentend_set
    __swig_getmethods__["segmentend"] = _pd.RotatableBond_segmentend_get
    if _newclass:segmentend = _swig_property(_pd.RotatableBond_segmentend_get, _pd.RotatableBond_segmentend_set)
    __swig_destroy__ = _pd.delete_RotatableBond
    __del__ = lambda self : None;
RotatableBond_swigregister = _pd.RotatableBond_swigregister
RotatableBond_swigregister(RotatableBond)

class RotBond(WorkSpaceComponentBase):
    __swig_setmethods__ = {}
    for _s in [WorkSpaceComponentBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotBond, name, value)
    __swig_getmethods__ = {}
    for _s in [WorkSpaceComponentBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotBond, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotBond(*args)
        try: self.this.append(this)
        except: self.this = this
    def memuse(*args): return _pd.RotBond_memuse(*args)
    def find(*args): return _pd.RotBond_find(*args)
    def rotate(*args): return _pd.RotBond_rotate(*args)
    def isDelocalised(*args): return _pd.RotBond_isDelocalised(*args)
    def calcTorsion(*args): return _pd.RotBond_calcTorsion(*args)
    def silence(*args): return _pd.RotBond_silence(*args)
    def size(*args): return _pd.RotBond_size(*args)
    __swig_destroy__ = _pd.delete_RotBond
    __del__ = lambda self : None;
RotBond_swigregister = _pd.RotBond_swigregister
RotBond_swigregister(RotBond)

class RotBond_Dummy(RotBond):
    __swig_setmethods__ = {}
    for _s in [RotBond]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotBond_Dummy, name, value)
    __swig_getmethods__ = {}
    for _s in [RotBond]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotBond_Dummy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotBond_Dummy(*args)
        try: self.this.append(this)
        except: self.this = this
    def memuse(*args): return _pd.RotBond_Dummy_memuse(*args)
    def find(*args): return _pd.RotBond_Dummy_find(*args)
    def rotate(*args): return _pd.RotBond_Dummy_rotate(*args)
    def isDelocalised(*args): return _pd.RotBond_Dummy_isDelocalised(*args)
    def calcTorsion(*args): return _pd.RotBond_Dummy_calcTorsion(*args)
    def silence(*args): return _pd.RotBond_Dummy_silence(*args)
    def size(*args): return _pd.RotBond_Dummy_size(*args)
    __swig_destroy__ = _pd.delete_RotBond_Dummy
    __del__ = lambda self : None;
RotBond_Dummy_swigregister = _pd.RotBond_Dummy_swigregister
RotBond_Dummy_swigregister(RotBond_Dummy)

class RotationDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotationDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotationDefinition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["molBase"] = _pd.RotationDefinition_molBase_set
    __swig_getmethods__["molBase"] = _pd.RotationDefinition_molBase_get
    if _newclass:molBase = _swig_property(_pd.RotationDefinition_molBase_get, _pd.RotationDefinition_molBase_set)
    __swig_setmethods__["atom1"] = _pd.RotationDefinition_atom1_set
    __swig_getmethods__["atom1"] = _pd.RotationDefinition_atom1_get
    if _newclass:atom1 = _swig_property(_pd.RotationDefinition_atom1_get, _pd.RotationDefinition_atom1_set)
    __swig_setmethods__["atom2"] = _pd.RotationDefinition_atom2_set
    __swig_getmethods__["atom2"] = _pd.RotationDefinition_atom2_get
    if _newclass:atom2 = _swig_property(_pd.RotationDefinition_atom2_get, _pd.RotationDefinition_atom2_set)
    __swig_setmethods__["atom3"] = _pd.RotationDefinition_atom3_set
    __swig_getmethods__["atom3"] = _pd.RotationDefinition_atom3_get
    if _newclass:atom3 = _swig_property(_pd.RotationDefinition_atom3_get, _pd.RotationDefinition_atom3_set)
    __swig_setmethods__["atom4"] = _pd.RotationDefinition_atom4_set
    __swig_getmethods__["atom4"] = _pd.RotationDefinition_atom4_get
    if _newclass:atom4 = _swig_property(_pd.RotationDefinition_atom4_get, _pd.RotationDefinition_atom4_set)
    __swig_setmethods__["startAtomIndex"] = _pd.RotationDefinition_startAtomIndex_set
    __swig_getmethods__["startAtomIndex"] = _pd.RotationDefinition_startAtomIndex_get
    if _newclass:startAtomIndex = _swig_property(_pd.RotationDefinition_startAtomIndex_get, _pd.RotationDefinition_startAtomIndex_set)
    __swig_setmethods__["endAtomIndex"] = _pd.RotationDefinition_endAtomIndex_set
    __swig_getmethods__["endAtomIndex"] = _pd.RotationDefinition_endAtomIndex_get
    if _newclass:endAtomIndex = _swig_property(_pd.RotationDefinition_endAtomIndex_get, _pd.RotationDefinition_endAtomIndex_set)
    __swig_setmethods__["arseAtom"] = _pd.RotationDefinition_arseAtom_set
    __swig_getmethods__["arseAtom"] = _pd.RotationDefinition_arseAtom_get
    if _newclass:arseAtom = _swig_property(_pd.RotationDefinition_arseAtom_get, _pd.RotationDefinition_arseAtom_set)
    def __init__(self, *args): 
        this = _pd.new_RotationDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    def getCurrentTorsionAngle(*args): return _pd.RotationDefinition_getCurrentTorsionAngle(*args)
    def isValid(*args): return _pd.RotationDefinition_isValid(*args)
    def performRotation(*args): return _pd.RotationDefinition_performRotation(*args)
    def perturbRotation(*args): return _pd.RotationDefinition_perturbRotation(*args)
    __swig_destroy__ = _pd.delete_RotationDefinition
    __del__ = lambda self : None;
RotationDefinition_swigregister = _pd.RotationDefinition_swigregister
RotationDefinition_swigregister(RotationDefinition)

class WorkSpace(MoleculeBase):
    __swig_setmethods__ = {}
    for _s in [MoleculeBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, WorkSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [MoleculeBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorkSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_WorkSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_WorkSpace
    __del__ = lambda self : None;
    def getCheckSum(*args): return _pd.WorkSpace_getCheckSum(*args)
    def getChainID(*args): return _pd.WorkSpace_getChainID(*args)
    def rotbond(*args): return _pd.WorkSpace_rotbond(*args)
    def nlist(*args): return _pd.WorkSpace_nlist(*args)
    def bondorder(*args): return _pd.WorkSpace_bondorder(*args)
    def boundary(*args): return _pd.WorkSpace_boundary(*args)
    def setRotatableBondList(*args): return _pd.WorkSpace_setRotatableBondList(*args)
    def setNeighbourList(*args): return _pd.WorkSpace_setNeighbourList(*args)
    def setSpace(*args): return _pd.WorkSpace_setSpace(*args)
    def atomxyz(*args): return _pd.WorkSpace_atomxyz(*args)
    __swig_setmethods__["ene"] = _pd.WorkSpace_ene_set
    __swig_getmethods__["ene"] = _pd.WorkSpace_ene_get
    if _newclass:ene = _swig_property(_pd.WorkSpace_ene_get, _pd.WorkSpace_ene_set)
    def calcCRMS_AllAtom(*args): return _pd.WorkSpace_calcCRMS_AllAtom(*args)
    def calcCRMS_HeavyAtom(*args): return _pd.WorkSpace_calcCRMS_HeavyAtom(*args)
    def calcCRMS_CA(*args): return _pd.WorkSpace_calcCRMS_CA(*args)
    __swig_setmethods__["Step"] = _pd.WorkSpace_Step_set
    __swig_getmethods__["Step"] = _pd.WorkSpace_Step_get
    if _newclass:Step = _swig_property(_pd.WorkSpace_Step_get, _pd.WorkSpace_Step_set)
    def zeroForces(*args): return _pd.WorkSpace_zeroForces(*args)
    def printForces(*args): return _pd.WorkSpace_printForces(*args)
    def scaleVelocities(*args): return _pd.WorkSpace_scaleVelocities(*args)
    def getVolume(*args): return _pd.WorkSpace_getVolume(*args)
    def getDensity(*args): return _pd.WorkSpace_getDensity(*args)
    def scaleSystemMolecular(*args): return _pd.WorkSpace_scaleSystemMolecular(*args)
    def scaleSystem(*args): return _pd.WorkSpace_scaleSystem(*args)
    def cleanSpace(*args): return _pd.WorkSpace_cleanSpace(*args)
    def addTra(*args): return _pd.WorkSpace_addTra(*args)
    def addStdTra(*args): return _pd.WorkSpace_addStdTra(*args)
    def addExtdTra(*args): return _pd.WorkSpace_addExtdTra(*args)
    __swig_setmethods__["outtra"] = _pd.WorkSpace_outtra_set
    __swig_getmethods__["outtra"] = _pd.WorkSpace_outtra_get
    if _newclass:outtra = _swig_property(_pd.WorkSpace_outtra_get, _pd.WorkSpace_outtra_set)
    __swig_setmethods__["cur"] = _pd.WorkSpace_cur_set
    __swig_getmethods__["cur"] = _pd.WorkSpace_cur_get
    if _newclass:cur = _swig_property(_pd.WorkSpace_cur_get, _pd.WorkSpace_cur_set)
    __swig_setmethods__["old"] = _pd.WorkSpace_old_set
    __swig_getmethods__["old"] = _pd.WorkSpace_old_get
    if _newclass:old = _swig_property(_pd.WorkSpace_old_get, _pd.WorkSpace_old_set)
    def save(*args): return _pd.WorkSpace_save(*args)
    def load(*args): return _pd.WorkSpace_load(*args)
    def load_forced(*args): return _pd.WorkSpace_load_forced(*args)
    def updateSystemPositions(*args): return _pd.WorkSpace_updateSystemPositions(*args)
    def memuse(*args): return _pd.WorkSpace_memuse(*args)
    __swig_setmethods__["isysmol"] = _pd.WorkSpace_isysmol_set
    __swig_getmethods__["isysmol"] = _pd.WorkSpace_isysmol_get
    if _newclass:isysmol = _swig_property(_pd.WorkSpace_isysmol_get, _pd.WorkSpace_isysmol_set)
    __swig_setmethods__["isysatom"] = _pd.WorkSpace_isysatom_set
    __swig_getmethods__["isysatom"] = _pd.WorkSpace_isysatom_get
    if _newclass:isysatom = _swig_property(_pd.WorkSpace_isysatom_get, _pd.WorkSpace_isysatom_set)
    __swig_setmethods__["group_index"] = _pd.WorkSpace_group_index_set
    __swig_getmethods__["group_index"] = _pd.WorkSpace_group_index_get
    if _newclass:group_index = _swig_property(_pd.WorkSpace_group_index_get, _pd.WorkSpace_group_index_set)
WorkSpace_swigregister = _pd.WorkSpace_swigregister
WorkSpace_swigregister(WorkSpace)

class SnapShotAtom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SnapShotAtom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnapShotAtom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _pd.SnapShotAtom_p_set
    __swig_getmethods__["p"] = _pd.SnapShotAtom_p_get
    if _newclass:p = _swig_property(_pd.SnapShotAtom_p_get, _pd.SnapShotAtom_p_set)
    __swig_setmethods__["f"] = _pd.SnapShotAtom_f_set
    __swig_getmethods__["f"] = _pd.SnapShotAtom_f_get
    if _newclass:f = _swig_property(_pd.SnapShotAtom_f_get, _pd.SnapShotAtom_f_set)
    __swig_setmethods__["v"] = _pd.SnapShotAtom_v_set
    __swig_getmethods__["v"] = _pd.SnapShotAtom_v_get
    if _newclass:v = _swig_property(_pd.SnapShotAtom_v_get, _pd.SnapShotAtom_v_set)
    def __init__(self, *args): 
        this = _pd.new_SnapShotAtom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_SnapShotAtom
    __del__ = lambda self : None;
SnapShotAtom_swigregister = _pd.SnapShotAtom_swigregister
SnapShotAtom_swigregister(SnapShotAtom)

class SnapShot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SnapShot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnapShot, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_SnapShot
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pd.new_SnapShot(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTo(*args): return _pd.SnapShot_setTo(*args)
    def setToPartial(*args): return _pd.SnapShot_setToPartial(*args)
    def memuse(*args): return _pd.SnapShot_memuse(*args)
    def dRMSFrom(*args): return _pd.SnapShot_dRMSFrom(*args)
    def cRMSFrom(*args): return _pd.SnapShot_cRMSFrom(*args)
    def insertPSPfragment(*args): return _pd.SnapShot_insertPSPfragment(*args)
    def readMIME(*args): return _pd.SnapShot_readMIME(*args)
    def printMIME(*args): return _pd.SnapShot_printMIME(*args)
    def writeMIME(*args): return _pd.SnapShot_writeMIME(*args)
    def appendMIME(*args): return _pd.SnapShot_appendMIME(*args)
    def readOldPickle(*args): return _pd.SnapShot_readOldPickle(*args)
    def nAtoms(*args): return _pd.SnapShot_nAtoms(*args)
    __swig_setmethods__["atom"] = _pd.SnapShot_atom_set
    __swig_getmethods__["atom"] = _pd.SnapShot_atom_get
    if _newclass:atom = _swig_property(_pd.SnapShot_atom_get, _pd.SnapShot_atom_set)
    __swig_setmethods__["natoms"] = _pd.SnapShot_natoms_set
    __swig_getmethods__["natoms"] = _pd.SnapShot_natoms_get
    if _newclass:natoms = _swig_property(_pd.SnapShot_natoms_get, _pd.SnapShot_natoms_set)
    __swig_setmethods__["epot"] = _pd.SnapShot_epot_set
    __swig_getmethods__["epot"] = _pd.SnapShot_epot_get
    if _newclass:epot = _swig_property(_pd.SnapShot_epot_get, _pd.SnapShot_epot_set)
    __swig_setmethods__["status1"] = _pd.SnapShot_status1_set
    __swig_getmethods__["status1"] = _pd.SnapShot_status1_get
    if _newclass:status1 = _swig_property(_pd.SnapShot_status1_get, _pd.SnapShot_status1_set)
    __swig_setmethods__["status2"] = _pd.SnapShot_status2_set
    __swig_getmethods__["status2"] = _pd.SnapShot_status2_get
    if _newclass:status2 = _swig_property(_pd.SnapShot_status2_get, _pd.SnapShot_status2_set)
    __swig_setmethods__["status3"] = _pd.SnapShot_status3_set
    __swig_getmethods__["status3"] = _pd.SnapShot_status3_get
    if _newclass:status3 = _swig_property(_pd.SnapShot_status3_get, _pd.SnapShot_status3_set)
    __swig_setmethods__["status4"] = _pd.SnapShot_status4_set
    __swig_getmethods__["status4"] = _pd.SnapShot_status4_get
    if _newclass:status4 = _swig_property(_pd.SnapShot_status4_get, _pd.SnapShot_status4_set)
    __swig_setmethods__["A"] = _pd.SnapShot_A_set
    __swig_getmethods__["A"] = _pd.SnapShot_A_get
    if _newclass:A = _swig_property(_pd.SnapShot_A_get, _pd.SnapShot_A_set)
    __swig_setmethods__["B"] = _pd.SnapShot_B_set
    __swig_getmethods__["B"] = _pd.SnapShot_B_get
    if _newclass:B = _swig_property(_pd.SnapShot_B_get, _pd.SnapShot_B_set)
    __swig_setmethods__["C"] = _pd.SnapShot_C_set
    __swig_getmethods__["C"] = _pd.SnapShot_C_get
    if _newclass:C = _swig_property(_pd.SnapShot_C_get, _pd.SnapShot_C_set)
SnapShot_swigregister = _pd.SnapShot_swigregister
SnapShot_swigregister(SnapShot)

readMIME = _pd.readMIME
readOldPickle = _pd.readOldPickle
class SnapShotLibrary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SnapShotLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnapShotLibrary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SnapShotLibrary(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_SnapShotLibrary
    __del__ = lambda self : None;
    def push_back(*args): return _pd.SnapShotLibrary_push_back(*args)
    def dataSize(*args): return _pd.SnapShotLibrary_dataSize(*args)
    def getData(*args): return _pd.SnapShotLibrary_getData(*args)
SnapShotLibrary_swigregister = _pd.SnapShotLibrary_swigregister
SnapShotLibrary_swigregister(SnapShotLibrary)

class SnapShotOutTra(OutputTrajectory):
    __swig_setmethods__ = {}
    for _s in [OutputTrajectory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SnapShotOutTra, name, value)
    __swig_getmethods__ = {}
    for _s in [OutputTrajectory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SnapShotOutTra, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SnapShotOutTra(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_SnapShotOutTra
    __del__ = lambda self : None;
    def clone(*args): return _pd.SnapShotOutTra_clone(*args)
    def create(*args): return _pd.SnapShotOutTra_create(*args)
    def append(*args): return _pd.SnapShotOutTra_append(*args)
SnapShotOutTra_swigregister = _pd.SnapShotOutTra_swigregister
SnapShotOutTra_swigregister(SnapShotOutTra)

class SelectedIndices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SelectedIndices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SelectedIndices, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SelectedIndices(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPicking(*args): return _pd.SelectedIndices_setPicking(*args)
    def size(*args): return _pd.SelectedIndices_size(*args)
    def getAtomIndex(*args): return _pd.SelectedIndices_getAtomIndex(*args)
    __swig_destroy__ = _pd.delete_SelectedIndices
    __del__ = lambda self : None;
SelectedIndices_swigregister = _pd.SelectedIndices_swigregister
SelectedIndices_swigregister(SelectedIndices)

class PosPointerBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PosPointerBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PosPointerBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def size(*args): return _pd.PosPointerBase_size(*args)
    def at(*args): return _pd.PosPointerBase_at(*args)
    def p(*args): return _pd.PosPointerBase_p(*args)
    def f(*args): return _pd.PosPointerBase_f(*args)
    def v(*args): return _pd.PosPointerBase_v(*args)
    def op(*args): return _pd.PosPointerBase_op(*args)
    def of(*args): return _pd.PosPointerBase_of(*args)
    def ov(*args): return _pd.PosPointerBase_ov(*args)
    def iat(*args): return _pd.PosPointerBase_iat(*args)
    def calcCRMS(*args): return _pd.PosPointerBase_calcCRMS(*args)
    __swig_destroy__ = _pd.delete_PosPointerBase
    __del__ = lambda self : None;
PosPointerBase_swigregister = _pd.PosPointerBase_swigregister
PosPointerBase_swigregister(PosPointerBase)

class PosPointer(PosPointerBase):
    __swig_setmethods__ = {}
    for _s in [PosPointerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PosPointer, name, value)
    __swig_getmethods__ = {}
    for _s in [PosPointerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosPointer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PosPointer(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPicking(*args): return _pd.PosPointer_setPicking(*args)
    __swig_destroy__ = _pd.delete_PosPointer
    __del__ = lambda self : None;
PosPointer_swigregister = _pd.PosPointer_swigregister
PosPointer_swigregister(PosPointer)

class PosStore(PosPointerBase):
    __swig_setmethods__ = {}
    for _s in [PosPointerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PosStore, name, value)
    __swig_getmethods__ = {}
    for _s in [PosPointerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosStore, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PosStore(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPicking(*args): return _pd.PosStore_setPicking(*args)
    def sp(*args): return _pd.PosStore_sp(*args)
    def calcCRMSOfStoreTo(*args): return _pd.PosStore_calcCRMSOfStoreTo(*args)
    def store(*args): return _pd.PosStore_store(*args)
    def revert(*args): return _pd.PosStore_revert(*args)
    def getPicker(*args): return _pd.PosStore_getPicker(*args)
    __swig_destroy__ = _pd.delete_PosStore
    __del__ = lambda self : None;
PosStore_swigregister = _pd.PosStore_swigregister
PosStore_swigregister(PosStore)

Unknown = _pd.Unknown
A = _pd.A
C = _pd.C
D = _pd.D
E = _pd.E
F = _pd.F
G = _pd.G
H = _pd.H
I = _pd.I
K = _pd.K
L = _pd.L
M = _pd.M
N = _pd.N
P = _pd.P
p = _pd.p
Q = _pd.Q
R = _pd.R
S = _pd.S
T = _pd.T
V = _pd.V
W = _pd.W
Y = _pd.Y
a = _pd.a
t = _pd.t
g = _pd.g
c = _pd.c
u = _pd.u
AllProperties = _pd.AllProperties
NotGlyOrPro = _pd.NotGlyOrPro
ShortHydrophobic = _pd.ShortHydrophobic
BulkyAromatic = _pd.BulkyAromatic
Polar = _pd.Polar
Positive = _pd.Positive
Negative = _pd.Negative
Charged = _pd.Charged
Pyrimidine = _pd.Pyrimidine
Purine = _pd.Purine
getResidue = _pd.getResidue
class FFParamSet(Object,AliasMapper,ClassMapper):
    __swig_setmethods__ = {}
    for _s in [Object,AliasMapper,ClassMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FFParamSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,AliasMapper,ClassMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFParamSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FFParamSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FFParamSet_clone(*args)
    __swig_destroy__ = _pd.delete_FFParamSet
    __del__ = lambda self : None;
    def settodefault(*args): return _pd.FFParamSet_settodefault(*args)
    def readLib(*args): return _pd.FFParamSet_readLib(*args)
    def writeLib(*args): return _pd.FFParamSet_writeLib(*args)
    def readCHARMMprm(*args): return _pd.FFParamSet_readCHARMMprm(*args)
    def readCHARMMrtf(*args): return _pd.FFParamSet_readCHARMMrtf(*args)
    def unifyForcefield(*args): return _pd.FFParamSet_unifyForcefield(*args)
    def lookupLongName(*args): return _pd.FFParamSet_lookupLongName(*args)
    def lookupShortName(*args): return _pd.FFParamSet_lookupShortName(*args)
    def lookupAlias(*args): return _pd.FFParamSet_lookupAlias(*args)
FFParamSet_swigregister = _pd.FFParamSet_swigregister
FFParamSet_swigregister(FFParamSet)
HasResidueProperty = _pd.HasResidueProperty
HasSameResidueProperty = _pd.HasSameResidueProperty
HasSimilarResidueProperty = _pd.HasSimilarResidueProperty

class NonBonded_Pack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NonBonded_Pack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonBonded_Pack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _pd.NonBonded_Pack_radius_set
    __swig_getmethods__["radius"] = _pd.NonBonded_Pack_radius_get
    if _newclass:radius = _swig_property(_pd.NonBonded_Pack_radius_get, _pd.NonBonded_Pack_radius_set)
    __swig_setmethods__["epsilon"] = _pd.NonBonded_Pack_epsilon_set
    __swig_getmethods__["epsilon"] = _pd.NonBonded_Pack_epsilon_get
    if _newclass:epsilon = _swig_property(_pd.NonBonded_Pack_epsilon_get, _pd.NonBonded_Pack_epsilon_set)
    __swig_setmethods__["charge"] = _pd.NonBonded_Pack_charge_set
    __swig_getmethods__["charge"] = _pd.NonBonded_Pack_charge_get
    if _newclass:charge = _swig_property(_pd.NonBonded_Pack_charge_get, _pd.NonBonded_Pack_charge_set)
    __swig_setmethods__["fill"] = _pd.NonBonded_Pack_fill_set
    __swig_getmethods__["fill"] = _pd.NonBonded_Pack_fill_get
    if _newclass:fill = _swig_property(_pd.NonBonded_Pack_fill_get, _pd.NonBonded_Pack_fill_set)
    def __init__(self, *args): 
        this = _pd.new_NonBonded_Pack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_NonBonded_Pack
    __del__ = lambda self : None;
NonBonded_Pack_swigregister = _pd.NonBonded_Pack_swigregister
NonBonded_Pack_swigregister(NonBonded_Pack)

class FF_NonBonded(ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_NonBonded, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_NonBonded, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_NonBonded(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_NonBonded_clone(*args)
    __swig_destroy__ = _pd.delete_FF_NonBonded
    __del__ = lambda self : None;
    __swig_setmethods__["fast"] = _pd.FF_NonBonded_fast_set
    __swig_getmethods__["fast"] = _pd.FF_NonBonded_fast_get
    if _newclass:fast = _swig_property(_pd.FF_NonBonded_fast_get, _pd.FF_NonBonded_fast_set)
    __swig_setmethods__["AutoScaling14"] = _pd.FF_NonBonded_AutoScaling14_set
    __swig_getmethods__["AutoScaling14"] = _pd.FF_NonBonded_AutoScaling14_get
    if _newclass:AutoScaling14 = _swig_property(_pd.FF_NonBonded_AutoScaling14_get, _pd.FF_NonBonded_AutoScaling14_set)
    __swig_setmethods__["Cutoff"] = _pd.FF_NonBonded_Cutoff_set
    __swig_getmethods__["Cutoff"] = _pd.FF_NonBonded_Cutoff_get
    if _newclass:Cutoff = _swig_property(_pd.FF_NonBonded_Cutoff_get, _pd.FF_NonBonded_Cutoff_set)
    __swig_setmethods__["InnerCutoff"] = _pd.FF_NonBonded_InnerCutoff_set
    __swig_getmethods__["InnerCutoff"] = _pd.FF_NonBonded_InnerCutoff_get
    if _newclass:InnerCutoff = _swig_property(_pd.FF_NonBonded_InnerCutoff_get, _pd.FF_NonBonded_InnerCutoff_set)
    __swig_setmethods__["DoVdw"] = _pd.FF_NonBonded_DoVdw_set
    __swig_getmethods__["DoVdw"] = _pd.FF_NonBonded_DoVdw_get
    if _newclass:DoVdw = _swig_property(_pd.FF_NonBonded_DoVdw_get, _pd.FF_NonBonded_DoVdw_set)
    __swig_setmethods__["VdwCutoff"] = _pd.FF_NonBonded_VdwCutoff_set
    __swig_getmethods__["VdwCutoff"] = _pd.FF_NonBonded_VdwCutoff_get
    if _newclass:VdwCutoff = _swig_property(_pd.FF_NonBonded_VdwCutoff_get, _pd.FF_NonBonded_VdwCutoff_set)
    __swig_setmethods__["VdwInnerCutoff"] = _pd.FF_NonBonded_VdwInnerCutoff_set
    __swig_getmethods__["VdwInnerCutoff"] = _pd.FF_NonBonded_VdwInnerCutoff_get
    if _newclass:VdwInnerCutoff = _swig_property(_pd.FF_NonBonded_VdwInnerCutoff_get, _pd.FF_NonBonded_VdwInnerCutoff_set)
    __swig_setmethods__["Vdw14Scaling"] = _pd.FF_NonBonded_Vdw14Scaling_set
    __swig_getmethods__["Vdw14Scaling"] = _pd.FF_NonBonded_Vdw14Scaling_get
    if _newclass:Vdw14Scaling = _swig_property(_pd.FF_NonBonded_Vdw14Scaling_get, _pd.FF_NonBonded_Vdw14Scaling_set)
    __swig_setmethods__["VdwAttenuator"] = _pd.FF_NonBonded_VdwAttenuator_set
    __swig_getmethods__["VdwAttenuator"] = _pd.FF_NonBonded_VdwAttenuator_get
    if _newclass:VdwAttenuator = _swig_property(_pd.FF_NonBonded_VdwAttenuator_get, _pd.FF_NonBonded_VdwAttenuator_set)
    __swig_setmethods__["VdwCor"] = _pd.FF_NonBonded_VdwCor_set
    __swig_getmethods__["VdwCor"] = _pd.FF_NonBonded_VdwCor_get
    if _newclass:VdwCor = _swig_property(_pd.FF_NonBonded_VdwCor_get, _pd.FF_NonBonded_VdwCor_set)
    __swig_setmethods__["VdwCorDensity"] = _pd.FF_NonBonded_VdwCorDensity_set
    __swig_getmethods__["VdwCorDensity"] = _pd.FF_NonBonded_VdwCorDensity_get
    if _newclass:VdwCorDensity = _swig_property(_pd.FF_NonBonded_VdwCorDensity_get, _pd.FF_NonBonded_VdwCorDensity_set)
    __swig_setmethods__["VdwCorEpsilon"] = _pd.FF_NonBonded_VdwCorEpsilon_set
    __swig_getmethods__["VdwCorEpsilon"] = _pd.FF_NonBonded_VdwCorEpsilon_get
    if _newclass:VdwCorEpsilon = _swig_property(_pd.FF_NonBonded_VdwCorEpsilon_get, _pd.FF_NonBonded_VdwCorEpsilon_set)
    __swig_setmethods__["VdwCorRadius"] = _pd.FF_NonBonded_VdwCorRadius_set
    __swig_getmethods__["VdwCorRadius"] = _pd.FF_NonBonded_VdwCorRadius_get
    if _newclass:VdwCorRadius = _swig_property(_pd.FF_NonBonded_VdwCorRadius_get, _pd.FF_NonBonded_VdwCorRadius_set)
    __swig_setmethods__["VdwCorCutoff"] = _pd.FF_NonBonded_VdwCorCutoff_set
    __swig_getmethods__["VdwCorCutoff"] = _pd.FF_NonBonded_VdwCorCutoff_get
    if _newclass:VdwCorCutoff = _swig_property(_pd.FF_NonBonded_VdwCorCutoff_get, _pd.FF_NonBonded_VdwCorCutoff_set)
    __swig_setmethods__["DoElec"] = _pd.FF_NonBonded_DoElec_set
    __swig_getmethods__["DoElec"] = _pd.FF_NonBonded_DoElec_get
    if _newclass:DoElec = _swig_property(_pd.FF_NonBonded_DoElec_get, _pd.FF_NonBonded_DoElec_set)
    __swig_setmethods__["Elec14Scaling"] = _pd.FF_NonBonded_Elec14Scaling_set
    __swig_getmethods__["Elec14Scaling"] = _pd.FF_NonBonded_Elec14Scaling_get
    if _newclass:Elec14Scaling = _swig_property(_pd.FF_NonBonded_Elec14Scaling_get, _pd.FF_NonBonded_Elec14Scaling_set)
    __swig_setmethods__["ElecAttenuator"] = _pd.FF_NonBonded_ElecAttenuator_set
    __swig_getmethods__["ElecAttenuator"] = _pd.FF_NonBonded_ElecAttenuator_get
    if _newclass:ElecAttenuator = _swig_property(_pd.FF_NonBonded_ElecAttenuator_get, _pd.FF_NonBonded_ElecAttenuator_set)
    __swig_setmethods__["Dielectric"] = _pd.FF_NonBonded_Dielectric_set
    __swig_getmethods__["Dielectric"] = _pd.FF_NonBonded_Dielectric_get
    if _newclass:Dielectric = _swig_property(_pd.FF_NonBonded_Dielectric_get, _pd.FF_NonBonded_Dielectric_set)
    __swig_setmethods__["DDDielectric"] = _pd.FF_NonBonded_DDDielectric_set
    __swig_getmethods__["DDDielectric"] = _pd.FF_NonBonded_DDDielectric_get
    if _newclass:DDDielectric = _swig_property(_pd.FF_NonBonded_DDDielectric_get, _pd.FF_NonBonded_DDDielectric_set)
    __swig_setmethods__["DDDielectricAlpha"] = _pd.FF_NonBonded_DDDielectricAlpha_set
    __swig_getmethods__["DDDielectricAlpha"] = _pd.FF_NonBonded_DDDielectricAlpha_get
    if _newclass:DDDielectricAlpha = _swig_property(_pd.FF_NonBonded_DDDielectricAlpha_get, _pd.FF_NonBonded_DDDielectricAlpha_set)
    __swig_setmethods__["ForceSwitch"] = _pd.FF_NonBonded_ForceSwitch_set
    __swig_getmethods__["ForceSwitch"] = _pd.FF_NonBonded_ForceSwitch_get
    if _newclass:ForceSwitch = _swig_property(_pd.FF_NonBonded_ForceSwitch_get, _pd.FF_NonBonded_ForceSwitch_set)
    __swig_setmethods__["EnergySwitch"] = _pd.FF_NonBonded_EnergySwitch_set
    __swig_getmethods__["EnergySwitch"] = _pd.FF_NonBonded_EnergySwitch_get
    if _newclass:EnergySwitch = _swig_property(_pd.FF_NonBonded_EnergySwitch_get, _pd.FF_NonBonded_EnergySwitch_set)
    __swig_setmethods__["UsePartialRecalc"] = _pd.FF_NonBonded_UsePartialRecalc_set
    __swig_getmethods__["UsePartialRecalc"] = _pd.FF_NonBonded_UsePartialRecalc_get
    if _newclass:UsePartialRecalc = _swig_property(_pd.FF_NonBonded_UsePartialRecalc_get, _pd.FF_NonBonded_UsePartialRecalc_set)
    __swig_setmethods__["IgnoreIntraResidue"] = _pd.FF_NonBonded_IgnoreIntraResidue_set
    __swig_getmethods__["IgnoreIntraResidue"] = _pd.FF_NonBonded_IgnoreIntraResidue_get
    if _newclass:IgnoreIntraResidue = _swig_property(_pd.FF_NonBonded_IgnoreIntraResidue_get, _pd.FF_NonBonded_IgnoreIntraResidue_set)
    def info(*args): return _pd.FF_NonBonded_info(*args)
    def printStandard_LJ_Coulomb_Force(*args): return _pd.FF_NonBonded_printStandard_LJ_Coulomb_Force(*args)
    def calc_LJ_Coulomb_Force(*args): return _pd.FF_NonBonded_calc_LJ_Coulomb_Force(*args)
    def getEElec(*args): return _pd.FF_NonBonded_getEElec(*args)
    def getEVdw(*args): return _pd.FF_NonBonded_getEVdw(*args)
FF_NonBonded_swigregister = _pd.FF_NonBonded_swigregister
FF_NonBonded_swigregister(FF_NonBonded)

class Monitor_FF_NonBonded_EVdw(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_NonBonded_EVdw, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_NonBonded_EVdw, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_NonBonded_EVdw(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_NonBonded_EVdw_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_NonBonded_EVdw
    __del__ = lambda self : None;
Monitor_FF_NonBonded_EVdw_swigregister = _pd.Monitor_FF_NonBonded_EVdw_swigregister
Monitor_FF_NonBonded_EVdw_swigregister(Monitor_FF_NonBonded_EVdw)

class Monitor_FF_NonBonded_EElec(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_NonBonded_EElec, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_NonBonded_EElec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_NonBonded_EElec(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_NonBonded_EElec_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_NonBonded_EElec
    __del__ = lambda self : None;
Monitor_FF_NonBonded_EElec_swigregister = _pd.Monitor_FF_NonBonded_EElec_swigregister
Monitor_FF_NonBonded_EElec_swigregister(Monitor_FF_NonBonded_EElec)

class FF_NonBonded_TI_SoftCore(FF_NonBonded,FF_Extension_TI):
    __swig_setmethods__ = {}
    for _s in [FF_NonBonded,FF_Extension_TI]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_NonBonded_TI_SoftCore, name, value)
    __swig_getmethods__ = {}
    for _s in [FF_NonBonded,FF_Extension_TI]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_NonBonded_TI_SoftCore, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_NonBonded_TI_SoftCore(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FF_NonBonded_TI_SoftCore
    __del__ = lambda self : None;
    __swig_setmethods__["TI_Delta_Vdw"] = _pd.FF_NonBonded_TI_SoftCore_TI_Delta_Vdw_set
    __swig_getmethods__["TI_Delta_Vdw"] = _pd.FF_NonBonded_TI_SoftCore_TI_Delta_Vdw_get
    if _newclass:TI_Delta_Vdw = _swig_property(_pd.FF_NonBonded_TI_SoftCore_TI_Delta_Vdw_get, _pd.FF_NonBonded_TI_SoftCore_TI_Delta_Vdw_set)
    __swig_setmethods__["TI_Delta_Elec"] = _pd.FF_NonBonded_TI_SoftCore_TI_Delta_Elec_set
    __swig_getmethods__["TI_Delta_Elec"] = _pd.FF_NonBonded_TI_SoftCore_TI_Delta_Elec_get
    if _newclass:TI_Delta_Elec = _swig_property(_pd.FF_NonBonded_TI_SoftCore_TI_Delta_Elec_get, _pd.FF_NonBonded_TI_SoftCore_TI_Delta_Elec_set)
    __swig_setmethods__["FullyDecouple"] = _pd.FF_NonBonded_TI_SoftCore_FullyDecouple_set
    __swig_getmethods__["FullyDecouple"] = _pd.FF_NonBonded_TI_SoftCore_FullyDecouple_get
    if _newclass:FullyDecouple = _swig_property(_pd.FF_NonBonded_TI_SoftCore_FullyDecouple_get, _pd.FF_NonBonded_TI_SoftCore_FullyDecouple_set)
    def info(*args): return _pd.FF_NonBonded_TI_SoftCore_info(*args)
FF_NonBonded_TI_SoftCore_swigregister = _pd.FF_NonBonded_TI_SoftCore_swigregister
FF_NonBonded_TI_SoftCore_swigregister(FF_NonBonded_TI_SoftCore)

class FF_NonBonded_TI_Linear(FF_NonBonded,FF_Extension_TI):
    __swig_setmethods__ = {}
    for _s in [FF_NonBonded,FF_Extension_TI]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_NonBonded_TI_Linear, name, value)
    __swig_getmethods__ = {}
    for _s in [FF_NonBonded,FF_Extension_TI]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_NonBonded_TI_Linear, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_NonBonded_TI_Linear(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FF_NonBonded_TI_Linear
    __del__ = lambda self : None;
    __swig_setmethods__["DecoupleElec"] = _pd.FF_NonBonded_TI_Linear_DecoupleElec_set
    __swig_getmethods__["DecoupleElec"] = _pd.FF_NonBonded_TI_Linear_DecoupleElec_get
    if _newclass:DecoupleElec = _swig_property(_pd.FF_NonBonded_TI_Linear_DecoupleElec_get, _pd.FF_NonBonded_TI_Linear_DecoupleElec_set)
    __swig_setmethods__["DecoupleVdw"] = _pd.FF_NonBonded_TI_Linear_DecoupleVdw_set
    __swig_getmethods__["DecoupleVdw"] = _pd.FF_NonBonded_TI_Linear_DecoupleVdw_get
    if _newclass:DecoupleVdw = _swig_property(_pd.FF_NonBonded_TI_Linear_DecoupleVdw_get, _pd.FF_NonBonded_TI_Linear_DecoupleVdw_set)
    def info(*args): return _pd.FF_NonBonded_TI_Linear_info(*args)
FF_NonBonded_TI_Linear_swigregister = _pd.FF_NonBonded_TI_Linear_swigregister
FF_NonBonded_TI_Linear_swigregister(FF_NonBonded_TI_Linear)

class Bond(IndexPairDistance):
    __swig_setmethods__ = {}
    for _s in [IndexPairDistance]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Bond, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexPairDistance]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bond, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Bond(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["k"] = _pd.Bond_k_set
    __swig_getmethods__["k"] = _pd.Bond_k_get
    if _newclass:k = _swig_property(_pd.Bond_k_get, _pd.Bond_k_set)
    __swig_destroy__ = _pd.delete_Bond
    __del__ = lambda self : None;
Bond_swigregister = _pd.Bond_swigregister
Bond_swigregister(Bond)

class Angle(IndexTriplet):
    __swig_setmethods__ = {}
    for _s in [IndexTriplet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Angle, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexTriplet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Angle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["k"] = _pd.Angle_k_set
    __swig_getmethods__["k"] = _pd.Angle_k_get
    if _newclass:k = _swig_property(_pd.Angle_k_get, _pd.Angle_k_set)
    __swig_setmethods__["theta0"] = _pd.Angle_theta0_set
    __swig_getmethods__["theta0"] = _pd.Angle_theta0_get
    if _newclass:theta0 = _swig_property(_pd.Angle_theta0_get, _pd.Angle_theta0_set)
    __swig_setmethods__["theta"] = _pd.Angle_theta_set
    __swig_getmethods__["theta"] = _pd.Angle_theta_get
    if _newclass:theta = _swig_property(_pd.Angle_theta_get, _pd.Angle_theta_set)
    __swig_setmethods__["l"] = _pd.Angle_l_set
    __swig_getmethods__["l"] = _pd.Angle_l_get
    if _newclass:l = _swig_property(_pd.Angle_l_get, _pd.Angle_l_set)
    __swig_setmethods__["d"] = _pd.Angle_d_set
    __swig_getmethods__["d"] = _pd.Angle_d_get
    if _newclass:d = _swig_property(_pd.Angle_d_get, _pd.Angle_d_set)
    def __init__(self, *args): 
        this = _pd.new_Angle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Angle
    __del__ = lambda self : None;
Angle_swigregister = _pd.Angle_swigregister
Angle_swigregister(Angle)

class Torsion(IndexQuartet):
    __swig_setmethods__ = {}
    for _s in [IndexQuartet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Torsion, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexQuartet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Torsion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _pd.Torsion_Type_set
    __swig_getmethods__["Type"] = _pd.Torsion_Type_get
    if _newclass:Type = _swig_property(_pd.Torsion_Type_get, _pd.Torsion_Type_set)
    __swig_setmethods__["terms"] = _pd.Torsion_terms_set
    __swig_getmethods__["terms"] = _pd.Torsion_terms_get
    if _newclass:terms = _swig_property(_pd.Torsion_terms_get, _pd.Torsion_terms_set)
    __swig_setmethods__["phi"] = _pd.Torsion_phi_set
    __swig_getmethods__["phi"] = _pd.Torsion_phi_get
    if _newclass:phi = _swig_property(_pd.Torsion_phi_get, _pd.Torsion_phi_set)
    __swig_setmethods__["Vn"] = _pd.Torsion_Vn_set
    __swig_getmethods__["Vn"] = _pd.Torsion_Vn_get
    if _newclass:Vn = _swig_property(_pd.Torsion_Vn_get, _pd.Torsion_Vn_set)
    __swig_setmethods__["n"] = _pd.Torsion_n_set
    __swig_getmethods__["n"] = _pd.Torsion_n_get
    if _newclass:n = _swig_property(_pd.Torsion_n_get, _pd.Torsion_n_set)
    __swig_setmethods__["gamma"] = _pd.Torsion_gamma_set
    __swig_getmethods__["gamma"] = _pd.Torsion_gamma_get
    if _newclass:gamma = _swig_property(_pd.Torsion_gamma_get, _pd.Torsion_gamma_set)
    def __init__(self, *args): 
        this = _pd.new_Torsion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Torsion
    __del__ = lambda self : None;
Torsion_swigregister = _pd.Torsion_swigregister
Torsion_swigregister(Torsion)

EntireSystem = _pd.EntireSystem
OnlyBackbone = _pd.OnlyBackbone
class FF_Bonded(ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Bonded, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Bonded, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Bonded(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Bonded_clone(*args)
    def getNumBonds(*args): return _pd.FF_Bonded_getNumBonds(*args)
    def getNumAngles(*args): return _pd.FF_Bonded_getNumAngles(*args)
    def getNumTorsions(*args): return _pd.FF_Bonded_getNumTorsions(*args)
    def getNumImpropers(*args): return _pd.FF_Bonded_getNumImpropers(*args)
    def getBond(*args): return _pd.FF_Bonded_getBond(*args)
    def isBonded(*args): return _pd.FF_Bonded_isBonded(*args)
    def findBond(*args): return _pd.FF_Bonded_findBond(*args)
    def findAngle(*args): return _pd.FF_Bonded_findAngle(*args)
    def findTorsion(*args): return _pd.FF_Bonded_findTorsion(*args)
    def findImproper(*args): return _pd.FF_Bonded_findImproper(*args)
    def printBondedParameters(*args): return _pd.FF_Bonded_printBondedParameters(*args)
    def printPSFfile_bondedparams(*args): return _pd.FF_Bonded_printPSFfile_bondedparams(*args)
    __swig_setmethods__["Scope"] = _pd.FF_Bonded_Scope_set
    __swig_getmethods__["Scope"] = _pd.FF_Bonded_Scope_get
    if _newclass:Scope = _swig_property(_pd.FF_Bonded_Scope_get, _pd.FF_Bonded_Scope_set)
    __swig_setmethods__["DoBonds"] = _pd.FF_Bonded_DoBonds_set
    __swig_getmethods__["DoBonds"] = _pd.FF_Bonded_DoBonds_get
    if _newclass:DoBonds = _swig_property(_pd.FF_Bonded_DoBonds_get, _pd.FF_Bonded_DoBonds_set)
    __swig_setmethods__["DoAngles"] = _pd.FF_Bonded_DoAngles_set
    __swig_getmethods__["DoAngles"] = _pd.FF_Bonded_DoAngles_get
    if _newclass:DoAngles = _swig_property(_pd.FF_Bonded_DoAngles_get, _pd.FF_Bonded_DoAngles_set)
    __swig_setmethods__["DoTorsions"] = _pd.FF_Bonded_DoTorsions_set
    __swig_getmethods__["DoTorsions"] = _pd.FF_Bonded_DoTorsions_get
    if _newclass:DoTorsions = _swig_property(_pd.FF_Bonded_DoTorsions_get, _pd.FF_Bonded_DoTorsions_set)
    __swig_setmethods__["DoImpropers"] = _pd.FF_Bonded_DoImpropers_set
    __swig_getmethods__["DoImpropers"] = _pd.FF_Bonded_DoImpropers_get
    if _newclass:DoImpropers = _swig_property(_pd.FF_Bonded_DoImpropers_get, _pd.FF_Bonded_DoImpropers_set)
    __swig_setmethods__["BondAttenuator"] = _pd.FF_Bonded_BondAttenuator_set
    __swig_getmethods__["BondAttenuator"] = _pd.FF_Bonded_BondAttenuator_get
    if _newclass:BondAttenuator = _swig_property(_pd.FF_Bonded_BondAttenuator_get, _pd.FF_Bonded_BondAttenuator_set)
    __swig_setmethods__["AngleAttenuator"] = _pd.FF_Bonded_AngleAttenuator_set
    __swig_getmethods__["AngleAttenuator"] = _pd.FF_Bonded_AngleAttenuator_get
    if _newclass:AngleAttenuator = _swig_property(_pd.FF_Bonded_AngleAttenuator_get, _pd.FF_Bonded_AngleAttenuator_set)
    __swig_setmethods__["TorsionAttenuator"] = _pd.FF_Bonded_TorsionAttenuator_set
    __swig_getmethods__["TorsionAttenuator"] = _pd.FF_Bonded_TorsionAttenuator_get
    if _newclass:TorsionAttenuator = _swig_property(_pd.FF_Bonded_TorsionAttenuator_get, _pd.FF_Bonded_TorsionAttenuator_set)
    __swig_setmethods__["ImproperAttenuator"] = _pd.FF_Bonded_ImproperAttenuator_set
    __swig_getmethods__["ImproperAttenuator"] = _pd.FF_Bonded_ImproperAttenuator_get
    if _newclass:ImproperAttenuator = _swig_property(_pd.FF_Bonded_ImproperAttenuator_get, _pd.FF_Bonded_ImproperAttenuator_set)
    def setIgnoreForcefieldParams(*args): return _pd.FF_Bonded_setIgnoreForcefieldParams(*args)
    def resetEquilibriumState(*args): return _pd.FF_Bonded_resetEquilibriumState(*args)
    def resetEquilibriumBonds(*args): return _pd.FF_Bonded_resetEquilibriumBonds(*args)
    def resetEquilibriumAngles(*args): return _pd.FF_Bonded_resetEquilibriumAngles(*args)
    def resetEquilibriumHarmonicDihedrals(*args): return _pd.FF_Bonded_resetEquilibriumHarmonicDihedrals(*args)
    def info(*args): return _pd.FF_Bonded_info(*args)
    def getEBond(*args): return _pd.FF_Bonded_getEBond(*args)
    def getEAngle(*args): return _pd.FF_Bonded_getEAngle(*args)
    def getETorsion(*args): return _pd.FF_Bonded_getETorsion(*args)
    def getEImproper(*args): return _pd.FF_Bonded_getEImproper(*args)
    __swig_destroy__ = _pd.delete_FF_Bonded
    __del__ = lambda self : None;
FF_Bonded_swigregister = _pd.FF_Bonded_swigregister
FF_Bonded_swigregister(FF_Bonded)

class Monitor_FF_Bonded_EBond(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_Bonded_EBond, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_Bonded_EBond, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_Bonded_EBond(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_Bonded_EBond_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_Bonded_EBond
    __del__ = lambda self : None;
Monitor_FF_Bonded_EBond_swigregister = _pd.Monitor_FF_Bonded_EBond_swigregister
Monitor_FF_Bonded_EBond_swigregister(Monitor_FF_Bonded_EBond)

class Monitor_FF_Bonded_EAngle(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_Bonded_EAngle, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_Bonded_EAngle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_Bonded_EAngle(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_Bonded_EAngle_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_Bonded_EAngle
    __del__ = lambda self : None;
Monitor_FF_Bonded_EAngle_swigregister = _pd.Monitor_FF_Bonded_EAngle_swigregister
Monitor_FF_Bonded_EAngle_swigregister(Monitor_FF_Bonded_EAngle)

class Monitor_FF_Bonded_ETorsion(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_Bonded_ETorsion, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_Bonded_ETorsion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_Bonded_ETorsion(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_Bonded_ETorsion_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_Bonded_ETorsion
    __del__ = lambda self : None;
Monitor_FF_Bonded_ETorsion_swigregister = _pd.Monitor_FF_Bonded_ETorsion_swigregister
Monitor_FF_Bonded_ETorsion_swigregister(Monitor_FF_Bonded_ETorsion)

class Monitor_FF_Bonded_EImproper(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_Bonded_EImproper, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_Bonded_EImproper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_Bonded_EImproper(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_Bonded_EImproper_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_Bonded_EImproper
    __del__ = lambda self : None;
Monitor_FF_Bonded_EImproper_swigregister = _pd.Monitor_FF_Bonded_EImproper_swigregister
Monitor_FF_Bonded_EImproper_swigregister(Monitor_FF_Bonded_EImproper)

class ContinuumElectrostatic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ContinuumElectrostatic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContinuumElectrostatic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ContinuumElectrostatic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ContinuumElectrostatic
    __del__ = lambda self : None;
    __swig_setmethods__["DielectricSolvent"] = _pd.ContinuumElectrostatic_DielectricSolvent_set
    __swig_getmethods__["DielectricSolvent"] = _pd.ContinuumElectrostatic_DielectricSolvent_get
    if _newclass:DielectricSolvent = _swig_property(_pd.ContinuumElectrostatic_DielectricSolvent_get, _pd.ContinuumElectrostatic_DielectricSolvent_set)
    __swig_setmethods__["DielectricSolute"] = _pd.ContinuumElectrostatic_DielectricSolute_set
    __swig_getmethods__["DielectricSolute"] = _pd.ContinuumElectrostatic_DielectricSolute_get
    if _newclass:DielectricSolute = _swig_property(_pd.ContinuumElectrostatic_DielectricSolute_get, _pd.ContinuumElectrostatic_DielectricSolute_set)
ContinuumElectrostatic_swigregister = _pd.ContinuumElectrostatic_swigregister
ContinuumElectrostatic_swigregister(ContinuumElectrostatic)

class FF_GeneralizedBorn(FF_NonBonded,ContinuumElectrostatic):
    __swig_setmethods__ = {}
    for _s in [FF_NonBonded,ContinuumElectrostatic]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_GeneralizedBorn, name, value)
    __swig_getmethods__ = {}
    for _s in [FF_NonBonded,ContinuumElectrostatic]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_GeneralizedBorn, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_GeneralizedBorn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_FF_GeneralizedBorn
    __del__ = lambda self : None;
    def clone(*args): return _pd.FF_GeneralizedBorn_clone(*args)
    def getEPol(*args): return _pd.FF_GeneralizedBorn_getEPol(*args)
FF_GeneralizedBorn_swigregister = _pd.FF_GeneralizedBorn_swigregister
FF_GeneralizedBorn_swigregister(FF_GeneralizedBorn)

class FF_GeneralizedBorn_Still(FF_GeneralizedBorn):
    __swig_setmethods__ = {}
    for _s in [FF_GeneralizedBorn]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_GeneralizedBorn_Still, name, value)
    __swig_getmethods__ = {}
    for _s in [FF_GeneralizedBorn]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_GeneralizedBorn_Still, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_GeneralizedBorn_Still(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_GeneralizedBorn_Still_clone(*args)
    __swig_destroy__ = _pd.delete_FF_GeneralizedBorn_Still
    __del__ = lambda self : None;
    __swig_setmethods__["FastMode"] = _pd.FF_GeneralizedBorn_Still_FastMode_set
    __swig_getmethods__["FastMode"] = _pd.FF_GeneralizedBorn_Still_FastMode_get
    if _newclass:FastMode = _swig_property(_pd.FF_GeneralizedBorn_Still_FastMode_get, _pd.FF_GeneralizedBorn_Still_FastMode_set)
    __swig_setmethods__["DielectricSolvent"] = _pd.FF_GeneralizedBorn_Still_DielectricSolvent_set
    __swig_getmethods__["DielectricSolvent"] = _pd.FF_GeneralizedBorn_Still_DielectricSolvent_get
    if _newclass:DielectricSolvent = _swig_property(_pd.FF_GeneralizedBorn_Still_DielectricSolvent_get, _pd.FF_GeneralizedBorn_Still_DielectricSolvent_set)
    __swig_setmethods__["DielectricSolute"] = _pd.FF_GeneralizedBorn_Still_DielectricSolute_set
    __swig_getmethods__["DielectricSolute"] = _pd.FF_GeneralizedBorn_Still_DielectricSolute_get
    if _newclass:DielectricSolute = _swig_property(_pd.FF_GeneralizedBorn_Still_DielectricSolute_get, _pd.FF_GeneralizedBorn_Still_DielectricSolute_set)
    __swig_setmethods__["GbsaStillCutoff"] = _pd.FF_GeneralizedBorn_Still_GbsaStillCutoff_set
    __swig_getmethods__["GbsaStillCutoff"] = _pd.FF_GeneralizedBorn_Still_GbsaStillCutoff_get
    if _newclass:GbsaStillCutoff = _swig_property(_pd.FF_GeneralizedBorn_Still_GbsaStillCutoff_get, _pd.FF_GeneralizedBorn_Still_GbsaStillCutoff_set)
    __swig_setmethods__["ExpApproxThreshold"] = _pd.FF_GeneralizedBorn_Still_ExpApproxThreshold_set
    __swig_getmethods__["ExpApproxThreshold"] = _pd.FF_GeneralizedBorn_Still_ExpApproxThreshold_get
    if _newclass:ExpApproxThreshold = _swig_property(_pd.FF_GeneralizedBorn_Still_ExpApproxThreshold_get, _pd.FF_GeneralizedBorn_Still_ExpApproxThreshold_set)
    __swig_setmethods__["DielectricOffset"] = _pd.FF_GeneralizedBorn_Still_DielectricOffset_set
    __swig_getmethods__["DielectricOffset"] = _pd.FF_GeneralizedBorn_Still_DielectricOffset_get
    if _newclass:DielectricOffset = _swig_property(_pd.FF_GeneralizedBorn_Still_DielectricOffset_get, _pd.FF_GeneralizedBorn_Still_DielectricOffset_set)
    __swig_setmethods__["BornRadiusOffset"] = _pd.FF_GeneralizedBorn_Still_BornRadiusOffset_set
    __swig_getmethods__["BornRadiusOffset"] = _pd.FF_GeneralizedBorn_Still_BornRadiusOffset_get
    if _newclass:BornRadiusOffset = _swig_property(_pd.FF_GeneralizedBorn_Still_BornRadiusOffset_get, _pd.FF_GeneralizedBorn_Still_BornRadiusOffset_set)
FF_GeneralizedBorn_Still_swigregister = _pd.FF_GeneralizedBorn_Still_swigregister
FF_GeneralizedBorn_Still_swigregister(FF_GeneralizedBorn_Still)

class Monitor_FF_GeneralizedBorn_EPol(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Monitor_FF_GeneralizedBorn_EPol, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Monitor_FF_GeneralizedBorn_EPol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Monitor_FF_GeneralizedBorn_EPol(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Monitor_FF_GeneralizedBorn_EPol_clone(*args)
    __swig_destroy__ = _pd.delete_Monitor_FF_GeneralizedBorn_EPol
    __del__ = lambda self : None;
Monitor_FF_GeneralizedBorn_EPol_swigregister = _pd.Monitor_FF_GeneralizedBorn_EPol_swigregister
Monitor_FF_GeneralizedBorn_EPol_swigregister(Monitor_FF_GeneralizedBorn_EPol)

Nlistmax = _pd.Nlistmax
class FF_SASA_LCPO(ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_SASA_LCPO, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_SASA_LCPO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_SASA_LCPO(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_SASA_LCPO_clone(*args)
    __swig_setmethods__["ASPsection_name"] = _pd.FF_SASA_LCPO_ASPsection_name_set
    __swig_getmethods__["ASPsection_name"] = _pd.FF_SASA_LCPO_ASPsection_name_get
    if _newclass:ASPsection_name = _swig_property(_pd.FF_SASA_LCPO_ASPsection_name_get, _pd.FF_SASA_LCPO_ASPsection_name_set)
    __swig_setmethods__["GlobalASP"] = _pd.FF_SASA_LCPO_GlobalASP_set
    __swig_getmethods__["GlobalASP"] = _pd.FF_SASA_LCPO_GlobalASP_get
    if _newclass:GlobalASP = _swig_property(_pd.FF_SASA_LCPO_GlobalASP_get, _pd.FF_SASA_LCPO_GlobalASP_set)
    __swig_setmethods__["UpdateSasa"] = _pd.FF_SASA_LCPO_UpdateSasa_set
    __swig_getmethods__["UpdateSasa"] = _pd.FF_SASA_LCPO_UpdateSasa_get
    if _newclass:UpdateSasa = _swig_property(_pd.FF_SASA_LCPO_UpdateSasa_get, _pd.FF_SASA_LCPO_UpdateSasa_set)
    def settodefault(*args): return _pd.FF_SASA_LCPO_settodefault(*args)
    __swig_destroy__ = _pd.delete_FF_SASA_LCPO
    __del__ = lambda self : None;
FF_SASA_LCPO_swigregister = _pd.FF_SASA_LCPO_swigregister
FF_SASA_LCPO_swigregister(FF_SASA_LCPO)

class RestraintForcefieldBase(ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RestraintForcefieldBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RestraintForcefieldBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.RestraintForcefieldBase_clone(*args)
    __swig_destroy__ = _pd.delete_RestraintForcefieldBase
    __del__ = lambda self : None;
    def setup(*args): return _pd.RestraintForcefieldBase_setup(*args)
    def calcEnergyAtQ(*args): return _pd.RestraintForcefieldBase_calcEnergyAtQ(*args)
    __swig_setmethods__["k"] = _pd.RestraintForcefieldBase_k_set
    __swig_getmethods__["k"] = _pd.RestraintForcefieldBase_k_get
    if _newclass:k = _swig_property(_pd.RestraintForcefieldBase_k_get, _pd.RestraintForcefieldBase_k_set)
    __swig_setmethods__["Q"] = _pd.RestraintForcefieldBase_Q_set
    __swig_getmethods__["Q"] = _pd.RestraintForcefieldBase_Q_get
    if _newclass:Q = _swig_property(_pd.RestraintForcefieldBase_Q_get, _pd.RestraintForcefieldBase_Q_set)
    __swig_setmethods__["deviat"] = _pd.RestraintForcefieldBase_deviat_set
    __swig_getmethods__["deviat"] = _pd.RestraintForcefieldBase_deviat_get
    if _newclass:deviat = _swig_property(_pd.RestraintForcefieldBase_deviat_get, _pd.RestraintForcefieldBase_deviat_set)
    def setRestraintStructure(*args): return _pd.RestraintForcefieldBase_setRestraintStructure(*args)
    def saveCurrentAtomPositions(*args): return _pd.RestraintForcefieldBase_saveCurrentAtomPositions(*args)
RestraintForcefieldBase_swigregister = _pd.RestraintForcefieldBase_swigregister
RestraintForcefieldBase_swigregister(RestraintForcefieldBase)

class AtomRestraintForcefieldBase(RestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [RestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AtomRestraintForcefieldBase, name, value)
    __swig_getmethods__ = {}
    for _s in [RestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomRestraintForcefieldBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def clone(*args): return _pd.AtomRestraintForcefieldBase_clone(*args)
    def setup(*args): return _pd.AtomRestraintForcefieldBase_setup(*args)
    def setSelection(*args): return _pd.AtomRestraintForcefieldBase_setSelection(*args)
    def saveCurrentAtomPositions(*args): return _pd.AtomRestraintForcefieldBase_saveCurrentAtomPositions(*args)
    def detail(*args): return _pd.AtomRestraintForcefieldBase_detail(*args)
    __swig_destroy__ = _pd.delete_AtomRestraintForcefieldBase
    __del__ = lambda self : None;
AtomRestraintForcefieldBase_swigregister = _pd.AtomRestraintForcefieldBase_swigregister
AtomRestraintForcefieldBase_swigregister(AtomRestraintForcefieldBase)

class FF_Restraint_Positional(AtomRestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Restraint_Positional, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Restraint_Positional, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Restraint_Positional(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Restraint_Positional_clone(*args)
    __swig_setmethods__["Power"] = _pd.FF_Restraint_Positional_Power_set
    __swig_getmethods__["Power"] = _pd.FF_Restraint_Positional_Power_get
    if _newclass:Power = _swig_property(_pd.FF_Restraint_Positional_Power_get, _pd.FF_Restraint_Positional_Power_set)
    def calcEnergyAtQ(*args): return _pd.FF_Restraint_Positional_calcEnergyAtQ(*args)
    def info(*args): return _pd.FF_Restraint_Positional_info(*args)
    __swig_destroy__ = _pd.delete_FF_Restraint_Positional
    __del__ = lambda self : None;
FF_Restraint_Positional_swigregister = _pd.FF_Restraint_Positional_swigregister
FF_Restraint_Positional_swigregister(FF_Restraint_Positional)

class FF_Restraint_Internal(AtomRestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Restraint_Internal, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Restraint_Internal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Restraint_Internal(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Restraint_Internal_clone(*args)
    def info(*args): return _pd.FF_Restraint_Internal_info(*args)
    __swig_setmethods__["RestCutoff"] = _pd.FF_Restraint_Internal_RestCutoff_set
    __swig_getmethods__["RestCutoff"] = _pd.FF_Restraint_Internal_RestCutoff_get
    if _newclass:RestCutoff = _swig_property(_pd.FF_Restraint_Internal_RestCutoff_get, _pd.FF_Restraint_Internal_RestCutoff_set)
    __swig_setmethods__["DivByNumber"] = _pd.FF_Restraint_Internal_DivByNumber_set
    __swig_getmethods__["DivByNumber"] = _pd.FF_Restraint_Internal_DivByNumber_get
    if _newclass:DivByNumber = _swig_property(_pd.FF_Restraint_Internal_DivByNumber_get, _pd.FF_Restraint_Internal_DivByNumber_set)
    __swig_destroy__ = _pd.delete_FF_Restraint_Internal
    __del__ = lambda self : None;
FF_Restraint_Internal_swigregister = _pd.FF_Restraint_Internal_swigregister
FF_Restraint_Internal_swigregister(FF_Restraint_Internal)

class FF_Restraint_Torsional(AtomRestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Restraint_Torsional, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Restraint_Torsional, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Restraint_Torsional(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Restraint_Torsional_clone(*args)
    def calcEnergyAtQ(*args): return _pd.FF_Restraint_Torsional_calcEnergyAtQ(*args)
    def info(*args): return _pd.FF_Restraint_Torsional_info(*args)
    def detail(*args): return _pd.FF_Restraint_Torsional_detail(*args)
    __swig_setmethods__["OneRestraintPerBond"] = _pd.FF_Restraint_Torsional_OneRestraintPerBond_set
    __swig_getmethods__["OneRestraintPerBond"] = _pd.FF_Restraint_Torsional_OneRestraintPerBond_get
    if _newclass:OneRestraintPerBond = _swig_property(_pd.FF_Restraint_Torsional_OneRestraintPerBond_get, _pd.FF_Restraint_Torsional_OneRestraintPerBond_set)
    __swig_destroy__ = _pd.delete_FF_Restraint_Torsional
    __del__ = lambda self : None;
FF_Restraint_Torsional_swigregister = _pd.FF_Restraint_Torsional_swigregister
FF_Restraint_Torsional_swigregister(FF_Restraint_Torsional)

class FF_Restraint_AtomDistance(RestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [RestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Restraint_AtomDistance, name, value)
    __swig_getmethods__ = {}
    for _s in [RestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Restraint_AtomDistance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Restraint_AtomDistance(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Restraint_AtomDistance_clone(*args)
    def info(*args): return _pd.FF_Restraint_AtomDistance_info(*args)
    def detail(*args): return _pd.FF_Restraint_AtomDistance_detail(*args)
    __swig_setmethods__["Power"] = _pd.FF_Restraint_AtomDistance_Power_set
    __swig_getmethods__["Power"] = _pd.FF_Restraint_AtomDistance_Power_get
    if _newclass:Power = _swig_property(_pd.FF_Restraint_AtomDistance_Power_get, _pd.FF_Restraint_AtomDistance_Power_set)
    __swig_setmethods__["Atom_i"] = _pd.FF_Restraint_AtomDistance_Atom_i_set
    __swig_getmethods__["Atom_i"] = _pd.FF_Restraint_AtomDistance_Atom_i_get
    if _newclass:Atom_i = _swig_property(_pd.FF_Restraint_AtomDistance_Atom_i_get, _pd.FF_Restraint_AtomDistance_Atom_i_set)
    __swig_setmethods__["Atom_j"] = _pd.FF_Restraint_AtomDistance_Atom_j_set
    __swig_getmethods__["Atom_j"] = _pd.FF_Restraint_AtomDistance_Atom_j_get
    if _newclass:Atom_j = _swig_property(_pd.FF_Restraint_AtomDistance_Atom_j_get, _pd.FF_Restraint_AtomDistance_Atom_j_set)
    __swig_setmethods__["Dist_ij"] = _pd.FF_Restraint_AtomDistance_Dist_ij_set
    __swig_getmethods__["Dist_ij"] = _pd.FF_Restraint_AtomDistance_Dist_ij_get
    if _newclass:Dist_ij = _swig_property(_pd.FF_Restraint_AtomDistance_Dist_ij_get, _pd.FF_Restraint_AtomDistance_Dist_ij_set)
    __swig_destroy__ = _pd.delete_FF_Restraint_AtomDistance
    __del__ = lambda self : None;
FF_Restraint_AtomDistance_swigregister = _pd.FF_Restraint_AtomDistance_swigregister
FF_Restraint_AtomDistance_swigregister(FF_Restraint_AtomDistance)

class FF_Restraint_NativeContact(AtomRestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Restraint_NativeContact, name, value)
    __swig_getmethods__ = {}
    for _s in [AtomRestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Restraint_NativeContact, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Restraint_NativeContact(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Restraint_NativeContact_clone(*args)
    def info(*args): return _pd.FF_Restraint_NativeContact_info(*args)
    def detail(*args): return _pd.FF_Restraint_NativeContact_detail(*args)
    __swig_setmethods__["NativeDist"] = _pd.FF_Restraint_NativeContact_NativeDist_set
    __swig_getmethods__["NativeDist"] = _pd.FF_Restraint_NativeContact_NativeDist_get
    if _newclass:NativeDist = _swig_property(_pd.FF_Restraint_NativeContact_NativeDist_get, _pd.FF_Restraint_NativeContact_NativeDist_set)
    __swig_setmethods__["Steepness"] = _pd.FF_Restraint_NativeContact_Steepness_set
    __swig_getmethods__["Steepness"] = _pd.FF_Restraint_NativeContact_Steepness_get
    if _newclass:Steepness = _swig_property(_pd.FF_Restraint_NativeContact_Steepness_get, _pd.FF_Restraint_NativeContact_Steepness_set)
    __swig_setmethods__["p0"] = _pd.FF_Restraint_NativeContact_p0_set
    __swig_getmethods__["p0"] = _pd.FF_Restraint_NativeContact_p0_get
    if _newclass:p0 = _swig_property(_pd.FF_Restraint_NativeContact_p0_get, _pd.FF_Restraint_NativeContact_p0_set)
    __swig_destroy__ = _pd.delete_FF_Restraint_NativeContact
    __del__ = lambda self : None;
FF_Restraint_NativeContact_swigregister = _pd.FF_Restraint_NativeContact_swigregister
FF_Restraint_NativeContact_swigregister(FF_Restraint_NativeContact)

class CustomForce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CustomForce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomForce, name)
    __repr__ = _swig_repr
    INACTIVE = _pd.CustomForce_INACTIVE
    HARMONIC = _pd.CustomForce_HARMONIC
    BELLSHAPED = _pd.CustomForce_BELLSHAPED
    VSHAPED = _pd.CustomForce_VSHAPED
    INVREP = _pd.CustomForce_INVREP
    LINEARRESTRAINT = _pd.CustomForce_LINEARRESTRAINT
    def __init__(self, *args): 
        this = _pd.new_CustomForce(*args)
        try: self.this.append(this)
        except: self.this = this
    def setup(*args): return _pd.CustomForce_setup(*args)
    def calcForceSingle(*args): return _pd.CustomForce_calcForceSingle(*args)
    def info(*args): return _pd.CustomForce_info(*args)
    def compareAtoms(*args): return _pd.CustomForce_compareAtoms(*args)
    def setToHarmonic(*args): return _pd.CustomForce_setToHarmonic(*args)
    def setToBellShaped(*args): return _pd.CustomForce_setToBellShaped(*args)
    def setToVShaped(*args): return _pd.CustomForce_setToVShaped(*args)
    def setToLinearRestraint(*args): return _pd.CustomForce_setToLinearRestraint(*args)
    def activate(*args): return _pd.CustomForce_activate(*args)
    def deactivate(*args): return _pd.CustomForce_deactivate(*args)
    def setAbsPosTo(*args): return _pd.CustomForce_setAbsPosTo(*args)
    def printTextLine(*args): return _pd.CustomForce_printTextLine(*args)
    __swig_setmethods__["ID"] = _pd.CustomForce_ID_set
    __swig_getmethods__["ID"] = _pd.CustomForce_ID_get
    if _newclass:ID = _swig_property(_pd.CustomForce_ID_get, _pd.CustomForce_ID_set)
    __swig_destroy__ = _pd.delete_CustomForce
    __del__ = lambda self : None;
CustomForce_swigregister = _pd.CustomForce_swigregister
CustomForce_swigregister(CustomForce)

class FF_Custom(ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_Custom, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_Custom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_Custom(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_Custom_clone(*args)
    def setup(*args): return _pd.FF_Custom_setup(*args)
    def calcEnergiesVerbose(*args): return _pd.FF_Custom_calcEnergiesVerbose(*args)
    def calcEnergies(*args): return _pd.FF_Custom_calcEnergies(*args)
    def calcForces(*args): return _pd.FF_Custom_calcForces(*args)
    def calcForceSingle(*args): return _pd.FF_Custom_calcForceSingle(*args)
    def info(*args): return _pd.FF_Custom_info(*args)
    def infoLine(*args): return _pd.FF_Custom_infoLine(*args)
    def infoLineHeader(*args): return _pd.FF_Custom_infoLineHeader(*args)
    def getForce(*args): return _pd.FF_Custom_getForce(*args)
    def addForce(*args): return _pd.FF_Custom_addForce(*args)
    def clear(*args): return _pd.FF_Custom_clear(*args)
    def empty(*args): return _pd.FF_Custom_empty(*args)
    def size(*args): return _pd.FF_Custom_size(*args)
    def findForce(*args): return _pd.FF_Custom_findForce(*args)
    def activateforces(*args): return _pd.FF_Custom_activateforces(*args)
    def activateforcesnot(*args): return _pd.FF_Custom_activateforcesnot(*args)
    def deactivateforces(*args): return _pd.FF_Custom_deactivateforces(*args)
    def deactivateforcesnot(*args): return _pd.FF_Custom_deactivateforcesnot(*args)
    def loadTextFile(*args): return _pd.FF_Custom_loadTextFile(*args)
    def saveTextFile(*args): return _pd.FF_Custom_saveTextFile(*args)
    def load(*args): return _pd.FF_Custom_load(*args)
    def save(*args): return _pd.FF_Custom_save(*args)
    __swig_setmethods__["name_verbose"] = _pd.FF_Custom_name_verbose_set
    __swig_getmethods__["name_verbose"] = _pd.FF_Custom_name_verbose_get
    if _newclass:name_verbose = _swig_property(_pd.FF_Custom_name_verbose_get, _pd.FF_Custom_name_verbose_set)
    __swig_setmethods__["name_infoheader"] = _pd.FF_Custom_name_infoheader_set
    __swig_getmethods__["name_infoheader"] = _pd.FF_Custom_name_infoheader_get
    if _newclass:name_infoheader = _swig_property(_pd.FF_Custom_name_infoheader_get, _pd.FF_Custom_name_infoheader_set)
    __swig_destroy__ = _pd.delete_FF_Custom
    __del__ = lambda self : None;
FF_Custom_swigregister = _pd.FF_Custom_swigregister
FF_Custom_swigregister(FF_Custom)

class FF_SoftVDW(ForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [ForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_SoftVDW, name, value)
    __swig_getmethods__ = {}
    for _s in [ForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_SoftVDW, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_SoftVDW(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_SoftVDW_clone(*args)
    def settodefault(*args): return _pd.FF_SoftVDW_settodefault(*args)
    __swig_setmethods__["OlapOffset"] = _pd.FF_SoftVDW_OlapOffset_set
    __swig_getmethods__["OlapOffset"] = _pd.FF_SoftVDW_OlapOffset_get
    if _newclass:OlapOffset = _swig_property(_pd.FF_SoftVDW_OlapOffset_get, _pd.FF_SoftVDW_OlapOffset_set)
    __swig_setmethods__["Hardness"] = _pd.FF_SoftVDW_Hardness_set
    __swig_getmethods__["Hardness"] = _pd.FF_SoftVDW_Hardness_get
    if _newclass:Hardness = _swig_property(_pd.FF_SoftVDW_Hardness_get, _pd.FF_SoftVDW_Hardness_set)
    __swig_setmethods__["AutoScaling14"] = _pd.FF_SoftVDW_AutoScaling14_set
    __swig_getmethods__["AutoScaling14"] = _pd.FF_SoftVDW_AutoScaling14_get
    if _newclass:AutoScaling14 = _swig_property(_pd.FF_SoftVDW_AutoScaling14_get, _pd.FF_SoftVDW_AutoScaling14_set)
    __swig_setmethods__["VdwCutoff"] = _pd.FF_SoftVDW_VdwCutoff_set
    __swig_getmethods__["VdwCutoff"] = _pd.FF_SoftVDW_VdwCutoff_get
    if _newclass:VdwCutoff = _swig_property(_pd.FF_SoftVDW_VdwCutoff_get, _pd.FF_SoftVDW_VdwCutoff_set)
    __swig_setmethods__["VdwInnerCutoff"] = _pd.FF_SoftVDW_VdwInnerCutoff_set
    __swig_getmethods__["VdwInnerCutoff"] = _pd.FF_SoftVDW_VdwInnerCutoff_get
    if _newclass:VdwInnerCutoff = _swig_property(_pd.FF_SoftVDW_VdwInnerCutoff_get, _pd.FF_SoftVDW_VdwInnerCutoff_set)
    __swig_setmethods__["Vdw14Scaling"] = _pd.FF_SoftVDW_Vdw14Scaling_set
    __swig_getmethods__["Vdw14Scaling"] = _pd.FF_SoftVDW_Vdw14Scaling_get
    if _newclass:Vdw14Scaling = _swig_property(_pd.FF_SoftVDW_Vdw14Scaling_get, _pd.FF_SoftVDW_Vdw14Scaling_set)
    def setup(*args): return _pd.FF_SoftVDW_setup(*args)
    def calcEnergiesVerbose(*args): return _pd.FF_SoftVDW_calcEnergiesVerbose(*args)
    def calcEnergies(*args): return _pd.FF_SoftVDW_calcEnergies(*args)
    def calcForces(*args): return _pd.FF_SoftVDW_calcForces(*args)
    def info(*args): return _pd.FF_SoftVDW_info(*args)
    def infoLine(*args): return _pd.FF_SoftVDW_infoLine(*args)
    def infoLineHeader(*args): return _pd.FF_SoftVDW_infoLineHeader(*args)
    __swig_destroy__ = _pd.delete_FF_SoftVDW
    __del__ = lambda self : None;
FF_SoftVDW_swigregister = _pd.FF_SoftVDW_swigregister
FF_SoftVDW_swigregister(FF_SoftVDW)

class IBondBreakable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, IBondBreakable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBondBreakable, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def createBreak(*args): return _pd.IBondBreakable_createBreak(*args)
    def clearBreaks(*args): return _pd.IBondBreakable_clearBreaks(*args)
    __swig_destroy__ = _pd.delete_IBondBreakable
    __del__ = lambda self : None;
IBondBreakable_swigregister = _pd.IBondBreakable_swigregister
IBondBreakable_swigregister(IBondBreakable)

class FF_BreakableBonded(FF_Bonded,IBondBreakable):
    __swig_setmethods__ = {}
    for _s in [FF_Bonded,IBondBreakable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FF_BreakableBonded, name, value)
    __swig_getmethods__ = {}
    for _s in [FF_Bonded,IBondBreakable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FF_BreakableBonded, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FF_BreakableBonded(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FF_BreakableBonded_clone(*args)
    def createBreak(*args): return _pd.FF_BreakableBonded_createBreak(*args)
    def clearBreaks(*args): return _pd.FF_BreakableBonded_clearBreaks(*args)
    __swig_destroy__ = _pd.delete_FF_BreakableBonded
    __del__ = lambda self : None;
FF_BreakableBonded_swigregister = _pd.FF_BreakableBonded_swigregister
FF_BreakableBonded_swigregister(FF_BreakableBonded)

ApplyTorsional = _pd.ApplyTorsional
ApplyTorsional_Idealise = _pd.ApplyTorsional_Idealise
ApplyTorsional_PeriodicIdealise = _pd.ApplyTorsional_PeriodicIdealise
ApplyCartesian = _pd.ApplyCartesian
class RotamerFilterBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerFilterBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerFilterBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_RotamerFilterBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.RotamerFilterBase_clone(*args)
    def passes(*args): return _pd.RotamerFilterBase_passes(*args)
    def requiresCoordinates(*args): return _pd.RotamerFilterBase_requiresCoordinates(*args)
RotamerFilterBase_swigregister = _pd.RotamerFilterBase_swigregister
RotamerFilterBase_swigregister(RotamerFilterBase)

class ObjectContainer_RotamerFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ObjectContainer_RotamerFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectContainer_RotamerFilter, name)
    __repr__ = _swig_repr
    def clone(*args): return _pd.ObjectContainer_RotamerFilter_clone(*args)
    __swig_destroy__ = _pd.delete_ObjectContainer_RotamerFilter
    __del__ = lambda self : None;
    def clear(*args): return _pd.ObjectContainer_RotamerFilter_clear(*args)
    def __init__(self, *args): 
        this = _pd.new_ObjectContainer_RotamerFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(*args): return _pd.ObjectContainer_RotamerFilter_size(*args)
    def add(*args):
        if not hasattr(args[0],"store"): _swig_setattr(args[0], args[0] , "store", []);
        args[0].store.append(args[1])    
        return _pd.ObjectContainer_RotamerFilter_add(*args)

    def erase(*args): return _pd.ObjectContainer_RotamerFilter_erase(*args)
    def pop_back(*args): return _pd.ObjectContainer_RotamerFilter_pop_back(*args)
    def element(*args): return _pd.ObjectContainer_RotamerFilter_element(*args)
ObjectContainer_RotamerFilter_swigregister = _pd.ObjectContainer_RotamerFilter_swigregister
ObjectContainer_RotamerFilter_swigregister(ObjectContainer_RotamerFilter)

class RotamerFilterContainer(RotamerFilterBase,ObjectContainer_RotamerFilter):
    __swig_setmethods__ = {}
    for _s in [RotamerFilterBase,ObjectContainer_RotamerFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerFilterContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [RotamerFilterBase,ObjectContainer_RotamerFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerFilterContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotamerFilterContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotamerFilterContainer
    __del__ = lambda self : None;
    def clone(*args): return _pd.RotamerFilterContainer_clone(*args)
    def passes(*args): return _pd.RotamerFilterContainer_passes(*args)
    def requiresCoordinates(*args): return _pd.RotamerFilterContainer_requiresCoordinates(*args)
RotamerFilterContainer_swigregister = _pd.RotamerFilterContainer_swigregister
RotamerFilterContainer_swigregister(RotamerFilterContainer)

class RotamerStericFilter(RotamerFilterBase):
    __swig_setmethods__ = {}
    for _s in [RotamerFilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerStericFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [RotamerFilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerStericFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotamerStericFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotamerStericFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.RotamerStericFilter_clone(*args)
    def passes(*args): return _pd.RotamerStericFilter_passes(*args)
    def requiresCoordinates(*args): return _pd.RotamerStericFilter_requiresCoordinates(*args)
RotamerStericFilter_swigregister = _pd.RotamerStericFilter_swigregister
RotamerStericFilter_swigregister(RotamerStericFilter)

class RotamerLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerLink, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["serial"] = _pd.RotamerLink_serial_set
    __swig_getmethods__["serial"] = _pd.RotamerLink_serial_get
    if _newclass:serial = _swig_property(_pd.RotamerLink_serial_get, _pd.RotamerLink_serial_set)
    __swig_setmethods__["resIndex"] = _pd.RotamerLink_resIndex_set
    __swig_getmethods__["resIndex"] = _pd.RotamerLink_resIndex_get
    if _newclass:resIndex = _swig_property(_pd.RotamerLink_resIndex_get, _pd.RotamerLink_resIndex_set)
    __swig_setmethods__["libraryRotID"] = _pd.RotamerLink_libraryRotID_set
    __swig_getmethods__["libraryRotID"] = _pd.RotamerLink_libraryRotID_get
    if _newclass:libraryRotID = _swig_property(_pd.RotamerLink_libraryRotID_get, _pd.RotamerLink_libraryRotID_set)
    __swig_setmethods__["indexMap"] = _pd.RotamerLink_indexMap_set
    __swig_getmethods__["indexMap"] = _pd.RotamerLink_indexMap_get
    if _newclass:indexMap = _swig_property(_pd.RotamerLink_indexMap_get, _pd.RotamerLink_indexMap_set)
    __swig_setmethods__["scopeMap"] = _pd.RotamerLink_scopeMap_set
    __swig_getmethods__["scopeMap"] = _pd.RotamerLink_scopeMap_get
    if _newclass:scopeMap = _swig_property(_pd.RotamerLink_scopeMap_get, _pd.RotamerLink_scopeMap_set)
    __swig_setmethods__["rot"] = _pd.RotamerLink_rot_set
    __swig_getmethods__["rot"] = _pd.RotamerLink_rot_get
    if _newclass:rot = _swig_property(_pd.RotamerLink_rot_get, _pd.RotamerLink_rot_set)
    __swig_setmethods__["wspace"] = _pd.RotamerLink_wspace_set
    __swig_getmethods__["wspace"] = _pd.RotamerLink_wspace_get
    if _newclass:wspace = _swig_property(_pd.RotamerLink_wspace_get, _pd.RotamerLink_wspace_set)
    __swig_setmethods__["mode"] = _pd.RotamerLink_mode_set
    __swig_getmethods__["mode"] = _pd.RotamerLink_mode_get
    if _newclass:mode = _swig_property(_pd.RotamerLink_mode_get, _pd.RotamerLink_mode_set)
    __swig_setmethods__["PeriodicIdealiseInterval"] = _pd.RotamerLink_PeriodicIdealiseInterval_set
    __swig_getmethods__["PeriodicIdealiseInterval"] = _pd.RotamerLink_PeriodicIdealiseInterval_get
    if _newclass:PeriodicIdealiseInterval = _swig_property(_pd.RotamerLink_PeriodicIdealiseInterval_get, _pd.RotamerLink_PeriodicIdealiseInterval_set)
    __swig_setmethods__["maxInteractionDistance"] = _pd.RotamerLink_maxInteractionDistance_set
    __swig_getmethods__["maxInteractionDistance"] = _pd.RotamerLink_maxInteractionDistance_get
    if _newclass:maxInteractionDistance = _swig_property(_pd.RotamerLink_maxInteractionDistance_get, _pd.RotamerLink_maxInteractionDistance_set)
    __swig_setmethods__["sidechainPosCacheA"] = _pd.RotamerLink_sidechainPosCacheA_set
    __swig_getmethods__["sidechainPosCacheA"] = _pd.RotamerLink_sidechainPosCacheA_get
    if _newclass:sidechainPosCacheA = _swig_property(_pd.RotamerLink_sidechainPosCacheA_get, _pd.RotamerLink_sidechainPosCacheA_set)
    __swig_setmethods__["sidechainPosCacheB"] = _pd.RotamerLink_sidechainPosCacheB_set
    __swig_getmethods__["sidechainPosCacheB"] = _pd.RotamerLink_sidechainPosCacheB_get
    if _newclass:sidechainPosCacheB = _swig_property(_pd.RotamerLink_sidechainPosCacheB_get, _pd.RotamerLink_sidechainPosCacheB_set)
    __swig_setmethods__["maxProbability"] = _pd.RotamerLink_maxProbability_set
    __swig_getmethods__["maxProbability"] = _pd.RotamerLink_maxProbability_get
    if _newclass:maxProbability = _swig_property(_pd.RotamerLink_maxProbability_get, _pd.RotamerLink_maxProbability_set)
    def reinit(*args): return _pd.RotamerLink_reinit(*args)
    def apply(*args): return _pd.RotamerLink_apply(*args)
    def applyIfChangedID(*args): return _pd.RotamerLink_applyIfChangedID(*args)
    def applyFFIdeal(*args): return _pd.RotamerLink_applyFFIdeal(*args)
    def probability(*args): return _pd.RotamerLink_probability(*args)
    def setActive(*args): return _pd.RotamerLink_setActive(*args)
    def getActive(*args): return _pd.RotamerLink_getActive(*args)
    def countActive(*args): return _pd.RotamerLink_countActive(*args)
    def nRot(*args): return _pd.RotamerLink_nRot(*args)
    def lastRotamerApplied(*args): return _pd.RotamerLink_lastRotamerApplied(*args)
    __swig_destroy__ = _pd.delete_RotamerLink
    __del__ = lambda self : None;
RotamerLink_swigregister = _pd.RotamerLink_swigregister
RotamerLink_swigregister(RotamerLink)

class RotamerApplicatorBase(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerApplicatorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerApplicatorBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_RotamerApplicatorBase
    __del__ = lambda self : None;
    def clone(*args): return _pd.RotamerApplicatorBase_clone(*args)
    def printRotLinkActivity(*args): return _pd.RotamerApplicatorBase_printRotLinkActivity(*args)
    __swig_setmethods__["OutputLevel"] = _pd.RotamerApplicatorBase_OutputLevel_set
    __swig_getmethods__["OutputLevel"] = _pd.RotamerApplicatorBase_OutputLevel_get
    if _newclass:OutputLevel = _swig_property(_pd.RotamerApplicatorBase_OutputLevel_get, _pd.RotamerApplicatorBase_OutputLevel_set)
    def overrideStaticGrid(*args): return _pd.RotamerApplicatorBase_overrideStaticGrid(*args)
    def reInitialise(*args): return _pd.RotamerApplicatorBase_reInitialise(*args)
    def apply(*args): return _pd.RotamerApplicatorBase_apply(*args)
    def applyRotamer(*args): return _pd.RotamerApplicatorBase_applyRotamer(*args)
    def applyMostLikelyNonClashingRotamers(*args): return _pd.RotamerApplicatorBase_applyMostLikelyNonClashingRotamers(*args)
    def applyMostLikelyNonClashingRotamer(*args): return _pd.RotamerApplicatorBase_applyMostLikelyNonClashingRotamer(*args)
    def getPicker(*args): return _pd.RotamerApplicatorBase_getPicker(*args)
    def clearFilters(*args): return _pd.RotamerApplicatorBase_clearFilters(*args)
    def enableFilters(*args): return _pd.RotamerApplicatorBase_enableFilters(*args)
    def addFilter(*args): return _pd.RotamerApplicatorBase_addFilter(*args)
    def addFilter_DefaultSteric(*args): return _pd.RotamerApplicatorBase_addFilter_DefaultSteric(*args)
    def deActivateAll(*args): return _pd.RotamerApplicatorBase_deActivateAll(*args)
    def activateAll(*args): return _pd.RotamerApplicatorBase_activateAll(*args)
    def nRot(*args): return _pd.RotamerApplicatorBase_nRot(*args)
    def size(*args): return _pd.RotamerApplicatorBase_size(*args)
    def getStaticGrid(*args): return _pd.RotamerApplicatorBase_getStaticGrid(*args)
    def getDynamicGrid(*args): return _pd.RotamerApplicatorBase_getDynamicGrid(*args)
    def getLibrary(*args): return _pd.RotamerApplicatorBase_getLibrary(*args)
    def setPeriodicIdealiseInterval(*args): return _pd.RotamerApplicatorBase_setPeriodicIdealiseInterval(*args)
    def getStoredPairwiseEne(*args): return _pd.RotamerApplicatorBase_getStoredPairwiseEne(*args)
    def getStoredStaticEne(*args): return _pd.RotamerApplicatorBase_getStoredStaticEne(*args)
    def getStoredStaticEneIndexer(*args): return _pd.RotamerApplicatorBase_getStoredStaticEneIndexer(*args)
RotamerApplicatorBase_swigregister = _pd.RotamerApplicatorBase_swigregister
RotamerApplicatorBase_swigregister(RotamerApplicatorBase)
RotEneStoreType_MAX = cvar.RotEneStoreType_MAX

class RandomRotamerApplicator(RotamerApplicatorBase):
    __swig_setmethods__ = {}
    for _s in [RotamerApplicatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RandomRotamerApplicator, name, value)
    __swig_getmethods__ = {}
    for _s in [RotamerApplicatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RandomRotamerApplicator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RandomRotamerApplicator(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.RandomRotamerApplicator_clone(*args)
    def apply(*args): return _pd.RandomRotamerApplicator_apply(*args)
    __swig_setmethods__["ProbabilityWeighting"] = _pd.RandomRotamerApplicator_ProbabilityWeighting_set
    __swig_getmethods__["ProbabilityWeighting"] = _pd.RandomRotamerApplicator_ProbabilityWeighting_get
    if _newclass:ProbabilityWeighting = _swig_property(_pd.RandomRotamerApplicator_ProbabilityWeighting_get, _pd.RandomRotamerApplicator_ProbabilityWeighting_set)
    __swig_destroy__ = _pd.delete_RandomRotamerApplicator
    __del__ = lambda self : None;
RandomRotamerApplicator_swigregister = _pd.RandomRotamerApplicator_swigregister
RandomRotamerApplicator_swigregister(RandomRotamerApplicator)

class CartesianMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CartesianMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CartesianMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_CartesianMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.CartesianMove_clone(*args)
    def apply(*args): return _pd.CartesianMove_apply(*args)
    __swig_setmethods__["RepeatInterval"] = _pd.CartesianMove_RepeatInterval_set
    __swig_getmethods__["RepeatInterval"] = _pd.CartesianMove_RepeatInterval_get
    if _newclass:RepeatInterval = _swig_property(_pd.CartesianMove_RepeatInterval_get, _pd.CartesianMove_RepeatInterval_set)
    __swig_destroy__ = _pd.delete_CartesianMove
    __del__ = lambda self : None;
CartesianMove_swigregister = _pd.CartesianMove_swigregister
CartesianMove_swigregister(CartesianMove)

class CartesianBlockMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CartesianBlockMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CartesianBlockMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_CartesianBlockMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.CartesianBlockMove_clone(*args)
    def apply(*args): return _pd.CartesianBlockMove_apply(*args)
    __swig_destroy__ = _pd.delete_CartesianBlockMove
    __del__ = lambda self : None;
CartesianBlockMove_swigregister = _pd.CartesianBlockMove_swigregister
CartesianBlockMove_swigregister(CartesianBlockMove)

class MoleculeDisplacement(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MoleculeDisplacement, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoleculeDisplacement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MoleculeDisplacement(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.MoleculeDisplacement_clone(*args)
    def apply(*args): return _pd.MoleculeDisplacement_apply(*args)
    __swig_destroy__ = _pd.delete_MoleculeDisplacement
    __del__ = lambda self : None;
MoleculeDisplacement_swigregister = _pd.MoleculeDisplacement_swigregister
MoleculeDisplacement_swigregister(MoleculeDisplacement)

class TIP3P_Move(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TIP3P_Move, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TIP3P_Move, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_TIP3P_Move(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.TIP3P_Move_clone(*args)
    def apply(*args): return _pd.TIP3P_Move_apply(*args)
    __swig_setmethods__["RepeatMoveInterval"] = _pd.TIP3P_Move_RepeatMoveInterval_set
    __swig_getmethods__["RepeatMoveInterval"] = _pd.TIP3P_Move_RepeatMoveInterval_get
    if _newclass:RepeatMoveInterval = _swig_property(_pd.TIP3P_Move_RepeatMoveInterval_get, _pd.TIP3P_Move_RepeatMoveInterval_set)
    __swig_destroy__ = _pd.delete_TIP3P_Move
    __del__ = lambda self : None;
TIP3P_Move_swigregister = _pd.TIP3P_Move_swigregister
TIP3P_Move_swigregister(TIP3P_Move)

class NormalTorsionalMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, NormalTorsionalMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalTorsionalMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_NormalTorsionalMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.NormalTorsionalMove_clone(*args)
    def apply(*args): return _pd.NormalTorsionalMove_apply(*args)
    __swig_destroy__ = _pd.delete_NormalTorsionalMove
    __del__ = lambda self : None;
NormalTorsionalMove_swigregister = _pd.NormalTorsionalMove_swigregister
NormalTorsionalMove_swigregister(NormalTorsionalMove)

class SidechainTorsionalMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SidechainTorsionalMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SidechainTorsionalMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SidechainTorsionalMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.SidechainTorsionalMove_clone(*args)
    def apply(*args): return _pd.SidechainTorsionalMove_apply(*args)
    __swig_destroy__ = _pd.delete_SidechainTorsionalMove
    __del__ = lambda self : None;
SidechainTorsionalMove_swigregister = _pd.SidechainTorsionalMove_swigregister
SidechainTorsionalMove_swigregister(SidechainTorsionalMove)

class BackboneTorsionalMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackboneTorsionalMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneTorsionalMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BackboneTorsionalMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.BackboneTorsionalMove_clone(*args)
    def apply(*args): return _pd.BackboneTorsionalMove_apply(*args)
    __swig_destroy__ = _pd.delete_BackboneTorsionalMove
    __del__ = lambda self : None;
BackboneTorsionalMove_swigregister = _pd.BackboneTorsionalMove_swigregister
BackboneTorsionalMove_swigregister(BackboneTorsionalMove)

class BackbonePropagationMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackbonePropagationMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackbonePropagationMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BackbonePropagationMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.BackbonePropagationMove_clone(*args)
    def apply(*args): return _pd.BackbonePropagationMove_apply(*args)
    __swig_destroy__ = _pd.delete_BackbonePropagationMove
    __del__ = lambda self : None;
BackbonePropagationMove_swigregister = _pd.BackbonePropagationMove_swigregister
BackbonePropagationMove_swigregister(BackbonePropagationMove)

class PeptideGroupMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PeptideGroupMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeptideGroupMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PeptideGroupMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PeptideGroupMove_clone(*args)
    def apply(*args): return _pd.PeptideGroupMove_apply(*args)
    __swig_destroy__ = _pd.delete_PeptideGroupMove
    __del__ = lambda self : None;
PeptideGroupMove_swigregister = _pd.PeptideGroupMove_swigregister
PeptideGroupMove_swigregister(PeptideGroupMove)

class BackbonePhiPsiSetMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BackbonePhiPsiSetMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackbonePhiPsiSetMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BackbonePhiPsiSetMove(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BackbonePhiPsiSetMove
    __del__ = lambda self : None;
    def clone(*args): return _pd.BackbonePhiPsiSetMove_clone(*args)
    def apply(*args): return _pd.BackbonePhiPsiSetMove_apply(*args)
    def changeResidueRandomly(*args): return _pd.BackbonePhiPsiSetMove_changeResidueRandomly(*args)
    def changeConsResiduesRandomly(*args): return _pd.BackbonePhiPsiSetMove_changeConsResiduesRandomly(*args)
BackbonePhiPsiSetMove_swigregister = _pd.BackbonePhiPsiSetMove_swigregister
BackbonePhiPsiSetMove_swigregister(BackbonePhiPsiSetMove)

class BlockRotationMove(MoveBase):
    __swig_setmethods__ = {}
    for _s in [MoveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BlockRotationMove, name, value)
    __swig_getmethods__ = {}
    for _s in [MoveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockRotationMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BlockRotationMove(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BlockRotationMove
    __del__ = lambda self : None;
    def clone(*args): return _pd.BlockRotationMove_clone(*args)
    def apply(*args): return _pd.BlockRotationMove_apply(*args)
    def rotateBlock(*args): return _pd.BlockRotationMove_rotateBlock(*args)
BlockRotationMove_swigregister = _pd.BlockRotationMove_swigregister
BlockRotationMove_swigregister(BlockRotationMove)

class SidechainRotamerLibMove(RotamerApplicatorBase):
    __swig_setmethods__ = {}
    for _s in [RotamerApplicatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SidechainRotamerLibMove, name, value)
    __swig_getmethods__ = {}
    for _s in [RotamerApplicatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SidechainRotamerLibMove, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SidechainRotamerLibMove(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.SidechainRotamerLibMove_clone(*args)
    def apply(*args): return _pd.SidechainRotamerLibMove_apply(*args)
    __swig_setmethods__["pprop"] = _pd.SidechainRotamerLibMove_pprop_set
    __swig_getmethods__["pprop"] = _pd.SidechainRotamerLibMove_pprop_get
    if _newclass:pprop = _swig_property(_pd.SidechainRotamerLibMove_pprop_get, _pd.SidechainRotamerLibMove_pprop_set)
    def getRotSterics(*args): return _pd.SidechainRotamerLibMove_getRotSterics(*args)
    __swig_setmethods__["forcedchangecutoff"] = _pd.SidechainRotamerLibMove_forcedchangecutoff_set
    __swig_getmethods__["forcedchangecutoff"] = _pd.SidechainRotamerLibMove_forcedchangecutoff_get
    if _newclass:forcedchangecutoff = _swig_property(_pd.SidechainRotamerLibMove_forcedchangecutoff_get, _pd.SidechainRotamerLibMove_forcedchangecutoff_set)
    __swig_destroy__ = _pd.delete_SidechainRotamerLibMove
    __del__ = lambda self : None;
SidechainRotamerLibMove_swigregister = _pd.SidechainRotamerLibMove_swigregister
SidechainRotamerLibMove_swigregister(SidechainRotamerLibMove)

class SQWRL_Vertex(Vertex):
    __swig_setmethods__ = {}
    for _s in [Vertex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SQWRL_Vertex, name, value)
    __swig_getmethods__ = {}
    for _s in [Vertex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SQWRL_Vertex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SQWRL_Vertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["childIndeces"] = _pd.SQWRL_Vertex_childIndeces_set
    __swig_getmethods__["childIndeces"] = _pd.SQWRL_Vertex_childIndeces_get
    if _newclass:childIndeces = _swig_property(_pd.SQWRL_Vertex_childIndeces_get, _pd.SQWRL_Vertex_childIndeces_set)
    __swig_setmethods__["bestRotamers"] = _pd.SQWRL_Vertex_bestRotamers_set
    __swig_getmethods__["bestRotamers"] = _pd.SQWRL_Vertex_bestRotamers_get
    if _newclass:bestRotamers = _swig_property(_pd.SQWRL_Vertex_bestRotamers_get, _pd.SQWRL_Vertex_bestRotamers_set)
    __swig_setmethods__["superRotamerEnergies"] = _pd.SQWRL_Vertex_superRotamerEnergies_set
    __swig_getmethods__["superRotamerEnergies"] = _pd.SQWRL_Vertex_superRotamerEnergies_get
    if _newclass:superRotamerEnergies = _swig_property(_pd.SQWRL_Vertex_superRotamerEnergies_get, _pd.SQWRL_Vertex_superRotamerEnergies_set)
    __swig_setmethods__["rotLink"] = _pd.SQWRL_Vertex_rotLink_set
    __swig_getmethods__["rotLink"] = _pd.SQWRL_Vertex_rotLink_get
    if _newclass:rotLink = _swig_property(_pd.SQWRL_Vertex_rotLink_get, _pd.SQWRL_Vertex_rotLink_set)
    __swig_setmethods__["m_VertexContainer"] = _pd.SQWRL_Vertex_m_VertexContainer_set
    __swig_getmethods__["m_VertexContainer"] = _pd.SQWRL_Vertex_m_VertexContainer_get
    if _newclass:m_VertexContainer = _swig_property(_pd.SQWRL_Vertex_m_VertexContainer_get, _pd.SQWRL_Vertex_m_VertexContainer_set)
    def apply(*args): return _pd.SQWRL_Vertex_apply(*args)
    __swig_destroy__ = _pd.delete_SQWRL_Vertex
    __del__ = lambda self : None;
SQWRL_Vertex_swigregister = _pd.SQWRL_Vertex_swigregister
SQWRL_Vertex_swigregister(SQWRL_Vertex)

class SQWRL_SolveUnit(BiconnectedComponent):
    __swig_setmethods__ = {}
    for _s in [BiconnectedComponent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SQWRL_SolveUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [BiconnectedComponent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SQWRL_SolveUnit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SQWRL_SolveUnit(*args)
        try: self.this.append(this)
        except: self.this = this
    def minArticulationOrder(*args): return _pd.SQWRL_SolveUnit_minArticulationOrder(*args)
    def countArticulationPoints(*args): return _pd.SQWRL_SolveUnit_countArticulationPoints(*args)
    def firstArticulationPoint(*args): return _pd.SQWRL_SolveUnit_firstArticulationPoint(*args)
    __swig_setmethods__["m_Vertices"] = _pd.SQWRL_SolveUnit_m_Vertices_set
    __swig_getmethods__["m_Vertices"] = _pd.SQWRL_SolveUnit_m_Vertices_get
    if _newclass:m_Vertices = _swig_property(_pd.SQWRL_SolveUnit_m_Vertices_get, _pd.SQWRL_SolveUnit_m_Vertices_set)
    __swig_setmethods__["m_VertexContainer"] = _pd.SQWRL_SolveUnit_m_VertexContainer_set
    __swig_getmethods__["m_VertexContainer"] = _pd.SQWRL_SolveUnit_m_VertexContainer_get
    if _newclass:m_VertexContainer = _swig_property(_pd.SQWRL_SolveUnit_m_VertexContainer_get, _pd.SQWRL_SolveUnit_m_VertexContainer_set)
    __swig_setmethods__["used"] = _pd.SQWRL_SolveUnit_used_set
    __swig_getmethods__["used"] = _pd.SQWRL_SolveUnit_used_get
    if _newclass:used = _swig_property(_pd.SQWRL_SolveUnit_used_get, _pd.SQWRL_SolveUnit_used_set)
    __swig_destroy__ = _pd.delete_SQWRL_SolveUnit
    __del__ = lambda self : None;
SQWRL_SolveUnit_swigregister = _pd.SQWRL_SolveUnit_swigregister
SQWRL_SolveUnit_swigregister(SQWRL_SolveUnit)

class VertexLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VertexLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VertexLink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_VertexLink(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(*args): return _pd.VertexLink___lt__(*args)
    def nActiveRot(*args): return _pd.VertexLink_nActiveRot(*args)
    def serial(*args): return _pd.VertexLink_serial(*args)
    __swig_setmethods__["rotLink"] = _pd.VertexLink_rotLink_set
    __swig_getmethods__["rotLink"] = _pd.VertexLink_rotLink_get
    if _newclass:rotLink = _swig_property(_pd.VertexLink_rotLink_get, _pd.VertexLink_rotLink_set)
    __swig_setmethods__["parent"] = _pd.VertexLink_parent_set
    __swig_getmethods__["parent"] = _pd.VertexLink_parent_get
    if _newclass:parent = _swig_property(_pd.VertexLink_parent_get, _pd.VertexLink_parent_set)
    __swig_destroy__ = _pd.delete_VertexLink
    __del__ = lambda self : None;
VertexLink_swigregister = _pd.VertexLink_swigregister
VertexLink_swigregister(VertexLink)

class RotamerApplicator_SCWRL(RotamerApplicatorBase):
    __swig_setmethods__ = {}
    for _s in [RotamerApplicatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotamerApplicator_SCWRL, name, value)
    __swig_getmethods__ = {}
    for _s in [RotamerApplicatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotamerApplicator_SCWRL, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotamerApplicator_SCWRL(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_RotamerApplicator_SCWRL
    __del__ = lambda self : None;
    def clone(*args): return _pd.RotamerApplicator_SCWRL_clone(*args)
    def apply(*args): return _pd.RotamerApplicator_SCWRL_apply(*args)
    __swig_setmethods__["SupressStaticGridRefreshOnApply"] = _pd.RotamerApplicator_SCWRL_SupressStaticGridRefreshOnApply_set
    __swig_getmethods__["SupressStaticGridRefreshOnApply"] = _pd.RotamerApplicator_SCWRL_SupressStaticGridRefreshOnApply_get
    if _newclass:SupressStaticGridRefreshOnApply = _swig_property(_pd.RotamerApplicator_SCWRL_SupressStaticGridRefreshOnApply_get, _pd.RotamerApplicator_SCWRL_SupressStaticGridRefreshOnApply_set)
    __swig_setmethods__["IgnoreHydrogenForSterics"] = _pd.RotamerApplicator_SCWRL_IgnoreHydrogenForSterics_set
    __swig_getmethods__["IgnoreHydrogenForSterics"] = _pd.RotamerApplicator_SCWRL_IgnoreHydrogenForSterics_get
    if _newclass:IgnoreHydrogenForSterics = _swig_property(_pd.RotamerApplicator_SCWRL_IgnoreHydrogenForSterics_get, _pd.RotamerApplicator_SCWRL_IgnoreHydrogenForSterics_set)
    __swig_setmethods__["EBBMAX"] = _pd.RotamerApplicator_SCWRL_EBBMAX_set
    __swig_getmethods__["EBBMAX"] = _pd.RotamerApplicator_SCWRL_EBBMAX_get
    if _newclass:EBBMAX = _swig_property(_pd.RotamerApplicator_SCWRL_EBBMAX_get, _pd.RotamerApplicator_SCWRL_EBBMAX_set)
    __swig_setmethods__["PROB_CAP"] = _pd.RotamerApplicator_SCWRL_PROB_CAP_set
    __swig_getmethods__["PROB_CAP"] = _pd.RotamerApplicator_SCWRL_PROB_CAP_get
    if _newclass:PROB_CAP = _swig_property(_pd.RotamerApplicator_SCWRL_PROB_CAP_get, _pd.RotamerApplicator_SCWRL_PROB_CAP_set)
RotamerApplicator_SCWRL_swigregister = _pd.RotamerApplicator_SCWRL_swigregister
RotamerApplicator_SCWRL_swigregister(RotamerApplicator_SCWRL)

class BondFilter(FilterBase):
    __swig_setmethods__ = {}
    for _s in [FilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, BondFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BondFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_BondFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_BondFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.BondFilter_clone(*args)
    def setWSpace(*args): return _pd.BondFilter_setWSpace(*args)
    def setPicker(*args): return _pd.BondFilter_setPicker(*args)
    def setDefaultPicker(*args): return _pd.BondFilter_setDefaultPicker(*args)
    def setTollerance(*args): return _pd.BondFilter_setTollerance(*args)
    def setDefaultTollerance(*args): return _pd.BondFilter_setDefaultTollerance(*args)
    def passes(*args): return _pd.BondFilter_passes(*args)
    def reason(*args): return _pd.BondFilter_reason(*args)
BondFilter_swigregister = _pd.BondFilter_swigregister
BondFilter_swigregister(BondFilter)

class SingleBondFilter(MolFilterBase):
    __swig_setmethods__ = {}
    for _s in [MolFilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SingleBondFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [MolFilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SingleBondFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_SingleBondFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_SingleBondFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.SingleBondFilter_clone(*args)
    def setBond(*args): return _pd.SingleBondFilter_setBond(*args)
    def setTollerance(*args): return _pd.SingleBondFilter_setTollerance(*args)
    def passes(*args): return _pd.SingleBondFilter_passes(*args)
    def reason(*args): return _pd.SingleBondFilter_reason(*args)
SingleBondFilter_swigregister = _pd.SingleBondFilter_swigregister
SingleBondFilter_swigregister(SingleBondFilter)

class AtomicSeparationFilter(MolFilterBase):
    __swig_setmethods__ = {}
    for _s in [MolFilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AtomicSeparationFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [MolFilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomicSeparationFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_AtomicSeparationFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_AtomicSeparationFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.AtomicSeparationFilter_clone(*args)
    def setBond(*args): return _pd.AtomicSeparationFilter_setBond(*args)
    def setTollerance(*args): return _pd.AtomicSeparationFilter_setTollerance(*args)
    def passes(*args): return _pd.AtomicSeparationFilter_passes(*args)
    def reason(*args): return _pd.AtomicSeparationFilter_reason(*args)
AtomicSeparationFilter_swigregister = _pd.AtomicSeparationFilter_swigregister
AtomicSeparationFilter_swigregister(AtomicSeparationFilter)

class OmegaGroupFilter(FilterBase):
    __swig_setmethods__ = {}
    for _s in [FilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OmegaGroupFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OmegaGroupFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_OmegaGroupFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_OmegaGroupFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.OmegaGroupFilter_clone(*args)
    def setTo(*args): return _pd.OmegaGroupFilter_setTo(*args)
    def passes(*args): return _pd.OmegaGroupFilter_passes(*args)
    def reason(*args): return _pd.OmegaGroupFilter_reason(*args)
    __swig_setmethods__["AssessPrimaryDistance"] = _pd.OmegaGroupFilter_AssessPrimaryDistance_set
    __swig_getmethods__["AssessPrimaryDistance"] = _pd.OmegaGroupFilter_AssessPrimaryDistance_get
    if _newclass:AssessPrimaryDistance = _swig_property(_pd.OmegaGroupFilter_AssessPrimaryDistance_get, _pd.OmegaGroupFilter_AssessPrimaryDistance_set)
    __swig_setmethods__["AssessSecondaryDistances"] = _pd.OmegaGroupFilter_AssessSecondaryDistances_set
    __swig_getmethods__["AssessSecondaryDistances"] = _pd.OmegaGroupFilter_AssessSecondaryDistances_get
    if _newclass:AssessSecondaryDistances = _swig_property(_pd.OmegaGroupFilter_AssessSecondaryDistances_get, _pd.OmegaGroupFilter_AssessSecondaryDistances_set)
    __swig_setmethods__["AssessTorsion"] = _pd.OmegaGroupFilter_AssessTorsion_set
    __swig_getmethods__["AssessTorsion"] = _pd.OmegaGroupFilter_AssessTorsion_get
    if _newclass:AssessTorsion = _swig_property(_pd.OmegaGroupFilter_AssessTorsion_get, _pd.OmegaGroupFilter_AssessTorsion_set)
OmegaGroupFilter_swigregister = _pd.OmegaGroupFilter_swigregister
OmegaGroupFilter_swigregister(OmegaGroupFilter)
OmegaGroupFilter.peptideDist_CN = _pd.cvar.OmegaGroupFilter_peptideDist_CN
OmegaGroupFilter.peptideDist_ON = _pd.cvar.OmegaGroupFilter_peptideDist_ON
OmegaGroupFilter.peptideDist_CCa = _pd.cvar.OmegaGroupFilter_peptideDist_CCa
OmegaGroupFilter.peptideDist_CaN = _pd.cvar.OmegaGroupFilter_peptideDist_CaN
OmegaGroupFilter.peptideDist_CaCa = _pd.cvar.OmegaGroupFilter_peptideDist_CaCa
OmegaGroupFilter.peptideDist_OH = _pd.cvar.OmegaGroupFilter_peptideDist_OH
OmegaGroupFilter.peptideDist_CaH = _pd.cvar.OmegaGroupFilter_peptideDist_CaH
OmegaGroupFilter.peptideDist_CH = _pd.cvar.OmegaGroupFilter_peptideDist_CH

class AngleSetFilter(FilterBase):
    __swig_setmethods__ = {}
    for _s in [FilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AngleSetFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AngleSetFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_AngleSetFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_AngleSetFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.AngleSetFilter_clone(*args)
    def setTo(*args): return _pd.AngleSetFilter_setTo(*args)
    def passes(*args): return _pd.AngleSetFilter_passes(*args)
    def reason(*args): return _pd.AngleSetFilter_reason(*args)
AngleSetFilter_swigregister = _pd.AngleSetFilter_swigregister
AngleSetFilter_swigregister(AngleSetFilter)

class ClashFilterBase(FilterBase):
    __swig_setmethods__ = {}
    for _s in [FilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ClashFilterBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClashFilterBase, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_ClashFilterBase
    __del__ = lambda self : None;
    def setOLapFac(*args): return _pd.ClashFilterBase_setOLapFac(*args)
    def setMolecule(*args): return _pd.ClashFilterBase_setMolecule(*args)
    def setDefaultPickers(*args): return _pd.ClashFilterBase_setDefaultPickers(*args)
    def setForPicker(*args): return _pd.ClashFilterBase_setForPicker(*args)
    def setAgainstPicker(*args): return _pd.ClashFilterBase_setAgainstPicker(*args)
    def passes(*args): return _pd.ClashFilterBase_passes(*args)
    def reason(*args): return _pd.ClashFilterBase_reason(*args)
ClashFilterBase_swigregister = _pd.ClashFilterBase_swigregister
ClashFilterBase_swigregister(ClashFilterBase)

class ClashFilter(ClashFilterBase):
    __swig_setmethods__ = {}
    for _s in [ClashFilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ClashFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ClashFilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClashFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ClashFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ClashFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.ClashFilter_clone(*args)
    def passes(*args): return _pd.ClashFilter_passes(*args)
    def reason(*args): return _pd.ClashFilter_reason(*args)
ClashFilter_swigregister = _pd.ClashFilter_swigregister
ClashFilter_swigregister(ClashFilter)

class ClashGridFilter(ClashFilterBase):
    __swig_setmethods__ = {}
    for _s in [ClashFilterBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ClashGridFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ClashFilterBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClashGridFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ClashGridFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_ClashGridFilter
    __del__ = lambda self : None;
    def clone(*args): return _pd.ClashGridFilter_clone(*args)
    def passes(*args): return _pd.ClashGridFilter_passes(*args)
    def reason(*args): return _pd.ClashGridFilter_reason(*args)
    __swig_setmethods__["GridCutoff"] = _pd.ClashGridFilter_GridCutoff_set
    __swig_getmethods__["GridCutoff"] = _pd.ClashGridFilter_GridCutoff_get
    if _newclass:GridCutoff = _swig_property(_pd.ClashGridFilter_GridCutoff_get, _pd.ClashGridFilter_GridCutoff_set)
ClashGridFilter_swigregister = _pd.ClashGridFilter_swigregister
ClashGridFilter_swigregister(ClashGridFilter)

class Energy(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Energy, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Energy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Energy(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Energy_clone(*args)
    __swig_destroy__ = _pd.delete_Energy
    __del__ = lambda self : None;
    def runcore(*args): return _pd.Energy_runcore(*args)
Energy_swigregister = _pd.Energy_swigregister
Energy_swigregister(Energy)

class Minimisation(PickedProtocolBase):
    __swig_setmethods__ = {}
    for _s in [PickedProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Minimisation, name, value)
    __swig_getmethods__ = {}
    for _s in [PickedProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Minimisation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Minimisation(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.Minimisation_clone(*args)
    def runcore(*args): return _pd.Minimisation_runcore(*args)
    def infoLineHeader(*args): return _pd.Minimisation_infoLineHeader(*args)
    SteepestDescent = _pd.Minimisation_SteepestDescent
    ConjugateGradients = _pd.Minimisation_ConjugateGradients
    __swig_setmethods__["Algorithm"] = _pd.Minimisation_Algorithm_set
    __swig_getmethods__["Algorithm"] = _pd.Minimisation_Algorithm_get
    if _newclass:Algorithm = _swig_property(_pd.Minimisation_Algorithm_get, _pd.Minimisation_Algorithm_set)
    __swig_setmethods__["StepSize"] = _pd.Minimisation_StepSize_set
    __swig_getmethods__["StepSize"] = _pd.Minimisation_StepSize_get
    if _newclass:StepSize = _swig_property(_pd.Minimisation_StepSize_get, _pd.Minimisation_StepSize_set)
    __swig_setmethods__["SlopeCutoff"] = _pd.Minimisation_SlopeCutoff_set
    __swig_getmethods__["SlopeCutoff"] = _pd.Minimisation_SlopeCutoff_get
    if _newclass:SlopeCutoff = _swig_property(_pd.Minimisation_SlopeCutoff_get, _pd.Minimisation_SlopeCutoff_set)
    __swig_setmethods__["Strictness"] = _pd.Minimisation_Strictness_set
    __swig_getmethods__["Strictness"] = _pd.Minimisation_Strictness_get
    if _newclass:Strictness = _swig_property(_pd.Minimisation_Strictness_get, _pd.Minimisation_Strictness_set)
    __swig_setmethods__["Step"] = _pd.Minimisation_Step_set
    __swig_getmethods__["Step"] = _pd.Minimisation_Step_get
    if _newclass:Step = _swig_property(_pd.Minimisation_Step_get, _pd.Minimisation_Step_set)
    __swig_destroy__ = _pd.delete_Minimisation
    __del__ = lambda self : None;
Minimisation_swigregister = _pd.Minimisation_swigregister
Minimisation_swigregister(Minimisation)

class MolecularDynamics(RangedProtocolBase):
    __swig_setmethods__ = {}
    for _s in [RangedProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MolecularDynamics, name, value)
    __swig_getmethods__ = {}
    for _s in [RangedProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MolecularDynamics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MolecularDynamics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_MolecularDynamics
    __del__ = lambda self : None;
    def clone(*args): return _pd.MolecularDynamics_clone(*args)
    def info(*args): return _pd.MolecularDynamics_info(*args)
    def runcore(*args): return _pd.MolecularDynamics_runcore(*args)
    NoThermostat = _pd.MolecularDynamics_NoThermostat
    Andersen = _pd.MolecularDynamics_Andersen
    Berendsen = _pd.MolecularDynamics_Berendsen
    NoBarostat = _pd.MolecularDynamics_NoBarostat
    BerendsenBaro = _pd.MolecularDynamics_BerendsenBaro
    Verlet = _pd.MolecularDynamics_Verlet
    VelocityVerlet = _pd.MolecularDynamics_VelocityVerlet
    Beeman = _pd.MolecularDynamics_Beeman
    Langevin = _pd.MolecularDynamics_Langevin
    __swig_setmethods__["Integrator"] = _pd.MolecularDynamics_Integrator_set
    __swig_getmethods__["Integrator"] = _pd.MolecularDynamics_Integrator_get
    if _newclass:Integrator = _swig_property(_pd.MolecularDynamics_Integrator_get, _pd.MolecularDynamics_Integrator_set)
    __swig_setmethods__["Timestep"] = _pd.MolecularDynamics_Timestep_set
    __swig_getmethods__["Timestep"] = _pd.MolecularDynamics_Timestep_get
    if _newclass:Timestep = _swig_property(_pd.MolecularDynamics_Timestep_get, _pd.MolecularDynamics_Timestep_set)
    __swig_setmethods__["RandVel"] = _pd.MolecularDynamics_RandVel_set
    __swig_getmethods__["RandVel"] = _pd.MolecularDynamics_RandVel_get
    if _newclass:RandVel = _swig_property(_pd.MolecularDynamics_RandVel_get, _pd.MolecularDynamics_RandVel_set)
    __swig_setmethods__["UpdateRemoveTotalMomentum"] = _pd.MolecularDynamics_UpdateRemoveTotalMomentum_set
    __swig_getmethods__["UpdateRemoveTotalMomentum"] = _pd.MolecularDynamics_UpdateRemoveTotalMomentum_get
    if _newclass:UpdateRemoveTotalMomentum = _swig_property(_pd.MolecularDynamics_UpdateRemoveTotalMomentum_get, _pd.MolecularDynamics_UpdateRemoveTotalMomentum_set)
    __swig_setmethods__["Thermostat"] = _pd.MolecularDynamics_Thermostat_set
    __swig_getmethods__["Thermostat"] = _pd.MolecularDynamics_Thermostat_get
    if _newclass:Thermostat = _swig_property(_pd.MolecularDynamics_Thermostat_get, _pd.MolecularDynamics_Thermostat_set)
    __swig_setmethods__["TargetPressure"] = _pd.MolecularDynamics_TargetPressure_set
    __swig_getmethods__["TargetPressure"] = _pd.MolecularDynamics_TargetPressure_get
    if _newclass:TargetPressure = _swig_property(_pd.MolecularDynamics_TargetPressure_get, _pd.MolecularDynamics_TargetPressure_set)
    __swig_setmethods__["Barostat"] = _pd.MolecularDynamics_Barostat_set
    __swig_getmethods__["Barostat"] = _pd.MolecularDynamics_Barostat_get
    if _newclass:Barostat = _swig_property(_pd.MolecularDynamics_Barostat_get, _pd.MolecularDynamics_Barostat_set)
    __swig_setmethods__["Compress"] = _pd.MolecularDynamics_Compress_set
    __swig_getmethods__["Compress"] = _pd.MolecularDynamics_Compress_get
    if _newclass:Compress = _swig_property(_pd.MolecularDynamics_Compress_get, _pd.MolecularDynamics_Compress_set)
    __swig_setmethods__["BerendsenTau"] = _pd.MolecularDynamics_BerendsenTau_set
    __swig_getmethods__["BerendsenTau"] = _pd.MolecularDynamics_BerendsenTau_get
    if _newclass:BerendsenTau = _swig_property(_pd.MolecularDynamics_BerendsenTau_get, _pd.MolecularDynamics_BerendsenTau_set)
    __swig_setmethods__["BerendsenPressureTau"] = _pd.MolecularDynamics_BerendsenPressureTau_set
    __swig_getmethods__["BerendsenPressureTau"] = _pd.MolecularDynamics_BerendsenPressureTau_get
    if _newclass:BerendsenPressureTau = _swig_property(_pd.MolecularDynamics_BerendsenPressureTau_get, _pd.MolecularDynamics_BerendsenPressureTau_set)
    __swig_setmethods__["AndersenRate"] = _pd.MolecularDynamics_AndersenRate_set
    __swig_getmethods__["AndersenRate"] = _pd.MolecularDynamics_AndersenRate_get
    if _newclass:AndersenRate = _swig_property(_pd.MolecularDynamics_AndersenRate_get, _pd.MolecularDynamics_AndersenRate_set)
    __swig_setmethods__["FricCoeff"] = _pd.MolecularDynamics_FricCoeff_set
    __swig_getmethods__["FricCoeff"] = _pd.MolecularDynamics_FricCoeff_get
    if _newclass:FricCoeff = _swig_property(_pd.MolecularDynamics_FricCoeff_get, _pd.MolecularDynamics_FricCoeff_set)
    __swig_setmethods__["LangevinOnHydrogens"] = _pd.MolecularDynamics_LangevinOnHydrogens_set
    __swig_getmethods__["LangevinOnHydrogens"] = _pd.MolecularDynamics_LangevinOnHydrogens_get
    if _newclass:LangevinOnHydrogens = _swig_property(_pd.MolecularDynamics_LangevinOnHydrogens_get, _pd.MolecularDynamics_LangevinOnHydrogens_set)
    __swig_setmethods__["CentreAfterMove"] = _pd.MolecularDynamics_CentreAfterMove_set
    __swig_getmethods__["CentreAfterMove"] = _pd.MolecularDynamics_CentreAfterMove_get
    if _newclass:CentreAfterMove = _swig_property(_pd.MolecularDynamics_CentreAfterMove_get, _pd.MolecularDynamics_CentreAfterMove_set)
MolecularDynamics_swigregister = _pd.MolecularDynamics_swigregister
MolecularDynamics_swigregister(MolecularDynamics)

class Rerun(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Rerun, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rerun, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Rerun(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Rerun
    __del__ = lambda self : None;
    def clone(*args): return _pd.Rerun_clone(*args)
    def info(*args): return _pd.Rerun_info(*args)
    def runcore(*args): return _pd.Rerun_runcore(*args)
Rerun_swigregister = _pd.Rerun_swigregister
Rerun_swigregister(Rerun)

class REX_Replica(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, REX_Replica, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, REX_Replica, name)
    __repr__ = _swig_repr
    Swap = _pd.REX_Replica_Swap
    Downward = _pd.REX_Replica_Downward
    Upward = _pd.REX_Replica_Upward
    def __init__(self, *args): 
        this = _pd.new_REX_Replica(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTargetTemp(*args): return _pd.REX_Replica_setTargetTemp(*args)
    def protocol(*args): return _pd.REX_Replica_protocol(*args)
    def getTargetTemp(*args): return _pd.REX_Replica_getTargetTemp(*args)
    def setInitialSpeeds(*args): return _pd.REX_Replica_setInitialSpeeds(*args)
    def info(*args): return _pd.REX_Replica_info(*args)
    __swig_setmethods__["ExchangeMode"] = _pd.REX_Replica_ExchangeMode_set
    __swig_getmethods__["ExchangeMode"] = _pd.REX_Replica_ExchangeMode_get
    if _newclass:ExchangeMode = _swig_property(_pd.REX_Replica_ExchangeMode_get, _pd.REX_Replica_ExchangeMode_set)
    __swig_destroy__ = _pd.delete_REX_Replica
    __del__ = lambda self : None;
REX_Replica_swigregister = _pd.REX_Replica_swigregister
REX_Replica_swigregister(REX_Replica)

class REX_Local(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, REX_Local, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, REX_Local, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_REX_Local(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_REX_Local
    __del__ = lambda self : None;
    def clone(*args): return _pd.REX_Local_clone(*args)
    def runcore(*args): return _pd.REX_Local_runcore(*args)
    def info(*args): return _pd.REX_Local_info(*args)
    def detail(*args): return _pd.REX_Local_detail(*args)
    def getReplicas(*args): return _pd.REX_Local_getReplicas(*args)
    def setAllReplicasTo(*args): return _pd.REX_Local_setAllReplicasTo(*args)
    def setReplicas(*args): return _pd.REX_Local_setReplicas(*args)
    def addReplica(*args): return _pd.REX_Local_addReplica(*args)
    def addReplicas(*args): return _pd.REX_Local_addReplicas(*args)
    def clearReplicas(*args): return _pd.REX_Local_clearReplicas(*args)
    def printCheckPointMIME(*args): return _pd.REX_Local_printCheckPointMIME(*args)
    def readCheckPointMIME(*args): return _pd.REX_Local_readCheckPointMIME(*args)
    __swig_setmethods__["FocusRep"] = _pd.REX_Local_FocusRep_set
    __swig_getmethods__["FocusRep"] = _pd.REX_Local_FocusRep_get
    if _newclass:FocusRep = _swig_property(_pd.REX_Local_FocusRep_get, _pd.REX_Local_FocusRep_set)
REX_Local_swigregister = _pd.REX_Local_swigregister
REX_Local_swigregister(REX_Local)

class RotationDefinition_TM(RotationDefinition):
    __swig_setmethods__ = {}
    for _s in [RotationDefinition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RotationDefinition_TM, name, value)
    __swig_getmethods__ = {}
    for _s in [RotationDefinition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotationDefinition_TM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RotationDefinition_TM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["Value"] = _pd.RotationDefinition_TM_Value_set
    __swig_getmethods__["Value"] = _pd.RotationDefinition_TM_Value_get
    if _newclass:Value = _swig_property(_pd.RotationDefinition_TM_Value_get, _pd.RotationDefinition_TM_Value_set)
    __swig_setmethods__["PrevValue"] = _pd.RotationDefinition_TM_PrevValue_set
    __swig_getmethods__["PrevValue"] = _pd.RotationDefinition_TM_PrevValue_get
    if _newclass:PrevValue = _swig_property(_pd.RotationDefinition_TM_PrevValue_get, _pd.RotationDefinition_TM_PrevValue_set)
    __swig_setmethods__["A"] = _pd.RotationDefinition_TM_A_set
    __swig_getmethods__["A"] = _pd.RotationDefinition_TM_A_get
    if _newclass:A = _swig_property(_pd.RotationDefinition_TM_A_get, _pd.RotationDefinition_TM_A_set)
    __swig_setmethods__["B"] = _pd.RotationDefinition_TM_B_set
    __swig_getmethods__["B"] = _pd.RotationDefinition_TM_B_get
    if _newclass:B = _swig_property(_pd.RotationDefinition_TM_B_get, _pd.RotationDefinition_TM_B_set)
    __swig_setmethods__["ReciprocalLen"] = _pd.RotationDefinition_TM_ReciprocalLen_set
    __swig_getmethods__["ReciprocalLen"] = _pd.RotationDefinition_TM_ReciprocalLen_get
    if _newclass:ReciprocalLen = _swig_property(_pd.RotationDefinition_TM_ReciprocalLen_get, _pd.RotationDefinition_TM_ReciprocalLen_set)
    __swig_setmethods__["rangeLink"] = _pd.RotationDefinition_TM_rangeLink_set
    __swig_getmethods__["rangeLink"] = _pd.RotationDefinition_TM_rangeLink_get
    if _newclass:rangeLink = _swig_property(_pd.RotationDefinition_TM_rangeLink_get, _pd.RotationDefinition_TM_rangeLink_set)
    def rotateByValue(*args): return _pd.RotationDefinition_TM_rotateByValue(*args)
    __swig_destroy__ = _pd.delete_RotationDefinition_TM
    __del__ = lambda self : None;
RotationDefinition_TM_swigregister = _pd.RotationDefinition_TM_swigregister
RotationDefinition_TM_swigregister(RotationDefinition_TM)

class TorsionalMinimisation(RangesProtocolBase):
    __swig_setmethods__ = {}
    for _s in [RangesProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TorsionalMinimisation, name, value)
    __swig_getmethods__ = {}
    for _s in [RangesProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TorsionalMinimisation, name)
    __repr__ = _swig_repr
    NothingAtAll = _pd.TorsionalMinimisation_NothingAtAll
    ImproperSingles = _pd.TorsionalMinimisation_ImproperSingles
    Omega = _pd.TorsionalMinimisation_Omega
    AllValid = _pd.TorsionalMinimisation_AllValid
    Default = _pd.TorsionalMinimisation_Default
    def __init__(self, *args): 
        this = _pd.new_TorsionalMinimisation(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.TorsionalMinimisation_clone(*args)
    def settodefault(*args): return _pd.TorsionalMinimisation_settodefault(*args)
    def runcore(*args): return _pd.TorsionalMinimisation_runcore(*args)
    def info(*args): return _pd.TorsionalMinimisation_info(*args)
    def infoLine(*args): return _pd.TorsionalMinimisation_infoLine(*args)
    def infoLineHeader(*args): return _pd.TorsionalMinimisation_infoLineHeader(*args)
    def getStepNumber(*args): return _pd.TorsionalMinimisation_getStepNumber(*args)
    __swig_setmethods__["SlopeCutoff"] = _pd.TorsionalMinimisation_SlopeCutoff_set
    __swig_getmethods__["SlopeCutoff"] = _pd.TorsionalMinimisation_SlopeCutoff_get
    if _newclass:SlopeCutoff = _swig_property(_pd.TorsionalMinimisation_SlopeCutoff_get, _pd.TorsionalMinimisation_SlopeCutoff_set)
    __swig_setmethods__["InitialCapFactor"] = _pd.TorsionalMinimisation_InitialCapFactor_set
    __swig_getmethods__["InitialCapFactor"] = _pd.TorsionalMinimisation_InitialCapFactor_get
    if _newclass:InitialCapFactor = _swig_property(_pd.TorsionalMinimisation_InitialCapFactor_get, _pd.TorsionalMinimisation_InitialCapFactor_set)
    __swig_destroy__ = _pd.delete_TorsionalMinimisation
    __del__ = lambda self : None;
TorsionalMinimisation_swigregister = _pd.TorsionalMinimisation_swigregister
TorsionalMinimisation_swigregister(TorsionalMinimisation)

class MonteCarlo(ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, MonteCarlo, name, value)
    __swig_getmethods__ = {}
    for _s in [ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MonteCarlo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_MonteCarlo(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.MonteCarlo_clone(*args)
    def runcore(*args): return _pd.MonteCarlo_runcore(*args)
    def info(*args): return _pd.MonteCarlo_info(*args)
    __swig_setmethods__["PreFilters"] = _pd.MonteCarlo_PreFilters_set
    __swig_getmethods__["PreFilters"] = _pd.MonteCarlo_PreFilters_get
    if _newclass:PreFilters = _swig_property(_pd.MonteCarlo_PreFilters_get, _pd.MonteCarlo_PreFilters_set)
    __swig_setmethods__["PostFilters"] = _pd.MonteCarlo_PostFilters_set
    __swig_getmethods__["PostFilters"] = _pd.MonteCarlo_PostFilters_get
    if _newclass:PostFilters = _swig_property(_pd.MonteCarlo_PostFilters_get, _pd.MonteCarlo_PostFilters_set)
    def addPreFilter(*args): return _pd.MonteCarlo_addPreFilter(*args)
    def addPostFilter(*args): return _pd.MonteCarlo_addPostFilter(*args)
    def setTemperature(*args): return _pd.MonteCarlo_setTemperature(*args)
    __swig_setmethods__["UpdateScrAcc"] = _pd.MonteCarlo_UpdateScrAcc_set
    __swig_getmethods__["UpdateScrAcc"] = _pd.MonteCarlo_UpdateScrAcc_get
    if _newclass:UpdateScrAcc = _swig_property(_pd.MonteCarlo_UpdateScrAcc_get, _pd.MonteCarlo_UpdateScrAcc_set)
    __swig_setmethods__["UpdateScrRej"] = _pd.MonteCarlo_UpdateScrRej_set
    __swig_getmethods__["UpdateScrRej"] = _pd.MonteCarlo_UpdateScrRej_get
    if _newclass:UpdateScrRej = _swig_property(_pd.MonteCarlo_UpdateScrRej_get, _pd.MonteCarlo_UpdateScrRej_set)
    __swig_setmethods__["UpdateTraAcc"] = _pd.MonteCarlo_UpdateTraAcc_set
    __swig_getmethods__["UpdateTraAcc"] = _pd.MonteCarlo_UpdateTraAcc_get
    if _newclass:UpdateTraAcc = _swig_property(_pd.MonteCarlo_UpdateTraAcc_get, _pd.MonteCarlo_UpdateTraAcc_set)
    __swig_setmethods__["UpdateTraRej"] = _pd.MonteCarlo_UpdateTraRej_set
    __swig_getmethods__["UpdateTraRej"] = _pd.MonteCarlo_UpdateTraRej_get
    if _newclass:UpdateTraRej = _swig_property(_pd.MonteCarlo_UpdateTraRej_get, _pd.MonteCarlo_UpdateTraRej_set)
    __swig_setmethods__["DoZeroGeometry"] = _pd.MonteCarlo_DoZeroGeometry_set
    __swig_getmethods__["DoZeroGeometry"] = _pd.MonteCarlo_DoZeroGeometry_get
    if _newclass:DoZeroGeometry = _swig_property(_pd.MonteCarlo_DoZeroGeometry_get, _pd.MonteCarlo_DoZeroGeometry_set)
    __swig_setmethods__["ReportFilterFailReasons"] = _pd.MonteCarlo_ReportFilterFailReasons_set
    __swig_getmethods__["ReportFilterFailReasons"] = _pd.MonteCarlo_ReportFilterFailReasons_get
    if _newclass:ReportFilterFailReasons = _swig_property(_pd.MonteCarlo_ReportFilterFailReasons_get, _pd.MonteCarlo_ReportFilterFailReasons_set)
    Last = _pd.MonteCarlo_Last
    LastAcc = _pd.MonteCarlo_LastAcc
    LowestEpot = _pd.MonteCarlo_LowestEpot
    __swig_setmethods__["FinalState"] = _pd.MonteCarlo_FinalState_set
    __swig_getmethods__["FinalState"] = _pd.MonteCarlo_FinalState_get
    if _newclass:FinalState = _swig_property(_pd.MonteCarlo_FinalState_get, _pd.MonteCarlo_FinalState_set)
    def reset(*args): return _pd.MonteCarlo_reset(*args)
    __swig_destroy__ = _pd.delete_MonteCarlo
    __del__ = lambda self : None;
MonteCarlo_swigregister = _pd.MonteCarlo_swigregister
MonteCarlo_swigregister(MonteCarlo)

class DualFFMinimiser(Minimisation):
    __swig_setmethods__ = {}
    for _s in [Minimisation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DualFFMinimiser, name, value)
    __swig_getmethods__ = {}
    for _s in [Minimisation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DualFFMinimiser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_DualFFMinimiser(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.DualFFMinimiser_clone(*args)
    def runcore(*args): return _pd.DualFFMinimiser_runcore(*args)
    __swig_setmethods__["SDPreMinSteps"] = _pd.DualFFMinimiser_SDPreMinSteps_set
    __swig_getmethods__["SDPreMinSteps"] = _pd.DualFFMinimiser_SDPreMinSteps_get
    if _newclass:SDPreMinSteps = _swig_property(_pd.DualFFMinimiser_SDPreMinSteps_get, _pd.DualFFMinimiser_SDPreMinSteps_set)
    __swig_setmethods__["StericMinSteps"] = _pd.DualFFMinimiser_StericMinSteps_set
    __swig_getmethods__["StericMinSteps"] = _pd.DualFFMinimiser_StericMinSteps_get
    if _newclass:StericMinSteps = _swig_property(_pd.DualFFMinimiser_StericMinSteps_get, _pd.DualFFMinimiser_StericMinSteps_set)
    __swig_setmethods__["StericKillFull"] = _pd.DualFFMinimiser_StericKillFull_set
    __swig_getmethods__["StericKillFull"] = _pd.DualFFMinimiser_StericKillFull_get
    if _newclass:StericKillFull = _swig_property(_pd.DualFFMinimiser_StericKillFull_get, _pd.DualFFMinimiser_StericKillFull_set)
    __swig_setmethods__["StericStepSize"] = _pd.DualFFMinimiser_StericStepSize_set
    __swig_getmethods__["StericStepSize"] = _pd.DualFFMinimiser_StericStepSize_get
    if _newclass:StericStepSize = _swig_property(_pd.DualFFMinimiser_StericStepSize_get, _pd.DualFFMinimiser_StericStepSize_set)
    __swig_setmethods__["StericSlopeCutoff"] = _pd.DualFFMinimiser_StericSlopeCutoff_set
    __swig_getmethods__["StericSlopeCutoff"] = _pd.DualFFMinimiser_StericSlopeCutoff_get
    if _newclass:StericSlopeCutoff = _swig_property(_pd.DualFFMinimiser_StericSlopeCutoff_get, _pd.DualFFMinimiser_StericSlopeCutoff_set)
    __swig_destroy__ = _pd.delete_DualFFMinimiser
    __del__ = lambda self : None;
DualFFMinimiser_swigregister = _pd.DualFFMinimiser_swigregister
DualFFMinimiser_swigregister(DualFFMinimiser)
MCPackSideChains = _pd.MCPackSideChains

class PotentialEnergyMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, PotentialEnergyMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PotentialEnergyMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_PotentialEnergyMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.PotentialEnergyMonitor_clone(*args)
    __swig_destroy__ = _pd.delete_PotentialEnergyMonitor
    __del__ = lambda self : None;
PotentialEnergyMonitor_swigregister = _pd.PotentialEnergyMonitor_swigregister
PotentialEnergyMonitor_swigregister(PotentialEnergyMonitor)

class VolumeMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VolumeMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VolumeMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_VolumeMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.VolumeMonitor_clone(*args)
    __swig_destroy__ = _pd.delete_VolumeMonitor
    __del__ = lambda self : None;
VolumeMonitor_swigregister = _pd.VolumeMonitor_swigregister
VolumeMonitor_swigregister(VolumeMonitor)

class ForcefieldEnergyMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ForcefieldEnergyMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForcefieldEnergyMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_ForcefieldEnergyMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.ForcefieldEnergyMonitor_clone(*args)
    __swig_destroy__ = _pd.delete_ForcefieldEnergyMonitor
    __del__ = lambda self : None;
ForcefieldEnergyMonitor_swigregister = _pd.ForcefieldEnergyMonitor_swigregister
ForcefieldEnergyMonitor_swigregister(ForcefieldEnergyMonitor)

class RestraintMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, RestraintMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RestraintMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_RestraintMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.RestraintMonitor_clone(*args)
    def setcurdata(*args): return _pd.RestraintMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_RestraintMonitor
    __del__ = lambda self : None;
RestraintMonitor_swigregister = _pd.RestraintMonitor_swigregister
RestraintMonitor_swigregister(RestraintMonitor)

class AtomDistanceMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, AtomDistanceMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomDistanceMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_AtomDistanceMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.AtomDistanceMonitor_clone(*args)
    def setcurdata(*args): return _pd.AtomDistanceMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_AtomDistanceMonitor
    __del__ = lambda self : None;
AtomDistanceMonitor_swigregister = _pd.AtomDistanceMonitor_swigregister
AtomDistanceMonitor_swigregister(AtomDistanceMonitor)

class DistributionFunctionMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DistributionFunctionMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionFunctionMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_DistributionFunctionMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.DistributionFunctionMonitor_clone(*args)
    def setcurdata(*args): return _pd.DistributionFunctionMonitor_setcurdata(*args)
    def setSet1(*args): return _pd.DistributionFunctionMonitor_setSet1(*args)
    def setSet2(*args): return _pd.DistributionFunctionMonitor_setSet2(*args)
    def setCutoff(*args): return _pd.DistributionFunctionMonitor_setCutoff(*args)
    def getCutoff(*args): return _pd.DistributionFunctionMonitor_getCutoff(*args)
    __swig_destroy__ = _pd.delete_DistributionFunctionMonitor
    __del__ = lambda self : None;
DistributionFunctionMonitor_swigregister = _pd.DistributionFunctionMonitor_swigregister
DistributionFunctionMonitor_swigregister(DistributionFunctionMonitor)

class TIMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, TIMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TIMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_TIMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.TIMonitor_clone(*args)
    def setcurdata(*args): return _pd.TIMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_TIMonitor
    __del__ = lambda self : None;
TIMonitor_swigregister = _pd.TIMonitor_swigregister
TIMonitor_swigregister(TIMonitor)

class CRMSMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CRMSMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRMSMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_CRMSMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.CRMSMonitor_clone(*args)
    def setcurdata(*args): return _pd.CRMSMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_CRMSMonitor
    __del__ = lambda self : None;
CRMSMonitor_swigregister = _pd.CRMSMonitor_swigregister
CRMSMonitor_swigregister(CRMSMonitor)

class DRMSMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DRMSMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DRMSMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_DRMSMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.DRMSMonitor_clone(*args)
    def setcurdata(*args): return _pd.DRMSMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_DRMSMonitor
    __del__ = lambda self : None;
DRMSMonitor_swigregister = _pd.DRMSMonitor_swigregister
DRMSMonitor_swigregister(DRMSMonitor)

class DihedralMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, DihedralMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DihedralMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_DihedralMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.DihedralMonitor_clone(*args)
    def setcurdata(*args): return _pd.DihedralMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_DihedralMonitor
    __del__ = lambda self : None;
DihedralMonitor_swigregister = _pd.DihedralMonitor_swigregister
DihedralMonitor_swigregister(DihedralMonitor)

class FilterMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FilterMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FilterMonitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_FilterMonitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _pd.FilterMonitor_clone(*args)
    def setFilter(*args): return _pd.FilterMonitor_setFilter(*args)
    __swig_destroy__ = _pd.delete_FilterMonitor
    __del__ = lambda self : None;
FilterMonitor_swigregister = _pd.FilterMonitor_swigregister
FilterMonitor_swigregister(FilterMonitor)

printUmbrellaProfile = _pd.printUmbrellaProfile
class UmbrellaMonitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, UmbrellaMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UmbrellaMonitor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setcurdata(*args): return _pd.UmbrellaMonitor_setcurdata(*args)
    __swig_destroy__ = _pd.delete_UmbrellaMonitor
    __del__ = lambda self : None;
UmbrellaMonitor_swigregister = _pd.UmbrellaMonitor_swigregister
UmbrellaMonitor_swigregister(UmbrellaMonitor)

class FEP_Monitor(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FEP_Monitor, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEP_Monitor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_FEP_Monitor
    __del__ = lambda self : None;
    def setcurdata(*args): return _pd.FEP_Monitor_setcurdata(*args)
    def add_epot_diff(*args): return _pd.FEP_Monitor_add_epot_diff(*args)
    def fe_average(*args): return _pd.FEP_Monitor_fe_average(*args)
    def fe_average_prop(*args): return _pd.FEP_Monitor_fe_average_prop(*args)
    def fe_bootstrap(*args): return _pd.FEP_Monitor_fe_bootstrap(*args)
    def fe_bootstrap_sd(*args): return _pd.FEP_Monitor_fe_bootstrap_sd(*args)
    def fe_print_running_av(*args): return _pd.FEP_Monitor_fe_print_running_av(*args)
    def fe_print_running_av_prop(*args): return _pd.FEP_Monitor_fe_print_running_av_prop(*args)
    __swig_setmethods__["Temperature"] = _pd.FEP_Monitor_Temperature_set
    __swig_getmethods__["Temperature"] = _pd.FEP_Monitor_Temperature_get
    if _newclass:Temperature = _swig_property(_pd.FEP_Monitor_Temperature_get, _pd.FEP_Monitor_Temperature_set)
FEP_Monitor_swigregister = _pd.FEP_Monitor_swigregister
FEP_Monitor_swigregister(FEP_Monitor)

class FEP_ResConf_Cartesian(MonitorBase):
    __swig_setmethods__ = {}
    for _s in [MonitorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, FEP_ResConf_Cartesian, name, value)
    __swig_getmethods__ = {}
    for _s in [MonitorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEP_ResConf_Cartesian, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_FEP_ResConf_Cartesian
    __del__ = lambda self : None;
    __swig_setmethods__["k"] = _pd.FEP_ResConf_Cartesian_k_set
    __swig_getmethods__["k"] = _pd.FEP_ResConf_Cartesian_k_get
    if _newclass:k = _swig_property(_pd.FEP_ResConf_Cartesian_k_get, _pd.FEP_ResConf_Cartesian_k_set)
    __swig_setmethods__["Power"] = _pd.FEP_ResConf_Cartesian_Power_set
    __swig_getmethods__["Power"] = _pd.FEP_ResConf_Cartesian_Power_get
    if _newclass:Power = _swig_property(_pd.FEP_ResConf_Cartesian_Power_get, _pd.FEP_ResConf_Cartesian_Power_set)
    __swig_setmethods__["Type"] = _pd.FEP_ResConf_Cartesian_Type_set
    __swig_getmethods__["Type"] = _pd.FEP_ResConf_Cartesian_Type_get
    if _newclass:Type = _swig_property(_pd.FEP_ResConf_Cartesian_Type_get, _pd.FEP_ResConf_Cartesian_Type_set)
    __swig_setmethods__["addtototalene"] = _pd.FEP_ResConf_Cartesian_addtototalene_set
    __swig_getmethods__["addtototalene"] = _pd.FEP_ResConf_Cartesian_addtototalene_get
    if _newclass:addtototalene = _swig_property(_pd.FEP_ResConf_Cartesian_addtototalene_get, _pd.FEP_ResConf_Cartesian_addtototalene_set)
    __swig_setmethods__["FirstRes"] = _pd.FEP_ResConf_Cartesian_FirstRes_set
    __swig_getmethods__["FirstRes"] = _pd.FEP_ResConf_Cartesian_FirstRes_get
    if _newclass:FirstRes = _swig_property(_pd.FEP_ResConf_Cartesian_FirstRes_get, _pd.FEP_ResConf_Cartesian_FirstRes_set)
    __swig_setmethods__["LastRes"] = _pd.FEP_ResConf_Cartesian_LastRes_set
    __swig_getmethods__["LastRes"] = _pd.FEP_ResConf_Cartesian_LastRes_get
    if _newclass:LastRes = _swig_property(_pd.FEP_ResConf_Cartesian_LastRes_get, _pd.FEP_ResConf_Cartesian_LastRes_set)
    def settodefault(*args): return _pd.FEP_ResConf_Cartesian_settodefault(*args)
    def setcurdata(*args): return _pd.FEP_ResConf_Cartesian_setcurdata(*args)
    def calcEnergyAtQ(*args): return _pd.FEP_ResConf_Cartesian_calcEnergyAtQ(*args)
    def info(*args): return _pd.FEP_ResConf_Cartesian_info(*args)
    def saveCurrentAtomPositions(*args): return _pd.FEP_ResConf_Cartesian_saveCurrentAtomPositions(*args)
    def printAllData(*args): return _pd.FEP_ResConf_Cartesian_printAllData(*args)
    def setup(*args): return _pd.FEP_ResConf_Cartesian_setup(*args)
    __swig_setmethods__["nskip"] = _pd.FEP_ResConf_Cartesian_nskip_set
    __swig_getmethods__["nskip"] = _pd.FEP_ResConf_Cartesian_nskip_get
    if _newclass:nskip = _swig_property(_pd.FEP_ResConf_Cartesian_nskip_get, _pd.FEP_ResConf_Cartesian_nskip_set)
FEP_ResConf_Cartesian_swigregister = _pd.FEP_ResConf_Cartesian_swigregister
FEP_ResConf_Cartesian_swigregister(FEP_ResConf_Cartesian)

class Matrix3Nx3N(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Matrix3Nx3N, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3Nx3N, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Matrix3Nx3N(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Matrix3Nx3N
    __del__ = lambda self : None;
    def createEmpty(*args): return _pd.Matrix3Nx3N_createEmpty(*args)
    def printMathematica(*args): return _pd.Matrix3Nx3N_printMathematica(*args)
    __swig_setmethods__["matrix"] = _pd.Matrix3Nx3N_matrix_set
    __swig_getmethods__["matrix"] = _pd.Matrix3Nx3N_matrix_get
    if _newclass:matrix = _swig_property(_pd.Matrix3Nx3N_matrix_get, _pd.Matrix3Nx3N_matrix_set)
Matrix3Nx3N_swigregister = _pd.Matrix3Nx3N_swigregister
Matrix3Nx3N_swigregister(Matrix3Nx3N)

class Hessian(Matrix3Nx3N):
    __swig_setmethods__ = {}
    for _s in [Matrix3Nx3N]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Hessian, name, value)
    __swig_getmethods__ = {}
    for _s in [Matrix3Nx3N]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Hessian(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Hessian
    __del__ = lambda self : None;
    def massWeight(*args): return _pd.Hessian_massWeight(*args)
    __swig_setmethods__["e0"] = _pd.Hessian_e0_set
    __swig_getmethods__["e0"] = _pd.Hessian_e0_get
    if _newclass:e0 = _swig_property(_pd.Hessian_e0_get, _pd.Hessian_e0_set)
    __swig_setmethods__["x0"] = _pd.Hessian_x0_set
    __swig_getmethods__["x0"] = _pd.Hessian_x0_get
    if _newclass:x0 = _swig_property(_pd.Hessian_x0_get, _pd.Hessian_x0_set)
    def createEmpty(*args): return _pd.Hessian_createEmpty(*args)
    def writeRaw(*args): return _pd.Hessian_writeRaw(*args)
    def readRaw(*args): return _pd.Hessian_readRaw(*args)
Hessian_swigregister = _pd.Hessian_swigregister
Hessian_swigregister(Hessian)

class Hessian_Numerical(Hessian,ProtocolBase):
    __swig_setmethods__ = {}
    for _s in [Hessian,ProtocolBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Hessian_Numerical, name, value)
    __swig_getmethods__ = {}
    for _s in [Hessian,ProtocolBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hessian_Numerical, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_Hessian_Numerical(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_Hessian_Numerical
    __del__ = lambda self : None;
    def clone(*args): return _pd.Hessian_Numerical_clone(*args)
    def runcore(*args): return _pd.Hessian_Numerical_runcore(*args)
    __swig_setmethods__["ForceSymmetry"] = _pd.Hessian_Numerical_ForceSymmetry_set
    __swig_getmethods__["ForceSymmetry"] = _pd.Hessian_Numerical_ForceSymmetry_get
    if _newclass:ForceSymmetry = _swig_property(_pd.Hessian_Numerical_ForceSymmetry_get, _pd.Hessian_Numerical_ForceSymmetry_set)
    __swig_setmethods__["StepSize"] = _pd.Hessian_Numerical_StepSize_set
    __swig_getmethods__["StepSize"] = _pd.Hessian_Numerical_StepSize_get
    if _newclass:StepSize = _swig_property(_pd.Hessian_Numerical_StepSize_get, _pd.Hessian_Numerical_StepSize_set)
    __swig_setmethods__["FiniteDiffSteps"] = _pd.Hessian_Numerical_FiniteDiffSteps_set
    __swig_getmethods__["FiniteDiffSteps"] = _pd.Hessian_Numerical_FiniteDiffSteps_get
    if _newclass:FiniteDiffSteps = _swig_property(_pd.Hessian_Numerical_FiniteDiffSteps_get, _pd.Hessian_Numerical_FiniteDiffSteps_set)
Hessian_Numerical_swigregister = _pd.Hessian_Numerical_swigregister
Hessian_Numerical_swigregister(Hessian_Numerical)

class CovarianceMatrix(Hessian,MonitorBase,WorkSpaceOperatorBase):
    __swig_setmethods__ = {}
    for _s in [Hessian,MonitorBase,WorkSpaceOperatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, CovarianceMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [Hessian,MonitorBase,WorkSpaceOperatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CovarianceMatrix, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _pd.delete_CovarianceMatrix
    __del__ = lambda self : None;
    def reset(*args): return _pd.CovarianceMatrix_reset(*args)
    def setcurdata(*args): return _pd.CovarianceMatrix_setcurdata(*args)
    def finish(*args): return _pd.CovarianceMatrix_finish(*args)
    def massWeight(*args): return _pd.CovarianceMatrix_massWeight(*args)
CovarianceMatrix_swigregister = _pd.CovarianceMatrix_swigregister
CovarianceMatrix_swigregister(CovarianceMatrix)

class EigenSystem(WorkSpaceOperatorBase):
    __swig_setmethods__ = {}
    for _s in [WorkSpaceOperatorBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, EigenSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [WorkSpaceOperatorBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EigenSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_EigenSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def calcVibEntropy(*args): return _pd.EigenSystem_calcVibEntropy(*args)
    def calcVibEntropyFull(*args): return _pd.EigenSystem_calcVibEntropyFull(*args)
    def calcVibEntropyClassically(*args): return _pd.EigenSystem_calcVibEntropyClassically(*args)
    def applyAllEigenModes(*args): return _pd.EigenSystem_applyAllEigenModes(*args)
    def applyEigenMode(*args): return _pd.EigenSystem_applyEigenMode(*args)
    def printEigenValues(*args): return _pd.EigenSystem_printEigenValues(*args)
    __swig_destroy__ = _pd.delete_EigenSystem
    __del__ = lambda self : None;
EigenSystem_swigregister = _pd.EigenSystem_swigregister
EigenSystem_swigregister(EigenSystem)

class EigenSystem_Hessian(EigenSystem):
    __swig_setmethods__ = {}
    for _s in [EigenSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, EigenSystem_Hessian, name, value)
    __swig_getmethods__ = {}
    for _s in [EigenSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EigenSystem_Hessian, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_EigenSystem_Hessian(*args)
        try: self.this.append(this)
        except: self.this = this
    def calcEigenVectors(*args): return _pd.EigenSystem_Hessian_calcEigenVectors(*args)
    def calcEigenValues(*args): return _pd.EigenSystem_Hessian_calcEigenValues(*args)
    __swig_setmethods__["RemoveTraRot"] = _pd.EigenSystem_Hessian_RemoveTraRot_set
    __swig_getmethods__["RemoveTraRot"] = _pd.EigenSystem_Hessian_RemoveTraRot_get
    if _newclass:RemoveTraRot = _swig_property(_pd.EigenSystem_Hessian_RemoveTraRot_get, _pd.EigenSystem_Hessian_RemoveTraRot_set)
    def calcHessian(*args): return _pd.EigenSystem_Hessian_calcHessian(*args)
    def getE0(*args): return _pd.EigenSystem_Hessian_getE0(*args)
    __swig_destroy__ = _pd.delete_EigenSystem_Hessian
    __del__ = lambda self : None;
EigenSystem_Hessian_swigregister = _pd.EigenSystem_Hessian_swigregister
EigenSystem_Hessian_swigregister(EigenSystem_Hessian)

class EigenSystem_Covariance(EigenSystem):
    __swig_setmethods__ = {}
    for _s in [EigenSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, EigenSystem_Covariance, name, value)
    __swig_getmethods__ = {}
    for _s in [EigenSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EigenSystem_Covariance, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_EigenSystem_Covariance(*args)
        try: self.this.append(this)
        except: self.this = this
    def calcEigenVectors(*args): return _pd.EigenSystem_Covariance_calcEigenVectors(*args)
    def calcEigenValues(*args): return _pd.EigenSystem_Covariance_calcEigenValues(*args)
    def calcHessian(*args): return _pd.EigenSystem_Covariance_calcHessian(*args)
    __swig_setmethods__["Temperature"] = _pd.EigenSystem_Covariance_Temperature_set
    __swig_getmethods__["Temperature"] = _pd.EigenSystem_Covariance_Temperature_get
    if _newclass:Temperature = _swig_property(_pd.EigenSystem_Covariance_Temperature_get, _pd.EigenSystem_Covariance_Temperature_set)
    __swig_destroy__ = _pd.delete_EigenSystem_Covariance
    __del__ = lambda self : None;
EigenSystem_Covariance_swigregister = _pd.EigenSystem_Covariance_swigregister
EigenSystem_Covariance_swigregister(EigenSystem_Covariance)

PrintFullpdHeader = _pd.PrintFullpdHeader
Printpd = _pd.Printpd
PrintQuote = _pd.PrintQuote
cseed = _pd.cseed
ctimeseed = _pd.ctimeseed
cprint = _pd.cprint
detail = _pd.detail
info = _pd.info
timer = _pd.timer
printTimeStamp = _pd.printTimeStamp
printHostname = _pd.printHostname
printWorkingDirectory = _pd.printWorkingDirectory
printTitle = _pd.printTitle
class classA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, classA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classA, name)
    __repr__ = _swig_repr
    def test(*args): return _pd.classA_test(*args)
    def __init__(self, *args): 
        this = _pd.new_classA(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_classA
    __del__ = lambda self : None;
classA_swigregister = _pd.classA_swigregister
classA_swigregister(classA)

class classB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, classB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classB, name)
    __repr__ = _swig_repr
    def test(*args): return _pd.classB_test(*args)
    __swig_setmethods__["my_a"] = _pd.classB_my_a_set
    __swig_getmethods__["my_a"] = _pd.classB_my_a_get
    if _newclass:my_a = _swig_property(_pd.classB_my_a_get, _pd.classB_my_a_set)
    def __init__(self, *args): 
        this = _pd.new_classB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_classB
    __del__ = lambda self : None;
classB_swigregister = _pd.classB_swigregister
classB_swigregister(classB)

class classC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, classC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, classC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pd.new_classC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["a"] = _pd.classC_a_set
    __swig_getmethods__["a"] = _pd.classC_a_get
    if _newclass:a = _swig_property(_pd.classC_a_get, _pd.classC_a_set)
    __swig_setmethods__["b"] = _pd.classC_b_set
    __swig_getmethods__["b"] = _pd.classC_b_get
    if _newclass:b = _swig_property(_pd.classC_b_get, _pd.classC_b_set)
    __swig_destroy__ = _pd.delete_classC
    __del__ = lambda self : None;
classC_swigregister = _pd.classC_swigregister
classC_swigregister(classC)

class printer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, printer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, printer, name)
    __repr__ = _swig_repr
    def printint(*args): return _pd.printer_printint(*args)
    def __init__(self, *args): 
        this = _pd.new_printer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pd.delete_printer
    __del__ = lambda self : None;
printer_swigregister = _pd.printer_swigregister
printer_swigregister(printer)

import sys

def after(optionname, default):
  result = default
  next = 0
  for arg in sys.argv:
    if next == 1:
      result = arg
      break
    if arg == optionname:
      next = 1
  return result

def isarg(optionname):
  for arg in sys.argv:
    if arg == optionname:
      return True
  return False
  
def flushed_info(line):
	info(line)
	sys.stdout.flush()
	
def usage(Object): Object.usage()	

import sys

def pd_excepthook(etype, value, tb):
  if str(value) != "PD Exception": cprint( "\n-----! Python Exception !-------------------------")
  if hasattr(etype,'__name__'): stype = etype.__name__
  else:                       stype = etype
  cprint("%s %s %s %s"%("Fatal", str(stype),"occured:", str(value)))
  n = 0
  stack_filepos = []
  stack_funcname = []
  stack_line = []
  max_filepos = 0
  max_funcname = 0
  while tb is not None:
      co = tb.tb_frame.f_code
      filename = co.co_filename

      try:
        fp = open(co.co_filename, 'rU')
        lines = fp.readlines()
        line = lines[tb.tb_lineno-1]
        fp.close()
        if line: line = line.strip()
        else: line = None
      except: line = "cant open file"
      if filename[-5:] != 'pd.py':       ## ignore internal call stack
        filepos =  '%s:%d'%(co.co_filename, tb.tb_lineno)
        if len(filepos) > max_filepos: max_filepos = len(filepos)
        if len(co.co_name) > max_funcname: max_funcname = len(co.co_name)
        stack_filepos.append(filepos)
        stack_funcname.append(co.co_name)
        stack_line.append(line)
      tb = tb.tb_next
      n=n+1
  n = len(stack_filepos)-1
  fstr1 = '%%%ds'%(max_filepos+0)
  fstr2 = '%%%ds'%(max_funcname+0)
  prefix = "         at:"
  while n>=0:
    if stack_funcname[n] != "?":
      cprint( "%s %s %s %s %s %s"%( prefix, fstr1%stack_filepos[n],"in", fstr2%stack_funcname[n], "(...) :", stack_line[n] ))
    else:
      cprint( "%s %s %s %s %s %s"%( prefix, fstr1%stack_filepos[n],"  ", fstr2%" ",               "      :", stack_line[n] ))
    prefix = "called from:"
    n=n-1
 
## replace the standard exception handler with our own pd-aware version
sys.excepthook = pd_excepthook




