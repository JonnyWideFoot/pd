# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _restpermut
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import pd
restpermut_cflush = _restpermut.restpermut_cflush
class Restraint_PermuteSolvent(pd.RestraintForcefieldBase):
    __swig_setmethods__ = {}
    for _s in [pd.RestraintForcefieldBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, Restraint_PermuteSolvent, name, value)
    __swig_getmethods__ = {}
    for _s in [pd.RestraintForcefieldBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Restraint_PermuteSolvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _restpermut.new_Restraint_PermuteSolvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _restpermut.Restraint_PermuteSolvent_clone(*args)
    __swig_setmethods__["Power"] = _restpermut.Restraint_PermuteSolvent_Power_set
    __swig_getmethods__["Power"] = _restpermut.Restraint_PermuteSolvent_Power_get
    if _newclass:Power = _swig_property(_restpermut.Restraint_PermuteSolvent_Power_get, _restpermut.Restraint_PermuteSolvent_Power_set)
    __swig_setmethods__["UpdateAssignment"] = _restpermut.Restraint_PermuteSolvent_UpdateAssignment_set
    __swig_getmethods__["UpdateAssignment"] = _restpermut.Restraint_PermuteSolvent_UpdateAssignment_get
    if _newclass:UpdateAssignment = _swig_property(_restpermut.Restraint_PermuteSolvent_UpdateAssignment_get, _restpermut.Restraint_PermuteSolvent_UpdateAssignment_set)
    __swig_setmethods__["UpdateCostmatrix"] = _restpermut.Restraint_PermuteSolvent_UpdateCostmatrix_set
    __swig_getmethods__["UpdateCostmatrix"] = _restpermut.Restraint_PermuteSolvent_UpdateCostmatrix_get
    if _newclass:UpdateCostmatrix = _swig_property(_restpermut.Restraint_PermuteSolvent_UpdateCostmatrix_get, _restpermut.Restraint_PermuteSolvent_UpdateCostmatrix_set)
    __swig_setmethods__["MolName"] = _restpermut.Restraint_PermuteSolvent_MolName_set
    __swig_getmethods__["MolName"] = _restpermut.Restraint_PermuteSolvent_MolName_get
    if _newclass:MolName = _swig_property(_restpermut.Restraint_PermuteSolvent_MolName_get, _restpermut.Restraint_PermuteSolvent_MolName_set)
    __swig_setmethods__["RefAtomName"] = _restpermut.Restraint_PermuteSolvent_RefAtomName_set
    __swig_getmethods__["RefAtomName"] = _restpermut.Restraint_PermuteSolvent_RefAtomName_get
    if _newclass:RefAtomName = _swig_property(_restpermut.Restraint_PermuteSolvent_RefAtomName_get, _restpermut.Restraint_PermuteSolvent_RefAtomName_set)
    __swig_setmethods__["Sym_2_i"] = _restpermut.Restraint_PermuteSolvent_Sym_2_i_set
    __swig_getmethods__["Sym_2_i"] = _restpermut.Restraint_PermuteSolvent_Sym_2_i_get
    if _newclass:Sym_2_i = _swig_property(_restpermut.Restraint_PermuteSolvent_Sym_2_i_get, _restpermut.Restraint_PermuteSolvent_Sym_2_i_set)
    __swig_setmethods__["Sym_2_j"] = _restpermut.Restraint_PermuteSolvent_Sym_2_j_set
    __swig_getmethods__["Sym_2_j"] = _restpermut.Restraint_PermuteSolvent_Sym_2_j_get
    if _newclass:Sym_2_j = _swig_property(_restpermut.Restraint_PermuteSolvent_Sym_2_j_get, _restpermut.Restraint_PermuteSolvent_Sym_2_j_set)
    __swig_setmethods__["EneRestrictToFirst"] = _restpermut.Restraint_PermuteSolvent_EneRestrictToFirst_set
    __swig_getmethods__["EneRestrictToFirst"] = _restpermut.Restraint_PermuteSolvent_EneRestrictToFirst_get
    if _newclass:EneRestrictToFirst = _swig_property(_restpermut.Restraint_PermuteSolvent_EneRestrictToFirst_get, _restpermut.Restraint_PermuteSolvent_EneRestrictToFirst_set)
    __swig_setmethods__["VoroRestrictToFirst"] = _restpermut.Restraint_PermuteSolvent_VoroRestrictToFirst_set
    __swig_getmethods__["VoroRestrictToFirst"] = _restpermut.Restraint_PermuteSolvent_VoroRestrictToFirst_get
    if _newclass:VoroRestrictToFirst = _swig_property(_restpermut.Restraint_PermuteSolvent_VoroRestrictToFirst_get, _restpermut.Restraint_PermuteSolvent_VoroRestrictToFirst_set)
    def info(*args): return _restpermut.Restraint_PermuteSolvent_info(*args)
    def saveCurrentAtomPositions(*args): return _restpermut.Restraint_PermuteSolvent_saveCurrentAtomPositions(*args)
    def setKMul(*args): return _restpermut.Restraint_PermuteSolvent_setKMul(*args)
    def resetAssignment(*args): return _restpermut.Restraint_PermuteSolvent_resetAssignment(*args)
    def benchAssignment(*args): return _restpermut.Restraint_PermuteSolvent_benchAssignment(*args)
    def benchAssignment_Munkres(*args): return _restpermut.Restraint_PermuteSolvent_benchAssignment_Munkres(*args)
    __swig_destroy__ = _restpermut.delete_Restraint_PermuteSolvent
    __del__ = lambda self : None;
Restraint_PermuteSolvent_swigregister = _restpermut.Restraint_PermuteSolvent_swigregister
Restraint_PermuteSolvent_swigregister(Restraint_PermuteSolvent)



