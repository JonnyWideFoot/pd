# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _gromacs
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import pd
class OutTra_GRO(pd.OutputTrajectoryFile):
    __swig_setmethods__ = {}
    for _s in [pd.OutputTrajectoryFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutTra_GRO, name, value)
    __swig_getmethods__ = {}
    for _s in [pd.OutputTrajectoryFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutTra_GRO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gromacs.new_OutTra_GRO(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _gromacs.OutTra_GRO_clone(*args)
    def create(*args): return _gromacs.OutTra_GRO_create(*args)
    def append(*args): return _gromacs.OutTra_GRO_append(*args)
    __swig_destroy__ = _gromacs.delete_OutTra_GRO
    __del__ = lambda self : None;
OutTra_GRO_swigregister = _gromacs.OutTra_GRO_swigregister
OutTra_GRO_swigregister(OutTra_GRO)

class OutTra_XTC(pd.OutputTrajectoryFile):
    __swig_setmethods__ = {}
    for _s in [pd.OutputTrajectoryFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutTra_XTC, name, value)
    __swig_getmethods__ = {}
    for _s in [pd.OutputTrajectoryFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutTra_XTC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gromacs.new_OutTra_XTC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gromacs.delete_OutTra_XTC
    __del__ = lambda self : None;
    def clone(*args): return _gromacs.OutTra_XTC_clone(*args)
    def create(*args): return _gromacs.OutTra_XTC_create(*args)
    def append(*args): return _gromacs.OutTra_XTC_append(*args)
OutTra_XTC_swigregister = _gromacs.OutTra_XTC_swigregister
OutTra_XTC_swigregister(OutTra_XTC)

class OutputFile_GRO(pd.OutputFile):
    __swig_setmethods__ = {}
    for _s in [pd.OutputFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile_GRO, name, value)
    __swig_getmethods__ = {}
    for _s in [pd.OutputFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile_GRO, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gromacs.new_OutputFile_GRO(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _gromacs.OutputFile_GRO_clone(*args)
    def save(*args): return _gromacs.OutputFile_GRO_save(*args)
    __swig_destroy__ = _gromacs.delete_OutputFile_GRO
    __del__ = lambda self : None;
OutputFile_GRO_swigregister = _gromacs.OutputFile_GRO_swigregister
OutputFile_GRO_swigregister(OutputFile_GRO)

class OutputFile_XTC(pd.OutputFile):
    __swig_setmethods__ = {}
    for _s in [pd.OutputFile]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, OutputFile_XTC, name, value)
    __swig_getmethods__ = {}
    for _s in [pd.OutputFile]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputFile_XTC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gromacs.new_OutputFile_XTC(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(*args): return _gromacs.OutputFile_XTC_clone(*args)
    def save(*args): return _gromacs.OutputFile_XTC_save(*args)
    __swig_destroy__ = _gromacs.delete_OutputFile_XTC
    __del__ = lambda self : None;
OutputFile_XTC_swigregister = _gromacs.OutputFile_XTC_swigregister
OutputFile_XTC_swigregister(OutputFile_XTC)

class InTra_XTC(pd.InputTrajectory):
    __swig_setmethods__ = {}
    for _s in [pd.InputTrajectory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, InTra_XTC, name, value)
    __swig_getmethods__ = {}
    for _s in [pd.InputTrajectory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InTra_XTC, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gromacs.new_InTra_XTC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gromacs.delete_InTra_XTC
    __del__ = lambda self : None;
    def clone(*args): return _gromacs.InTra_XTC_clone(*args)
    def readNext(*args): return _gromacs.InTra_XTC_readNext(*args)
    def skip(*args): return _gromacs.InTra_XTC_skip(*args)
    def isEndOfFile(*args): return _gromacs.InTra_XTC_isEndOfFile(*args)
    def reset(*args): return _gromacs.InTra_XTC_reset(*args)
InTra_XTC_swigregister = _gromacs.InTra_XTC_swigregister
InTra_XTC_swigregister(InTra_XTC)



